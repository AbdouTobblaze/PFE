
OPAMP_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007904  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134fc  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801af90  0801af90  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  0801af90  0801af90  0002af90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af98  0801af98  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801af98  0801af98  0002af98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801af9c  0801af9c  0002af9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801afa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000924c  20000074  0801b014  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200092c0  0801b014  000392c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e93  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c1b  00000000  00000000  00046f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  00049b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0004afd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000255ed  00000000  00000000  0004c298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e4e  00000000  00000000  00071885  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb9f6  00000000  00000000  000826d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  0016e0c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bdc  00000000  00000000  0016e1b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002a79  00000000  00000000  00173d90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a7c 	.word	0x08007a7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007a7c 	.word	0x08007a7c

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800047e:	f1a4 0401 	sub.w	r4, r4, #1
 8000482:	d1e9      	bne.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b972 	b.w	8000e78 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14b      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4615      	mov	r5, r2
 8000bbe:	d967      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0720 	rsb	r7, r2, #32
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	fa20 f707 	lsr.w	r7, r0, r7
 8000bd2:	4095      	lsls	r5, r2
 8000bd4:	ea47 0803 	orr.w	r8, r7, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be4:	fa1f fc85 	uxth.w	ip, r5
 8000be8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18eb      	adds	r3, r5, r3
 8000bfa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfe:	f080 811b 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8118 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c08:	3f02      	subs	r7, #2
 8000c0a:	442b      	add	r3, r5
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c20:	45a4      	cmp	ip, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	192c      	adds	r4, r5, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c2e:	45a4      	cmp	ip, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c34:	3802      	subs	r0, #2
 8000c36:	442c      	add	r4, r5
 8000c38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c3c:	eba4 040c 	sub.w	r4, r4, ip
 8000c40:	2700      	movs	r7, #0
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xbe>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80eb 	beq.w	8000e32 <__udivmoddi4+0x286>
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c62:	4638      	mov	r0, r7
 8000c64:	4639      	mov	r1, r7
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f783 	clz	r7, r3
 8000c6e:	2f00      	cmp	r7, #0
 8000c70:	d147      	bne.n	8000d02 <__udivmoddi4+0x156>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd0>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80fa 	bhi.w	8000e70 <__udivmoddi4+0x2c4>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	4698      	mov	r8, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000c8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xe8>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 808f 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9e:	1b49      	subs	r1, r1, r5
 8000ca0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca4:	fa1f f885 	uxth.w	r8, r5
 8000ca8:	2701      	movs	r7, #1
 8000caa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cc0:	18eb      	adds	r3, r5, r3
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	f200 80cd 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x14c>
 8000ce8:	192c      	adds	r4, r5, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x14a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80b6 	bhi.w	8000e62 <__udivmoddi4+0x2b6>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e79f      	b.n	8000c42 <__udivmoddi4+0x96>
 8000d02:	f1c7 0c20 	rsb	ip, r7, #32
 8000d06:	40bb      	lsls	r3, r7
 8000d08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d10:	fa01 f407 	lsl.w	r4, r1, r7
 8000d14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d20:	4325      	orrs	r5, r4
 8000d22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d26:	0c2c      	lsrs	r4, r5, #16
 8000d28:	fb08 3319 	mls	r3, r8, r9, r3
 8000d2c:	fa1f fa8e 	uxth.w	sl, lr
 8000d30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d34:	fb09 f40a 	mul.w	r4, r9, sl
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1e 0303 	adds.w	r3, lr, r3
 8000d48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d4c:	f080 8087 	bcs.w	8000e5e <__udivmoddi4+0x2b2>
 8000d50:	429c      	cmp	r4, r3
 8000d52:	f240 8084 	bls.w	8000e5e <__udivmoddi4+0x2b2>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4473      	add	r3, lr
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	b2ad      	uxth	r5, r5
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d70:	45a2      	cmp	sl, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1e 0404 	adds.w	r4, lr, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	d26b      	bcs.n	8000e56 <__udivmoddi4+0x2aa>
 8000d7e:	45a2      	cmp	sl, r4
 8000d80:	d969      	bls.n	8000e56 <__udivmoddi4+0x2aa>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4474      	add	r4, lr
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8e:	eba4 040a 	sub.w	r4, r4, sl
 8000d92:	454c      	cmp	r4, r9
 8000d94:	46c2      	mov	sl, r8
 8000d96:	464b      	mov	r3, r9
 8000d98:	d354      	bcc.n	8000e44 <__udivmoddi4+0x298>
 8000d9a:	d051      	beq.n	8000e40 <__udivmoddi4+0x294>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2c8>
 8000da0:	ebb1 050a 	subs.w	r5, r1, sl
 8000da4:	eb64 0403 	sbc.w	r4, r4, r3
 8000da8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	40fc      	lsrs	r4, r7
 8000db0:	ea4c 0505 	orr.w	r5, ip, r5
 8000db4:	e9c6 5400 	strd	r5, r4, [r6]
 8000db8:	2700      	movs	r7, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc4:	4095      	lsls	r5, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	fa21 f303 	lsr.w	r3, r1, r3
 8000dce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd2:	4338      	orrs	r0, r7
 8000dd4:	0c01      	lsrs	r1, r0, #16
 8000dd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dda:	fa1f f885 	uxth.w	r8, r5
 8000dde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb07 f308 	mul.w	r3, r7, r8
 8000dea:	428b      	cmp	r3, r1
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x256>
 8000df2:	1869      	adds	r1, r5, r1
 8000df4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df8:	d22f      	bcs.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d92d      	bls.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfe:	3f02      	subs	r7, #2
 8000e00:	4429      	add	r1, r5
 8000e02:	1acb      	subs	r3, r1, r3
 8000e04:	b281      	uxth	r1, r0
 8000e06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb00 f308 	mul.w	r3, r0, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x27e>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e20:	d217      	bcs.n	8000e52 <__udivmoddi4+0x2a6>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d915      	bls.n	8000e52 <__udivmoddi4+0x2a6>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1ac9      	subs	r1, r1, r3
 8000e2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e30:	e73b      	b.n	8000caa <__udivmoddi4+0xfe>
 8000e32:	4637      	mov	r7, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e709      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e38:	4607      	mov	r7, r0
 8000e3a:	e6e7      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e40:	4541      	cmp	r1, r8
 8000e42:	d2ab      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e48:	eb69 020e 	sbc.w	r2, r9, lr
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	4613      	mov	r3, r2
 8000e50:	e7a4      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e52:	4660      	mov	r0, ip
 8000e54:	e7e9      	b.n	8000e2a <__udivmoddi4+0x27e>
 8000e56:	4618      	mov	r0, r3
 8000e58:	e795      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5a:	4667      	mov	r7, ip
 8000e5c:	e7d1      	b.n	8000e02 <__udivmoddi4+0x256>
 8000e5e:	4681      	mov	r9, r0
 8000e60:	e77c      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e62:	3802      	subs	r0, #2
 8000e64:	442c      	add	r4, r5
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0x14c>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	442b      	add	r3, r5
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e70:	4638      	mov	r0, r7
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xda>
 8000e74:	4637      	mov	r7, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa0>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	0000      	movs	r0, r0
	...

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e86:	f000 fd8c 	bl	80019a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 f8e1 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 fabb 	bl	8001408 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e92:	f000 fa9b 	bl	80013cc <MX_DMA_Init>
  MX_DAC1_Init();
 8000e96:	f000 f9bf 	bl	8001218 <MX_DAC1_Init>
  MX_OPAMP1_Init();
 8000e9a:	f000 f9ef 	bl	800127c <MX_OPAMP1_Init>
  MX_ADC1_Init();
 8000e9e:	f000 f955 	bl	800114c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ea2:	f000 fa63 	bl	800136c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000ea6:	f000 fa0f 	bl	80012c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  arm_rfft_fast_init_f32(&fft_inst, 2048);
 8000eaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eae:	4858      	ldr	r0, [pc, #352]	; (8001010 <main+0x190>)
 8000eb0:	f004 ffbe 	bl	8005e30 <arm_rfft_fast_init_f32>
  sprintf(message,"Hello \n\r");
 8000eb4:	4a57      	ldr	r2, [pc, #348]	; (8001014 <main+0x194>)
 8000eb6:	4b58      	ldr	r3, [pc, #352]	; (8001018 <main+0x198>)
 8000eb8:	cb03      	ldmia	r3!, {r0, r1}
 8000eba:	6010      	str	r0, [r2, #0]
 8000ebc:	6051      	str	r1, [r2, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	7213      	strb	r3, [r2, #8]
  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000ec2:	4854      	ldr	r0, [pc, #336]	; (8001014 <main+0x194>)
 8000ec4:	f7ff f9e4 	bl	8000290 <strlen>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	4950      	ldr	r1, [pc, #320]	; (8001014 <main+0x194>)
 8000ed2:	4852      	ldr	r0, [pc, #328]	; (800101c <main+0x19c>)
 8000ed4:	f004 fb80 	bl	80055d8 <HAL_UART_Transmit>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ed8:	217f      	movs	r1, #127	; 0x7f
 8000eda:	4851      	ldr	r0, [pc, #324]	; (8001020 <main+0x1a0>)
 8000edc:	f001 ff15 	bl	8002d0a <HAL_ADCEx_Calibration_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4850      	ldr	r0, [pc, #320]	; (8001024 <main+0x1a4>)
 8000ee4:	f002 f8a5 	bl	8003032 <HAL_DAC_Start>
  HAL_OPAMP_Start(&hopamp1);
 8000ee8:	484f      	ldr	r0, [pc, #316]	; (8001028 <main+0x1a8>)
 8000eea:	f002 fe77 	bl	8003bdc <HAL_OPAMP_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048u);
 8000eee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	484b      	ldr	r0, [pc, #300]	; (8001024 <main+0x1a4>)
 8000ef8:	f002 f8e8 	bl	80030cc <HAL_DAC_SetValue>
//  HAL_ADC_Start(&hadc1);
  HAL_TIM_Base_Start(&htim1);
 8000efc:	484b      	ldr	r0, [pc, #300]	; (800102c <main+0x1ac>)
 8000efe:	f004 f8b3 	bl	8005068 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000f02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f06:	494a      	ldr	r1, [pc, #296]	; (8001030 <main+0x1b0>)
 8000f08:	4845      	ldr	r0, [pc, #276]	; (8001020 <main+0x1a0>)
 8000f0a:	f001 f915 	bl	8002138 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(adc_complete == 1)
 8000f0e:	4b49      	ldr	r3, [pc, #292]	; (8001034 <main+0x1b4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0fa      	beq.n	8000f0e <main+0x8e>
	  {
		  adc_complete = 0;
 8000f18:	4b46      	ldr	r3, [pc, #280]	; (8001034 <main+0x1b4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < ADC_BUFFER_SIZE; i++ )
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e028      	b.n	8000f76 <main+0xf6>
			  adc_buffer_float[i] = (float)adc_buffer[i]*3.3/4096.0;
 8000f24:	4a42      	ldr	r2, [pc, #264]	; (8001030 <main+0x1b0>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f34:	ee17 0a90 	vmov	r0, s15
 8000f38:	f7ff fb66 	bl	8000608 <__aeabi_f2d>
 8000f3c:	a332      	add	r3, pc, #200	; (adr r3, 8001008 <main+0x188>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fbb9 	bl	80006b8 <__aeabi_dmul>
 8000f46:	4603      	mov	r3, r0
 8000f48:	460c      	mov	r4, r1
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <main+0x1b8>)
 8000f54:	f7ff fcda 	bl	800090c <__aeabi_ddiv>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	460c      	mov	r4, r1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	4621      	mov	r1, r4
 8000f60:	f7ff fdbc 	bl	8000adc <__aeabi_d2f>
 8000f64:	4601      	mov	r1, r0
 8000f66:	4a35      	ldr	r2, [pc, #212]	; (800103c <main+0x1bc>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	6019      	str	r1, [r3, #0]
		  for (int i = 0; i < ADC_BUFFER_SIZE; i++ )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3301      	adds	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f7c:	dbd2      	blt.n	8000f24 <main+0xa4>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f82:	492b      	ldr	r1, [pc, #172]	; (8001030 <main+0x1b0>)
 8000f84:	4826      	ldr	r0, [pc, #152]	; (8001020 <main+0x1a0>)
 8000f86:	f001 f8d7 	bl	8002138 <HAL_ADC_Start_DMA>
		  DoFFT();
 8000f8a:	f000 fa81 	bl	8001490 <DoFFT>
		  sprintf(message,"S, ");
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <main+0x194>)
 8000f90:	4a2b      	ldr	r2, [pc, #172]	; (8001040 <main+0x1c0>)
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	6018      	str	r0, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 10);
 8000f96:	481f      	ldr	r0, [pc, #124]	; (8001014 <main+0x194>)
 8000f98:	f7ff f97a 	bl	8000290 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	491c      	ldr	r1, [pc, #112]	; (8001014 <main+0x194>)
 8000fa4:	481d      	ldr	r0, [pc, #116]	; (800101c <main+0x19c>)
 8000fa6:	f004 fb17 	bl	80055d8 <HAL_UART_Transmit>
		  for(int i = 0; i < ADC_BUFFER_SIZE/2; i++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	e015      	b.n	8000fdc <main+0x15c>
		  {
			  sprintf(message,"%d, ", freqs[i]);
 8000fb0:	4a24      	ldr	r2, [pc, #144]	; (8001044 <main+0x1c4>)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4923      	ldr	r1, [pc, #140]	; (8001048 <main+0x1c8>)
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <main+0x194>)
 8000fbe:	f005 ff3d 	bl	8006e3c <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 10);
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <main+0x194>)
 8000fc4:	f7ff f964 	bl	8000290 <strlen>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	230a      	movs	r3, #10
 8000fce:	4911      	ldr	r1, [pc, #68]	; (8001014 <main+0x194>)
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <main+0x19c>)
 8000fd2:	f004 fb01 	bl	80055d8 <HAL_UART_Transmit>
		  for(int i = 0; i < ADC_BUFFER_SIZE/2; i++)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe2:	dbe5      	blt.n	8000fb0 <main+0x130>
		  }
		  sprintf(message,"\n\r");
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <main+0x194>)
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <main+0x1cc>)
 8000fe8:	8811      	ldrh	r1, [r2, #0]
 8000fea:	7892      	ldrb	r2, [r2, #2]
 8000fec:	8019      	strh	r1, [r3, #0]
 8000fee:	709a      	strb	r2, [r3, #2]
		  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 10);
 8000ff0:	4808      	ldr	r0, [pc, #32]	; (8001014 <main+0x194>)
 8000ff2:	f7ff f94d 	bl	8000290 <strlen>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	4905      	ldr	r1, [pc, #20]	; (8001014 <main+0x194>)
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <main+0x19c>)
 8001000:	f004 faea 	bl	80055d8 <HAL_UART_Transmit>
	  if(adc_complete == 1)
 8001004:	e783      	b.n	8000f0e <main+0x8e>
 8001006:	bf00      	nop
 8001008:	66666666 	.word	0x66666666
 800100c:	400a6666 	.word	0x400a6666
 8001010:	20003254 	.word	0x20003254
 8001014:	200020b4 	.word	0x200020b4
 8001018:	08007a94 	.word	0x08007a94
 800101c:	2000218c 	.word	0x2000218c
 8001020:	20002128 	.word	0x20002128
 8001024:	200000a0 	.word	0x200000a0
 8001028:	200020f4 	.word	0x200020f4
 800102c:	2000326c 	.word	0x2000326c
 8001030:	20002254 	.word	0x20002254
 8001034:	20000090 	.word	0x20000090
 8001038:	40b00000 	.word	0x40b00000
 800103c:	200000b4 	.word	0x200000b4
 8001040:	08007aa0 	.word	0x08007aa0
 8001044:	200072b8 	.word	0x200072b8
 8001048:	08007aa4 	.word	0x08007aa4
 800104c:	08007aac 	.word	0x08007aac

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0ae      	sub	sp, #184	; 0xb8
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800105a:	2244      	movs	r2, #68	; 0x44
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f005 fee4 	bl	8006e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2260      	movs	r2, #96	; 0x60
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fed6 	bl	8006e2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001080:	2301      	movs	r3, #1
 8001082:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001084:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001088:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001090:	2303      	movs	r3, #3
 8001092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 20;
 800109c:	2314      	movs	r3, #20
 800109e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010a2:	2307      	movs	r3, #7
 80010a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fe25 	bl	8003d08 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80010c4:	f000 fa50 	bl	8001568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2303      	movs	r3, #3
 80010ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010e0:	2104      	movs	r1, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fa30 	bl	8004548 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80010ee:	f000 fa3b 	bl	8001568 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 80010f2:	f244 0301 	movw	r3, #16385	; 0x4001
 80010f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001100:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001102:	2303      	movs	r3, #3
 8001104:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800110a:	2308      	movs	r3, #8
 800110c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800110e:	2307      	movs	r3, #7
 8001110:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800111a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	463b      	mov	r3, r7
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fc14 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800112e:	f000 fa1b 	bl	8001568 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001132:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001136:	f002 fd91 	bl	8003c5c <HAL_PWREx_ControlVoltageScaling>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001140:	f000 fa12 	bl	8001568 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	37b8      	adds	r7, #184	; 0xb8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <MX_ADC1_Init+0xc0>)
 8001164:	4a2a      	ldr	r2, [pc, #168]	; (8001210 <MX_ADC1_Init+0xc4>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <MX_ADC1_Init+0xc0>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116e:	4b27      	ldr	r3, [pc, #156]	; (800120c <MX_ADC1_Init+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <MX_ADC1_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <MX_ADC1_Init+0xc0>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <MX_ADC1_Init+0xc0>)
 8001182:	2204      	movs	r2, #4
 8001184:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_ADC1_Init+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <MX_ADC1_Init+0xc0>)
 800118e:	2200      	movs	r2, #0
 8001190:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_ADC1_Init+0xc0>)
 8001194:	2201      	movs	r2, #1
 8001196:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <MX_ADC1_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_ADC1_Init+0xc0>)
 80011a2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_ADC1_Init+0xc0>)
 80011aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <MX_ADC1_Init+0xc0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_ADC1_Init+0xc0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_ADC1_Init+0xc0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <MX_ADC1_Init+0xc0>)
 80011c8:	f000 fe70 	bl	8001eac <HAL_ADC_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011d2:	f000 f9c9 	bl	8001568 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_ADC1_Init+0xc8>)
 80011d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011da:	2306      	movs	r3, #6
 80011dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80011de:	2305      	movs	r3, #5
 80011e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e2:	237f      	movs	r3, #127	; 0x7f
 80011e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 2048;
 80011ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_ADC1_Init+0xc0>)
 80011f6:	f001 f837 	bl	8002268 <HAL_ADC_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001200:	f000 f9b2 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20002128 	.word	0x20002128
 8001210:	50040000 	.word	0x50040000
 8001214:	21800100 	.word	0x21800100

08001218 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2224      	movs	r2, #36	; 0x24
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f005 fe01 	bl	8006e2c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_DAC1_Init+0x5c>)
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_DAC1_Init+0x60>)
 800122e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001230:	4810      	ldr	r0, [pc, #64]	; (8001274 <MX_DAC1_Init+0x5c>)
 8001232:	f001 fedc 	bl	8002fee <HAL_DAC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800123c:	f000 f994 	bl	8001568 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800124c:	2301      	movs	r3, #1
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_DAC1_Init+0x5c>)
 800125c:	f001 ff5b 	bl	8003116 <HAL_DAC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001266:	f000 f97f 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000a0 	.word	0x200000a0
 8001278:	40007400 	.word	0x40007400

0800127c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_OPAMP1_Init+0x44>)
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <MX_OPAMP1_Init+0x48>)
 8001284:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_OPAMP1_Init+0x44>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_OPAMP1_Init+0x44>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC_CH;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_OPAMP1_Init+0x44>)
 8001294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001298:	615a      	str	r2, [r3, #20]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_OPAMP1_Init+0x44>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_OPAMP1_Init+0x44>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_OPAMP1_Init+0x44>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_OPAMP1_Init+0x44>)
 80012ae:	f002 fbbf 	bl	8003a30 <HAL_OPAMP_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_OPAMP1_Init+0x40>
  {
    Error_Handler();
 80012b8:	f000 f956 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200020f4 	.word	0x200020f4
 80012c4:	40007800 	.word	0x40007800

080012c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_TIM1_Init+0x9c>)
 80012e8:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <MX_TIM1_Init+0xa0>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40-1;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_TIM1_Init+0x9c>)
 80012ee:	2227      	movs	r2, #39	; 0x27
 80012f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_TIM1_Init+0x9c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 46-1;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_TIM1_Init+0x9c>)
 80012fa:	222d      	movs	r2, #45	; 0x2d
 80012fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_TIM1_Init+0x9c>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_TIM1_Init+0x9c>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_TIM1_Init+0x9c>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001310:	4814      	ldr	r0, [pc, #80]	; (8001364 <MX_TIM1_Init+0x9c>)
 8001312:	f003 fe51 	bl	8004fb8 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800131c:	f000 f924 	bl	8001568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_TIM1_Init+0x9c>)
 800132e:	f003 fee7 	bl	8005100 <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001338:	f000 f916 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800133c:	2320      	movs	r3, #32
 800133e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_TIM1_Init+0x9c>)
 800134e:	f004 f88f 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001358:	f000 f906 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000326c 	.word	0x2000326c
 8001368:	40012c00 	.word	0x40012c00

0800136c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <MX_USART1_UART_Init+0x5c>)
 8001374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART1_UART_Init+0x58>)
 80013b0:	f004 f8c4 	bl	800553c <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ba:	f000 f8d5 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000218c 	.word	0x2000218c
 80013c8:	40013800 	.word	0x40013800

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_DMA_Init+0x38>)
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <MX_DMA_Init+0x38>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6493      	str	r3, [r2, #72]	; 0x48
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_DMA_Init+0x38>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200b      	movs	r0, #11
 80013f0:	f001 fdc7 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013f4:	200b      	movs	r0, #11
 80013f6:	f001 fde0 	bl	8002fba <HAL_NVIC_EnableIRQ>

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_GPIO_Init+0x44>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <MX_GPIO_Init+0x44>)
 8001414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_GPIO_Init+0x44>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_GPIO_Init+0x44>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <MX_GPIO_Init+0x44>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_GPIO_Init+0x44>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <complexABS>:
  * @brief  Compute to norm of a complexe number |z| = sqrt((Re)^2 + (Im)^2)
  * @param  real is the real part of the complexe number
  * @param  compl is the imaginary part of the complexe number
  * @retval None
  */
float complexABS(float real, float compl) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	ed87 0a01 	vstr	s0, [r7, #4]
 800145a:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 800145e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001462:	edd7 7a01 	vldr	s15, [r7, #4]
 8001466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146a:	edd7 6a00 	vldr	s13, [r7]
 800146e:	edd7 7a00 	vldr	s15, [r7]
 8001472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	f006 f959 	bl	8007734 <sqrtf>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
}
 8001486:	eeb0 0a67 	vmov.f32	s0, s15
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <DoFFT>:
/**
  * @brief  Compute the FFT of a given array (must be initialized before with arm_rfft_fast_init_f32(&fft_inst, ADC_BUFFER_SIZE))
  * @parm	None
  * @retval None
  */
void DoFFT(void) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
	//Do FFT (last argument is 0 -> fft not invfft)
	arm_rfft_fast_f32(&fft_inst, adc_buffer_float, fft_out_buf, 0);
 8001496:	2300      	movs	r3, #0
 8001498:	4a27      	ldr	r2, [pc, #156]	; (8001538 <DoFFT+0xa8>)
 800149a:	4928      	ldr	r1, [pc, #160]	; (800153c <DoFFT+0xac>)
 800149c:	4828      	ldr	r0, [pc, #160]	; (8001540 <DoFFT+0xb0>)
 800149e:	f004 fd4b 	bl	8005f38 <arm_rfft_fast_f32>

	int freqpoint = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
	int offset = 0; //variable noisefloor offset
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]

	//calculate abs values and linear-to-dB
	for (int i=0; i< (ADC_BUFFER_SIZE*2); i=i+2) {
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	e03b      	b.n	8001528 <DoFFT+0x98>
		float norm = complexABS(fft_out_buf[i], fft_out_buf[i+1]);
 80014b0:	4a21      	ldr	r2, [pc, #132]	; (8001538 <DoFFT+0xa8>)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <DoFFT+0xa8>)
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	eef0 0a47 	vmov.f32	s1, s14
 80014ce:	eeb0 0a67 	vmov.f32	s0, s15
 80014d2:	f7ff ffbd 	bl	8001450 <complexABS>
 80014d6:	ed87 0a00 	vstr	s0, [r7]
		if (norm > 0)
 80014da:	edd7 7a00 	vldr	s15, [r7]
 80014de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	dd14      	ble.n	8001512 <DoFFT+0x82>
			freqs[freqpoint] = (int)(20*log10f(norm)) - offset;
 80014e8:	ed97 0a00 	vldr	s0, [r7]
 80014ec:	f006 f8ac 	bl	8007648 <log10f>
 80014f0:	eeb0 7a40 	vmov.f32	s14, s0
 80014f4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80014f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001500:	ee17 2a90 	vmov	r2, s15
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	1ad2      	subs	r2, r2, r3
 8001508:	490e      	ldr	r1, [pc, #56]	; (8001544 <DoFFT+0xb4>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001510:	e004      	b.n	800151c <DoFFT+0x8c>
		//if (freqs[freqpoint]<0) freqs[freqpoint]=0;
		else
			freqs[freqpoint] = 0;
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <DoFFT+0xb4>)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2100      	movs	r1, #0
 8001518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		freqpoint++;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
	for (int i=0; i< (ADC_BUFFER_SIZE*2); i=i+2) {
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3302      	adds	r3, #2
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800152e:	dbbf      	blt.n	80014b0 <DoFFT+0x20>
	}
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200032b8 	.word	0x200032b8
 800153c:	200000b4 	.word	0x200000b4
 8001540:	20003254 	.word	0x20003254
 8001544:	200072b8 	.word	0x200072b8

08001548 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	adc_complete = 1;
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000090 	.word	0x20000090

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156e:	e7fe      	b.n	800156e <Error_Handler+0x6>

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x44>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_MspInit+0x44>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6613      	str	r3, [r2, #96]	; 0x60
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_MspInit+0x44>)
 8001584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_MspInit+0x44>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_MspInit+0x44>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6593      	str	r3, [r2, #88]	; 0x58
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_MspInit+0x44>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_ADC_MspInit+0x88>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d136      	bne.n	8001638 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_ADC_MspInit+0x8c>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_ADC_MspInit+0x8c>)
 80015d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_ADC_MspInit+0x8c>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_ADC_MspInit+0x90>)
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <HAL_ADC_MspInit+0x94>)
 80015e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_ADC_MspInit+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_ADC_MspInit+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_ADC_MspInit+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_ADC_MspInit+0x90>)
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_ADC_MspInit+0x90>)
 8001602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001606:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_ADC_MspInit+0x90>)
 800160a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_ADC_MspInit+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_ADC_MspInit+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800161c:	480a      	ldr	r0, [pc, #40]	; (8001648 <HAL_ADC_MspInit+0x90>)
 800161e:	f001 fe95 	bl	800334c <HAL_DMA_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 8001628:	f7ff ff9e 	bl	8001568 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_ADC_MspInit+0x90>)
 8001630:	64da      	str	r2, [r3, #76]	; 0x4c
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <HAL_ADC_MspInit+0x90>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	50040000 	.word	0x50040000
 8001644:	40021000 	.word	0x40021000
 8001648:	2000220c 	.word	0x2000220c
 800164c:	40020008 	.word	0x40020008

08001650 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <HAL_DAC_MspInit+0x74>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d124      	bne.n	80016bc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_DAC_MspInit+0x78>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <HAL_DAC_MspInit+0x78>)
 8001678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800167c:	6593      	str	r3, [r2, #88]	; 0x58
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_DAC_MspInit+0x78>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <HAL_DAC_MspInit+0x78>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_DAC_MspInit+0x78>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <HAL_DAC_MspInit+0x78>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016a2:	2310      	movs	r3, #16
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	2303      	movs	r3, #3
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f002 f840 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40007400 	.word	0x40007400
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a15      	ldr	r2, [pc, #84]	; (8001740 <HAL_OPAMP_MspInit+0x74>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d124      	bne.n	8001738 <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_OPAMP_MspInit+0x78>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_OPAMP_MspInit+0x78>)
 80016f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_OPAMP_MspInit+0x78>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_OPAMP_MspInit+0x78>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_OPAMP_MspInit+0x78>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_OPAMP_MspInit+0x78>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINM
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800171e:	230a      	movs	r3, #10
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001722:	2303      	movs	r3, #3
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f002 f802 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40007800 	.word	0x40007800
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_TIM_Base_MspInit+0x38>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10b      	bne.n	8001772 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_TIM_Base_MspInit+0x3c>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_TIM_Base_MspInit+0x3c>)
 8001760:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001764:	6613      	str	r3, [r2, #96]	; 0x60
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <HAL_TIM_Base_MspInit+0x3c>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40012c00 	.word	0x40012c00
 8001784:	40021000 	.word	0x40021000

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a18      	ldr	r2, [pc, #96]	; (8001808 <HAL_UART_MspInit+0x80>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d129      	bne.n	80017fe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_UART_MspInit+0x84>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_UART_MspInit+0x84>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6613      	str	r3, [r2, #96]	; 0x60
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_UART_MspInit+0x84>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_UART_MspInit+0x84>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_UART_MspInit+0x84>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_UART_MspInit+0x84>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ec:	2307      	movs	r3, #7
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f001 ff9f 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40013800 	.word	0x40013800
 800180c:	40021000 	.word	0x40021000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <NMI_Handler+0x4>

08001816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <HardFault_Handler+0x4>

0800181c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <MemManage_Handler+0x4>

08001822 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <UsageFault_Handler+0x4>

0800182e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f000 f8f6 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Channel1_IRQHandler+0x10>)
 800186a:	f001 fe87 	bl	800357c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000220c 	.word	0x2000220c

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f005 fa96 	bl	8006dd8 <__errno>
 80018ac:	4602      	mov	r2, r0
 80018ae:	230c      	movs	r3, #12
 80018b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20010000 	.word	0x20010000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000094 	.word	0x20000094
 80018e0:	200092c0 	.word	0x200092c0

080018e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <SystemInit+0x64>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a16      	ldr	r2, [pc, #88]	; (8001948 <SystemInit+0x64>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <SystemInit+0x68>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a13      	ldr	r2, [pc, #76]	; (800194c <SystemInit+0x68>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <SystemInit+0x68>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <SystemInit+0x68>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <SystemInit+0x68>)
 8001910:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001914:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001918:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <SystemInit+0x68>)
 800191c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001920:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <SystemInit+0x68>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <SystemInit+0x68>)
 8001928:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <SystemInit+0x68>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SystemInit+0x64>)
 8001936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800193a:	609a      	str	r2, [r3, #8]
#endif
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	40021000 	.word	0x40021000

08001950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001988 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001954:	f7ff ffc6 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001958:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800195a:	e003      	b.n	8001964 <LoopCopyDataInit>

0800195c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800195e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001960:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001962:	3104      	adds	r1, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001964:	480a      	ldr	r0, [pc, #40]	; (8001990 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001968:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800196a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800196c:	d3f6      	bcc.n	800195c <CopyDataInit>
	ldr	r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001970:	e002      	b.n	8001978 <LoopFillZerobss>

08001972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001972:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001974:	f842 3b04 	str.w	r3, [r2], #4

08001978 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <LoopForever+0x16>)
	cmp	r2, r3
 800197a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800197c:	d3f9      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197e:	f005 fa31 	bl	8006de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001982:	f7ff fa7d 	bl	8000e80 <main>

08001986 <LoopForever>:

LoopForever:
    b LoopForever
 8001986:	e7fe      	b.n	8001986 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001988:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800198c:	0801afa0 	.word	0x0801afa0
	ldr	r0, =_sdata
 8001990:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001994:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001998:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800199c:	200092c0 	.word	0x200092c0

080019a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_IRQHandler>

080019a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f001 fadd 	bl	8002f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 f80e 	bl	80019d4 <HAL_InitTick>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	e001      	b.n	80019c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019c4:	f7ff fdd4 	bl	8001570 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019c8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_InitTick+0x6c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d023      	beq.n	8001a30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_InitTick+0x70>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_InitTick+0x6c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 fae9 	bl	8002fd6 <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	d809      	bhi.n	8001a24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f001 fab3 	bl	8002f82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_InitTick+0x74>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e007      	b.n	8001a34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e004      	b.n	8001a34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	e001      	b.n	8001a34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000000 	.word	0x20000000
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x20>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x24>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_IncTick+0x24>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	200092b8 	.word	0x200092b8

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	200092b8 	.word	0x200092b8

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff ffee 	bl	8001a74 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_Delay+0x40>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000008 	.word	0x20000008

08001ad0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3360      	adds	r3, #96	; 0x60
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <LL_ADC_SetOffset+0x44>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	4313      	orrs	r3, r2
 8001b68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	03fff000 	.word	0x03fff000

08001b80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3360      	adds	r3, #96	; 0x60
 8001b8e:	461a      	mov	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3360      	adds	r3, #96	; 0x60
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bd6:	bf00      	nop
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3330      	adds	r3, #48	; 0x30
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	4413      	add	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	211f      	movs	r1, #31
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	0e9b      	lsrs	r3, r3, #26
 8001c40:	f003 011f 	and.w	r1, r3, #31
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c54:	bf00      	nop
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3314      	adds	r3, #20
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	0e5b      	lsrs	r3, r3, #25
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	0d1b      	lsrs	r3, r3, #20
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2107      	movs	r1, #7
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	401a      	ands	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	0d1b      	lsrs	r3, r3, #20
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001caa:	bf00      	nop
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0318 	and.w	r3, r3, #24
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cdc:	40d9      	lsrs	r1, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	0007ffff 	.word	0x0007ffff

08001d00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6093      	str	r3, [r2, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d38:	d101      	bne.n	8001d3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd8:	f043 0202 	orr.w	r2, r3, #2
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <LL_ADC_IsEnabled+0x18>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <LL_ADC_IsEnabled+0x1a>
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d101      	bne.n	8001e2a <LL_ADC_IsDisableOngoing+0x18>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <LL_ADC_IsDisableOngoing+0x1a>
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e4c:	f043 0204 	orr.w	r2, r3, #4
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d101      	bne.n	8001e78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d101      	bne.n	8001e9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e12a      	b.n	800211c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fb6f 	bl	80015b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff19 	bl	8001d24 <LL_ADC_IsDeepPowerDownEnabled>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff feff 	bl	8001d00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff34 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d113      	bne.n	8001f3a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff18 	bl	8001d4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f1c:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_ADC_Init+0x278>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	4a81      	ldr	r2, [pc, #516]	; (8002128 <HAL_ADC_Init+0x27c>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f2c:	e002      	b.n	8001f34 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f9      	bne.n	8001f2e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff18 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10d      	bne.n	8001f66 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff78 	bl	8001e60 <LL_ADC_REG_IsConversionOngoing>
 8001f70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 80c5 	bne.w	800210a <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 80c1 	bne.w	800210a <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f90:	f043 0202 	orr.w	r2, r3, #2
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff25 	bl	8001dec <LL_ADC_IsEnabled>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fa8:	4860      	ldr	r0, [pc, #384]	; (800212c <HAL_ADC_Init+0x280>)
 8001faa:	f7ff ff1f 	bl	8001dec <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	485d      	ldr	r0, [pc, #372]	; (8002130 <HAL_ADC_Init+0x284>)
 8001fbc:	f7ff fd88 	bl	8001ad0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7e5b      	ldrb	r3, [r3, #25]
 8001fc4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fd0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fd6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fde:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d106      	bne.n	8001ffc <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	045b      	lsls	r3, r3, #17
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_ADC_Init+0x288>)
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	69b9      	ldr	r1, [r7, #24]
 8002028:	430b      	orrs	r3, r1
 800202a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff15 	bl	8001e60 <LL_ADC_REG_IsConversionOngoing>
 8002036:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff22 	bl	8001e86 <LL_ADC_INJ_IsConversionOngoing>
 8002042:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d13d      	bne.n	80020c6 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d13a      	bne.n	80020c6 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002054:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800205c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800206c:	f023 0302 	bic.w	r3, r3, #2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	69b9      	ldr	r1, [r7, #24]
 8002076:	430b      	orrs	r3, r1
 8002078:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002080:	2b01      	cmp	r3, #1
 8002082:	d118      	bne.n	80020b6 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020a0:	4311      	orrs	r1, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020a6:	430a      	orrs	r2, r1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	611a      	str	r2, [r3, #16]
 80020b4:	e007      	b.n	80020c6 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0201 	bic.w	r2, r2, #1
 80020c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10c      	bne.n	80020e8 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f023 010f 	bic.w	r1, r3, #15
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	1e5a      	subs	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
 80020e6:	e007      	b.n	80020f8 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 020f 	bic.w	r2, r2, #15
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	f023 0303 	bic.w	r3, r3, #3
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
 8002108:	e007      	b.n	800211a <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	f043 0210 	orr.w	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800211a:	7ffb      	ldrb	r3, [r7, #31]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000000 	.word	0x20000000
 8002128:	053e2d63 	.word	0x053e2d63
 800212c:	50040000 	.word	0x50040000
 8002130:	50040300 	.word	0x50040300
 8002134:	fff0c007 	.word	0xfff0c007

08002138 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fe89 	bl	8001e60 <LL_ADC_REG_IsConversionOngoing>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d167      	bne.n	8002224 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_ADC_Start_DMA+0x2a>
 800215e:	2302      	movs	r3, #2
 8002160:	e063      	b.n	800222a <HAL_ADC_Start_DMA+0xf2>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fc5a 	bl	8002a24 <ADC_Enable>
 8002170:	4603      	mov	r3, r0
 8002172:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d14f      	bne.n	800221a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f023 0206 	bic.w	r2, r3, #6
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	659a      	str	r2, [r3, #88]	; 0x58
 80021a6:	e002      	b.n	80021ae <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	4a20      	ldr	r2, [pc, #128]	; (8002234 <HAL_ADC_Start_DMA+0xfc>)
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	4a1f      	ldr	r2, [pc, #124]	; (8002238 <HAL_ADC_Start_DMA+0x100>)
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	4a1e      	ldr	r2, [pc, #120]	; (800223c <HAL_ADC_Start_DMA+0x104>)
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	221c      	movs	r2, #28
 80021cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0210 	orr.w	r2, r2, #16
 80021e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3340      	adds	r3, #64	; 0x40
 8002200:	4619      	mov	r1, r3
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f001 f959 	bl	80034bc <HAL_DMA_Start_IT>
 800220a:	4603      	mov	r3, r0
 800220c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fe10 	bl	8001e38 <LL_ADC_REG_StartConversion>
 8002218:	e006      	b.n	8002228 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002222:	e001      	b.n	8002228 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002224:	2302      	movs	r3, #2
 8002226:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002228:	7dfb      	ldrb	r3, [r7, #23]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	08002b89 	.word	0x08002b89
 8002238:	08002c61 	.word	0x08002c61
 800223c:	08002c7d 	.word	0x08002c7d

08002240 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0b6      	sub	sp, #216	; 0xd8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_ADC_ConfigChannel+0x22>
 8002286:	2302      	movs	r3, #2
 8002288:	e3b8      	b.n	80029fc <HAL_ADC_ConfigChannel+0x794>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fde2 	bl	8001e60 <LL_ADC_REG_IsConversionOngoing>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 839d 	bne.w	80029de <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b05      	cmp	r3, #5
 80022aa:	d824      	bhi.n	80022f6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	3b02      	subs	r3, #2
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d81b      	bhi.n	80022ee <HAL_ADC_ConfigChannel+0x86>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_ADC_ConfigChannel+0x54>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	080022d5 	.word	0x080022d5
 80022c4:	080022dd 	.word	0x080022dd
 80022c8:	080022e5 	.word	0x080022e5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	220c      	movs	r2, #12
 80022d0:	605a      	str	r2, [r3, #4]
          break;
 80022d2:	e011      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2212      	movs	r2, #18
 80022d8:	605a      	str	r2, [r3, #4]
          break;
 80022da:	e00d      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2218      	movs	r2, #24
 80022e0:	605a      	str	r2, [r3, #4]
          break;
 80022e2:	e009      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ea:	605a      	str	r2, [r3, #4]
          break;
 80022ec:	e004      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2206      	movs	r2, #6
 80022f2:	605a      	str	r2, [r3, #4]
          break;
 80022f4:	e000      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80022f6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	f7ff fc7f 	bl	8001c08 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fda6 	bl	8001e60 <LL_ADC_REG_IsConversionOngoing>
 8002314:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fdb2 	bl	8001e86 <LL_ADC_INJ_IsConversionOngoing>
 8002322:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002326:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 81a6 	bne.w	800267c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 81a1 	bne.w	800267c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	461a      	mov	r2, r3
 8002348:	f7ff fc8a 	bl	8001c60 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	08db      	lsrs	r3, r3, #3
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b04      	cmp	r3, #4
 800236c:	d00a      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6919      	ldr	r1, [r3, #16]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800237e:	f7ff fbdb 	bl	8001b38 <LL_ADC_SetOffset>
 8002382:	e17b      	b.n	800267c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fbf8 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x148>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fbed 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 021f 	and.w	r2, r3, #31
 80023ae:	e01e      	b.n	80023ee <HAL_ADC_ConfigChannel+0x186>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fbe2 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e004      	b.n	80023ec <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80023e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x19e>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	0e9b      	lsrs	r3, r3, #26
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	e018      	b.n	8002438 <HAL_ADC_ConfigChannel+0x1d0>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800241a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800241e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e004      	b.n	8002438 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800242e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002438:	429a      	cmp	r2, r3
 800243a:	d106      	bne.n	800244a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fbb1 	bl	8001bac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2101      	movs	r1, #1
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fb95 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x20e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fb8a 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	e01e      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x24c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2101      	movs	r1, #1
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fb7f 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002494:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800249c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e004      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80024a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x264>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	e018      	b.n	80024fe <HAL_ADC_ConfigChannel+0x296>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	e004      	b.n	80024fe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80024f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024fe:	429a      	cmp	r2, r3
 8002500:	d106      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2200      	movs	r2, #0
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fb4e 	bl	8001bac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2102      	movs	r1, #2
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fb32 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <HAL_ADC_ConfigChannel+0x2d4>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2102      	movs	r1, #2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fb27 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	f003 021f 	and.w	r2, r3, #31
 800253a:	e01e      	b.n	800257a <HAL_ADC_ConfigChannel+0x312>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2102      	movs	r1, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fb1c 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800255a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800255e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002562:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800256a:	2320      	movs	r3, #32
 800256c:	e004      	b.n	8002578 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800256e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x32a>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	0e9b      	lsrs	r3, r3, #26
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	e016      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x358>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80025b2:	2320      	movs	r3, #32
 80025b4:	e004      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80025b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d106      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2102      	movs	r1, #2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff faed 	bl	8001bac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2103      	movs	r1, #3
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fad1 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x396>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2103      	movs	r1, #3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fac6 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	e017      	b.n	800262e <HAL_ADC_ConfigChannel+0x3c6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2103      	movs	r1, #3
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fabb 	bl	8001b80 <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002618:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800261a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e003      	b.n	800262c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002636:	2b00      	cmp	r3, #0
 8002638:	d105      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x3de>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0e9b      	lsrs	r3, r3, #26
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	e011      	b.n	800266a <HAL_ADC_ConfigChannel+0x402>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002656:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800265e:	2320      	movs	r3, #32
 8002660:	e003      	b.n	800266a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800266a:	429a      	cmp	r2, r3
 800266c:	d106      	bne.n	800267c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	2103      	movs	r1, #3
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fa98 	bl	8001bac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fbb3 	bl	8001dec <LL_ADC_IsEnabled>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 813f 	bne.w	800290c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	461a      	mov	r2, r3
 800269c:	f7ff fb0c 	bl	8001cb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a8e      	ldr	r2, [pc, #568]	; (80028e0 <HAL_ADC_ConfigChannel+0x678>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	f040 8130 	bne.w	800290c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x46c>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2b09      	cmp	r3, #9
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e019      	b.n	8002708 <HAL_ADC_ConfigChannel+0x4a0>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80026f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2b09      	cmp	r3, #9
 8002700:	bf94      	ite	ls
 8002702:	2301      	movls	r3, #1
 8002704:	2300      	movhi	r3, #0
 8002706:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002708:	2b00      	cmp	r3, #0
 800270a:	d079      	beq.n	8002800 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x4c0>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	3301      	adds	r3, #1
 8002720:	069b      	lsls	r3, r3, #26
 8002722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002726:	e015      	b.n	8002754 <HAL_ADC_ConfigChannel+0x4ec>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002738:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800273a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002740:	2320      	movs	r3, #32
 8002742:	e003      	b.n	800274c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	3301      	adds	r3, #1
 800274e:	069b      	lsls	r3, r3, #26
 8002750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x50c>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	3301      	adds	r3, #1
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	e017      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x53c>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800278c:	2320      	movs	r3, #32
 800278e:	e003      	b.n	8002798 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3301      	adds	r3, #1
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	ea42 0103 	orr.w	r1, r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10a      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x562>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0e9b      	lsrs	r3, r3, #26
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	051b      	lsls	r3, r3, #20
 80027c8:	e018      	b.n	80027fc <HAL_ADC_ConfigChannel+0x594>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80027e2:	2320      	movs	r3, #32
 80027e4:	e003      	b.n	80027ee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80027e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fc:	430b      	orrs	r3, r1
 80027fe:	e080      	b.n	8002902 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_ADC_ConfigChannel+0x5b4>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0e9b      	lsrs	r3, r3, #26
 8002812:	3301      	adds	r3, #1
 8002814:	069b      	lsls	r3, r3, #26
 8002816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800281a:	e015      	b.n	8002848 <HAL_ADC_ConfigChannel+0x5e0>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3301      	adds	r3, #1
 8002842:	069b      	lsls	r3, r3, #26
 8002844:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x600>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	3301      	adds	r3, #1
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2101      	movs	r1, #1
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	e017      	b.n	8002898 <HAL_ADC_ConfigChannel+0x630>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	61fb      	str	r3, [r7, #28]
  return result;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002880:	2320      	movs	r3, #32
 8002882:	e003      	b.n	800288c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	ea42 0103 	orr.w	r1, r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10d      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x65c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	3b1e      	subs	r3, #30
 80028bc:	051b      	lsls	r3, r3, #20
 80028be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c2:	e01d      	b.n	8002900 <HAL_ADC_ConfigChannel+0x698>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	613b      	str	r3, [r7, #16]
  return result;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d103      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e005      	b.n	80028ec <HAL_ADC_ConfigChannel+0x684>
 80028e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f003 021f 	and.w	r2, r3, #31
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	3b1e      	subs	r3, #30
 80028fa:	051b      	lsls	r3, r3, #20
 80028fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002900:	430b      	orrs	r3, r1
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6892      	ldr	r2, [r2, #8]
 8002906:	4619      	mov	r1, r3
 8002908:	f7ff f9aa 	bl	8001c60 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <HAL_ADC_ConfigChannel+0x79c>)
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d06b      	beq.n	80029f0 <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002918:	483b      	ldr	r0, [pc, #236]	; (8002a08 <HAL_ADC_ConfigChannel+0x7a0>)
 800291a:	f7ff f8ff 	bl	8001b1c <LL_ADC_GetCommonPathInternalCh>
 800291e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a39      	ldr	r2, [pc, #228]	; (8002a0c <HAL_ADC_ConfigChannel+0x7a4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d126      	bne.n	800297a <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800292c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d120      	bne.n	800297a <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <HAL_ADC_ConfigChannel+0x7a8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d156      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800294a:	4619      	mov	r1, r3
 800294c:	482e      	ldr	r0, [pc, #184]	; (8002a08 <HAL_ADC_ConfigChannel+0x7a0>)
 800294e:	f7ff f8d2 	bl	8001af6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_ADC_ConfigChannel+0x7ac>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	099b      	lsrs	r3, r3, #6
 8002958:	4a2f      	ldr	r2, [pc, #188]	; (8002a18 <HAL_ADC_ConfigChannel+0x7b0>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	099a      	lsrs	r2, r3, #6
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800296a:	e002      	b.n	8002972 <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3b01      	subs	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f9      	bne.n	800296c <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002978:	e03a      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <HAL_ADC_ConfigChannel+0x7b4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d113      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x744>
 8002984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_ADC_ConfigChannel+0x7a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d12a      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800299a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a2:	4619      	mov	r1, r3
 80029a4:	4818      	ldr	r0, [pc, #96]	; (8002a08 <HAL_ADC_ConfigChannel+0x7a0>)
 80029a6:	f7ff f8a6 	bl	8001af6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029aa:	e021      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_ADC_ConfigChannel+0x7b8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d11c      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_ADC_ConfigChannel+0x7a8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d111      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029d4:	4619      	mov	r1, r3
 80029d6:	480c      	ldr	r0, [pc, #48]	; (8002a08 <HAL_ADC_ConfigChannel+0x7a0>)
 80029d8:	f7ff f88d 	bl	8001af6 <LL_ADC_SetCommonPathInternalCh>
 80029dc:	e008      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f043 0220 	orr.w	r2, r3, #32
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029f8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	37d8      	adds	r7, #216	; 0xd8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	80080000 	.word	0x80080000
 8002a08:	50040300 	.word	0x50040300
 8002a0c:	c7520000 	.word	0xc7520000
 8002a10:	50040000 	.word	0x50040000
 8002a14:	20000000 	.word	0x20000000
 8002a18:	053e2d63 	.word	0x053e2d63
 8002a1c:	cb840000 	.word	0xcb840000
 8002a20:	80000001 	.word	0x80000001

08002a24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff f9db 	bl	8001dec <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d146      	bne.n	8002aca <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <ADC_Enable+0xb0>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	f043 0210 	orr.w	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e032      	b.n	8002acc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f996 	bl	8001d9c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a70:	f7ff f800 	bl	8001a74 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a76:	e021      	b.n	8002abc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f9b5 	bl	8001dec <LL_ADC_IsEnabled>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d104      	bne.n	8002a92 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff f985 	bl	8001d9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a92:	f7fe ffef 	bl	8001a74 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d90d      	bls.n	8002abc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa4:	f043 0210 	orr.w	r2, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f043 0201 	orr.w	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e007      	b.n	8002acc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d1d6      	bne.n	8002a78 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	8000003f 	.word	0x8000003f

08002ad8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff f994 	bl	8001e12 <LL_ADC_IsDisableOngoing>
 8002aea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f97b 	bl	8001dec <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d040      	beq.n	8002b7e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d13d      	bne.n	8002b7e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030d 	and.w	r3, r3, #13
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10c      	bne.n	8002b2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f955 	bl	8001dc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b22:	f7fe ffa7 	bl	8001a74 <HAL_GetTick>
 8002b26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b28:	e022      	b.n	8002b70 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e01c      	b.n	8002b80 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b46:	f7fe ff95 	bl	8001a74 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d90d      	bls.n	8002b70 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f043 0210 	orr.w	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f043 0201 	orr.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e007      	b.n	8002b80 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e3      	bne.n	8002b46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d14b      	bne.n	8002c3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d021      	beq.n	8002c00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff f80e 	bl	8001be2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d032      	beq.n	8002c32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d12b      	bne.n	8002c32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11f      	bne.n	8002c32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8002bfe:	e018      	b.n	8002c32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d111      	bne.n	8002c32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7fe fc88 	bl	8001548 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c38:	e00e      	b.n	8002c58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff fb04 	bl	8002254 <HAL_ADC_ErrorCallback>
}
 8002c4c:	e004      	b.n	8002c58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4798      	blx	r3
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f7ff fae6 	bl	8002240 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	f043 0204 	orr.w	r2, r3, #4
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff fad6 	bl	8002254 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <LL_ADC_StartCalibration>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002cc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cf6:	d101      	bne.n	8002cfc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_ADCEx_Calibration_Start+0x1c>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e04d      	b.n	8002dc2 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fed2 	bl	8002ad8 <ADC_Disable>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d136      	bne.n	8002dac <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d46:	f023 0302 	bic.w	r3, r3, #2
 8002d4a:	f043 0202 	orr.w	r2, r3, #2
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6839      	ldr	r1, [r7, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ffa9 	bl	8002cb0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d5e:	e014      	b.n	8002d8a <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	3301      	adds	r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002d6c:	d30d      	bcc.n	8002d8a <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f023 0312 	bic.w	r3, r3, #18
 8002d76:	f043 0210 	orr.w	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e01b      	b.n	8002dc2 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ffa7 	bl	8002ce2 <LL_ADC_IsCalibrationOnGoing>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e2      	bne.n	8002d60 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
 8002daa:	e005      	b.n	8002db8 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f043 0210 	orr.w	r2, r3, #16
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60d3      	str	r3, [r2, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <__NVIC_EnableIRQ+0x38>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	; (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f38:	d301      	bcc.n	8002f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00f      	b.n	8002f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <SysTick_Config+0x40>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f46:	210f      	movs	r1, #15
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f7ff ff8e 	bl	8002e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <SysTick_Config+0x40>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <SysTick_Config+0x40>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000e010 	.word	0xe000e010

08002f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff29 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f94:	f7ff ff3e 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f7ff ff8e 	bl	8002ec0 <NVIC_EncodePriority>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff5d 	bl	8002e6c <__NVIC_SetPriority>
}
 8002fb2:	bf00      	nop
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff31 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ffa2 	bl	8002f28 <SysTick_Config>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e014      	b.n	800302a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	791b      	ldrb	r3, [r3, #4]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fe fb1d 	bl	8001650 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	795b      	ldrb	r3, [r3, #5]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_DAC_Start+0x16>
 8003044:	2302      	movs	r3, #2
 8003046:	e03b      	b.n	80030c0 <HAL_DAC_Start+0x8e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6819      	ldr	r1, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2201      	movs	r2, #1
 8003062:	409a      	lsls	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800307c:	2b04      	cmp	r3, #4
 800307e:	d118      	bne.n	80030b2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	e00f      	b.n	80030b2 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800309c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030a0:	d107      	bne.n	80030b2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0202 	orr.w	r2, r2, #2
 80030b0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	3308      	adds	r3, #8
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e004      	b.n	8003100 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	3314      	adds	r3, #20
 80030fe:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	461a      	mov	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b088      	sub	sp, #32
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	795b      	ldrb	r3, [r3, #5]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_DAC_ConfigChannel+0x1c>
 800312e:	2302      	movs	r3, #2
 8003130:	e107      	b.n	8003342 <HAL_DAC_ConfigChannel+0x22c>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2202      	movs	r2, #2
 800313c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b04      	cmp	r3, #4
 8003144:	d174      	bne.n	8003230 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003146:	f7fe fc95 	bl	8001a74 <HAL_GetTick>
 800314a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d134      	bne.n	80031bc <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003152:	e011      	b.n	8003178 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003154:	f7fe fc8e 	bl	8001a74 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d90a      	bls.n	8003178 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f043 0208 	orr.w	r2, r3, #8
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2203      	movs	r2, #3
 8003172:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0e4      	b.n	8003342 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e6      	bne.n	8003154 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003186:	2001      	movs	r0, #1
 8003188:	f7fe fc80 	bl	8001a8c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	6992      	ldr	r2, [r2, #24]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
 8003196:	e01e      	b.n	80031d6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003198:	f7fe fc6c 	bl	8001a74 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d90a      	bls.n	80031bc <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f043 0208 	orr.w	r2, r3, #8
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2203      	movs	r2, #3
 80031b6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0c2      	b.n	8003342 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dbe8      	blt.n	8003198 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80031c6:	2001      	movs	r0, #1
 80031c8:	f7fe fc60 	bl	8001a8c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	6992      	ldr	r2, [r2, #24]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	ea02 0103 	and.w	r1, r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	409a      	lsls	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	21ff      	movs	r1, #255	; 0xff
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	ea02 0103 	and.w	r1, r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	6a1a      	ldr	r2, [r3, #32]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	409a      	lsls	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d11d      	bne.n	8003274 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	221f      	movs	r2, #31
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2207      	movs	r2, #7
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	431a      	orrs	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43da      	mvns	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	400a      	ands	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	f640 72fc 	movw	r2, #4092	; 0xffc
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6819      	ldr	r1, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	22c0      	movs	r2, #192	; 0xc0
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	400a      	ands	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e098      	b.n	8003490 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	4b4d      	ldr	r3, [pc, #308]	; (800349c <HAL_DMA_Init+0x150>)
 8003366:	429a      	cmp	r2, r3
 8003368:	d80f      	bhi.n	800338a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <HAL_DMA_Init+0x154>)
 8003372:	4413      	add	r3, r2
 8003374:	4a4b      	ldr	r2, [pc, #300]	; (80034a4 <HAL_DMA_Init+0x158>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	009a      	lsls	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a48      	ldr	r2, [pc, #288]	; (80034a8 <HAL_DMA_Init+0x15c>)
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
 8003388:	e00e      	b.n	80033a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	4b46      	ldr	r3, [pc, #280]	; (80034ac <HAL_DMA_Init+0x160>)
 8003392:	4413      	add	r3, r2
 8003394:	4a43      	ldr	r2, [pc, #268]	; (80034a4 <HAL_DMA_Init+0x158>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	009a      	lsls	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a42      	ldr	r2, [pc, #264]	; (80034b0 <HAL_DMA_Init+0x164>)
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003402:	d039      	beq.n	8003478 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <HAL_DMA_Init+0x15c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d11a      	bne.n	8003444 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_DMA_Init+0x168>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f003 031c 	and.w	r3, r3, #28
 800341a:	210f      	movs	r1, #15
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	4924      	ldr	r1, [pc, #144]	; (80034b4 <HAL_DMA_Init+0x168>)
 8003424:	4013      	ands	r3, r2
 8003426:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003428:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <HAL_DMA_Init+0x168>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	f003 031c 	and.w	r3, r3, #28
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	491d      	ldr	r1, [pc, #116]	; (80034b4 <HAL_DMA_Init+0x168>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
 8003442:	e019      	b.n	8003478 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003444:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <HAL_DMA_Init+0x16c>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f003 031c 	and.w	r3, r3, #28
 8003450:	210f      	movs	r1, #15
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	4917      	ldr	r1, [pc, #92]	; (80034b8 <HAL_DMA_Init+0x16c>)
 800345a:	4013      	ands	r3, r2
 800345c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <HAL_DMA_Init+0x16c>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f003 031c 	and.w	r3, r3, #28
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	4911      	ldr	r1, [pc, #68]	; (80034b8 <HAL_DMA_Init+0x16c>)
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40020407 	.word	0x40020407
 80034a0:	bffdfff8 	.word	0xbffdfff8
 80034a4:	cccccccd 	.word	0xcccccccd
 80034a8:	40020000 	.word	0x40020000
 80034ac:	bffdfbf8 	.word	0xbffdfbf8
 80034b0:	40020400 	.word	0x40020400
 80034b4:	400200a8 	.word	0x400200a8
 80034b8:	400204a8 	.word	0x400204a8

080034bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_DMA_Start_IT+0x20>
 80034d8:	2302      	movs	r3, #2
 80034da:	e04b      	b.n	8003574 <HAL_DMA_Start_IT+0xb8>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d13a      	bne.n	8003566 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f8e0 	bl	80036da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 020e 	orr.w	r2, r2, #14
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e00f      	b.n	8003554 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 020a 	orr.w	r2, r2, #10
 8003552:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e005      	b.n	8003572 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800356e:	2302      	movs	r3, #2
 8003570:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	f003 031c 	and.w	r3, r3, #28
 800359c:	2204      	movs	r2, #4
 800359e:	409a      	lsls	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d026      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x7a>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d021      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0204 	bic.w	r2, r2, #4
 80035ce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	f003 021c 	and.w	r2, r3, #28
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	2104      	movs	r1, #4
 80035de:	fa01 f202 	lsl.w	r2, r1, r2
 80035e2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d071      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80035f4:	e06c      	b.n	80036d0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f003 031c 	and.w	r3, r3, #28
 80035fe:	2202      	movs	r2, #2
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02e      	beq.n	8003668 <HAL_DMA_IRQHandler+0xec>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d029      	beq.n	8003668 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 020a 	bic.w	r2, r2, #10
 8003630:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f003 021c 	and.w	r2, r3, #28
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2102      	movs	r1, #2
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d038      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003666:	e033      	b.n	80036d0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	f003 031c 	and.w	r3, r3, #28
 8003670:	2208      	movs	r2, #8
 8003672:	409a      	lsls	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02a      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x156>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d025      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 020e 	bic.w	r2, r2, #14
 8003694:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f003 021c 	and.w	r2, r3, #28
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2101      	movs	r1, #1
 80036a4:	fa01 f202 	lsl.w	r2, r1, r2
 80036a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
}
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	f003 021c 	and.w	r2, r3, #28
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2101      	movs	r1, #1
 80036f6:	fa01 f202 	lsl.w	r2, r1, r2
 80036fa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b10      	cmp	r3, #16
 800370a:	d108      	bne.n	800371e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800371c:	e007      	b.n	800372e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	60da      	str	r2, [r3, #12]
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800374a:	e154      	b.n	80039f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	4013      	ands	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8146 	beq.w	80039f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d00b      	beq.n	8003784 <HAL_GPIO_Init+0x48>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d007      	beq.n	8003784 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003778:	2b11      	cmp	r3, #17
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b12      	cmp	r3, #18
 8003782:	d130      	bne.n	80037e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ba:	2201      	movs	r2, #1
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0201 	and.w	r2, r3, #1
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	2203      	movs	r2, #3
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0xea>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b12      	cmp	r3, #18
 8003824:	d123      	bne.n	800386e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	08da      	lsrs	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3208      	adds	r2, #8
 800382e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	08da      	lsrs	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3208      	adds	r2, #8
 8003868:	6939      	ldr	r1, [r7, #16]
 800386a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	2203      	movs	r2, #3
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0203 	and.w	r2, r3, #3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80a0 	beq.w	80039f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b0:	4b58      	ldr	r3, [pc, #352]	; (8003a14 <HAL_GPIO_Init+0x2d8>)
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	4a57      	ldr	r2, [pc, #348]	; (8003a14 <HAL_GPIO_Init+0x2d8>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6613      	str	r3, [r2, #96]	; 0x60
 80038bc:	4b55      	ldr	r3, [pc, #340]	; (8003a14 <HAL_GPIO_Init+0x2d8>)
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038c8:	4a53      	ldr	r2, [pc, #332]	; (8003a18 <HAL_GPIO_Init+0x2dc>)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	3302      	adds	r3, #2
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	220f      	movs	r2, #15
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038f2:	d019      	beq.n	8003928 <HAL_GPIO_Init+0x1ec>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a49      	ldr	r2, [pc, #292]	; (8003a1c <HAL_GPIO_Init+0x2e0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_GPIO_Init+0x1e8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a48      	ldr	r2, [pc, #288]	; (8003a20 <HAL_GPIO_Init+0x2e4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00d      	beq.n	8003920 <HAL_GPIO_Init+0x1e4>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a47      	ldr	r2, [pc, #284]	; (8003a24 <HAL_GPIO_Init+0x2e8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <HAL_GPIO_Init+0x1e0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a46      	ldr	r2, [pc, #280]	; (8003a28 <HAL_GPIO_Init+0x2ec>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_GPIO_Init+0x1dc>
 8003914:	2304      	movs	r3, #4
 8003916:	e008      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003918:	2307      	movs	r3, #7
 800391a:	e006      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 800391c:	2303      	movs	r3, #3
 800391e:	e004      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003920:	2302      	movs	r3, #2
 8003922:	e002      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_GPIO_Init+0x1ee>
 8003928:	2300      	movs	r3, #0
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	f002 0203 	and.w	r2, r2, #3
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4093      	lsls	r3, r2
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800393a:	4937      	ldr	r1, [pc, #220]	; (8003a18 <HAL_GPIO_Init+0x2dc>)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003948:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43db      	mvns	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800396c:	4a2f      	ldr	r2, [pc, #188]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003972:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003996:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800399c:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039c0:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ea:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <HAL_GPIO_Init+0x2f0>)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	3301      	adds	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f aea3 	bne.w	800374c <HAL_GPIO_Init+0x10>
  }
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	48000400 	.word	0x48000400
 8003a20:	48000800 	.word	0x48000800
 8003a24:	48000c00 	.word	0x48000c00
 8003a28:	48001000 	.word	0x48001000
 8003a2c:	40010400 	.word	0x40010400

08003a30 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0c3      	b.n	8003bce <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d101      	bne.n	8003a56 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0bb      	b.n	8003bce <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d101      	bne.n	8003a66 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0b3      	b.n	8003bce <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd fe22 	bl	80016cc <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a96:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003aaa:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6891      	ldr	r1, [r2, #8]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68d2      	ldr	r2, [r2, #12]
 8003ab6:	4311      	orrs	r1, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6992      	ldr	r2, [r2, #24]
 8003abc:	4311      	orrs	r1, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6912      	ldr	r2, [r2, #16]
 8003ac2:	4311      	orrs	r1, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6952      	ldr	r2, [r2, #20]
 8003ac8:	4311      	orrs	r1, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	69d2      	ldr	r2, [r2, #28]
 8003ace:	4311      	orrs	r1, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b0c      	cmp	r3, #12
 8003ade:	d115      	bne.n	8003b0c <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8003aea:	f023 030e 	bic.w	r3, r3, #14
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6891      	ldr	r1, [r2, #8]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68d2      	ldr	r2, [r2, #12]
 8003af6:	4311      	orrs	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6952      	ldr	r2, [r2, #20]
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	69d2      	ldr	r2, [r2, #28]
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d118      	bne.n	8003b46 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003b1e:	f023 030e 	bic.w	r3, r3, #14
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6891      	ldr	r1, [r2, #8]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68d2      	ldr	r2, [r2, #12]
 8003b2a:	4311      	orrs	r1, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6912      	ldr	r2, [r2, #16]
 8003b30:	4311      	orrs	r1, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6952      	ldr	r2, [r2, #20]
 8003b36:	4311      	orrs	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	69d2      	ldr	r2, [r2, #28]
 8003b3c:	4311      	orrs	r1, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	430b      	orrs	r3, r1
 8003b44:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4e:	d12a      	bne.n	8003ba6 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d013      	beq.n	8003b80 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003b70:	f023 031f 	bic.w	r3, r3, #31
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	6053      	str	r3, [r2, #4]
 8003b7e:	e012      	b.n	8003ba6 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003b98:	f023 031f 	bic.w	r3, r3, #31
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_OPAMP_Init+0x1a8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4909      	ldr	r1, [pc, #36]	; (8003bd8 <HAL_OPAMP_Init+0x1a8>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40007800 	.word	0x40007800

08003bdc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d102      	bne.n	8003bf4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
 8003bf2:	e01d      	b.n	8003c30 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d102      	bne.n	8003c06 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
 8003c04:	e014      	b.n	8003c30 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10c      	bne.n	8003c2c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2204      	movs	r2, #4
 8003c26:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003c2a:	e001      	b.n	8003c30 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40007000 	.word	0x40007000

08003c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6a:	d130      	bne.n	8003cce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c78:	d038      	beq.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2232      	movs	r2, #50	; 0x32
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0c9b      	lsrs	r3, r3, #18
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ca0:	e002      	b.n	8003ca8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb4:	d102      	bne.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f2      	bne.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc8:	d110      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e00f      	b.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cda:	d007      	beq.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cdc:	4b07      	ldr	r3, [pc, #28]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ce4:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	20000000 	.word	0x20000000
 8003d04:	431bde83 	.word	0x431bde83

08003d08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f000 bc11 	b.w	800453e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d1c:	4ba0      	ldr	r3, [pc, #640]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d26:	4b9e      	ldr	r3, [pc, #632]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80e4 	beq.w	8003f06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4c>
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	f040 808b 	bne.w	8003e62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	f040 8087 	bne.w	8003e62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d54:	4b92      	ldr	r3, [pc, #584]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_OscConfig+0x64>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e3e8      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	4b8b      	ldr	r3, [pc, #556]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_RCC_OscConfig+0x7e>
 8003d7c:	4b88      	ldr	r3, [pc, #544]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d84:	e005      	b.n	8003d92 <HAL_RCC_OscConfig+0x8a>
 8003d86:	4b86      	ldr	r3, [pc, #536]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d223      	bcs.n	8003dde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fd78 	bl	8004890 <RCC_SetFlashLatencyFromMSIRange>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e3c9      	b.n	800453e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003daa:	4b7d      	ldr	r3, [pc, #500]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7c      	ldr	r2, [pc, #496]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003db0:	f043 0308 	orr.w	r3, r3, #8
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b7a      	ldr	r3, [pc, #488]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4977      	ldr	r1, [pc, #476]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dc8:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	4972      	ldr	r1, [pc, #456]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
 8003ddc:	e025      	b.n	8003e2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dde:	4b70      	ldr	r3, [pc, #448]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a6f      	ldr	r2, [pc, #444]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003de4:	f043 0308 	orr.w	r3, r3, #8
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	496a      	ldr	r1, [pc, #424]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dfc:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	4965      	ldr	r1, [pc, #404]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fd38 	bl	8004890 <RCC_SetFlashLatencyFromMSIRange>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e389      	b.n	800453e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e2a:	f000 fc6f 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	4b5b      	ldr	r3, [pc, #364]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	4a5a      	ldr	r2, [pc, #360]	; (8003fa4 <HAL_RCC_OscConfig+0x29c>)
 8003e3c:	5cd3      	ldrb	r3, [r2, r3]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	fa21 f303 	lsr.w	r3, r1, r3
 8003e46:	4a58      	ldr	r2, [pc, #352]	; (8003fa8 <HAL_RCC_OscConfig+0x2a0>)
 8003e48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e4a:	4b58      	ldr	r3, [pc, #352]	; (8003fac <HAL_RCC_OscConfig+0x2a4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd fdc0 	bl	80019d4 <HAL_InitTick>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d052      	beq.n	8003f04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	e36d      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d032      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e6a:	4b4d      	ldr	r3, [pc, #308]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a4c      	ldr	r2, [pc, #304]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e76:	f7fd fdfd 	bl	8001a74 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e7e:	f7fd fdf9 	bl	8001a74 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e356      	b.n	800453e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e90:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e9c:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a3f      	ldr	r2, [pc, #252]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003ea2:	f043 0308 	orr.w	r3, r3, #8
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	493a      	ldr	r1, [pc, #232]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	4935      	ldr	r1, [pc, #212]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
 8003ece:	e01a      	b.n	8003f06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ed0:	4b33      	ldr	r3, [pc, #204]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a32      	ldr	r2, [pc, #200]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003edc:	f7fd fdca 	bl	8001a74 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ee4:	f7fd fdc6 	bl	8001a74 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e323      	b.n	800453e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x1dc>
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d073      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_OscConfig+0x21c>
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d10e      	bne.n	8003f3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d10b      	bne.n	8003f3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d063      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x2f0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d15f      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e300      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_OscConfig+0x24c>
 8003f46:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e01d      	b.n	8003f90 <HAL_RCC_OscConfig+0x288>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x270>
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_OscConfig+0x288>
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a08      	ldr	r2, [pc, #32]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a05      	ldr	r2, [pc, #20]	; (8003fa0 <HAL_RCC_OscConfig+0x298>)
 8003f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01b      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd fd6c 	bl	8001a74 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9e:	e010      	b.n	8003fc2 <HAL_RCC_OscConfig+0x2ba>
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	08007ab0 	.word	0x08007ab0
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7fd fd60 	bl	8001a74 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e2bd      	b.n	800453e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc2:	4baf      	ldr	r3, [pc, #700]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x2a8>
 8003fce:	e014      	b.n	8003ffa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fd50 	bl	8001a74 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7fd fd4c 	bl	8001a74 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e2a9      	b.n	800453e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fea:	4ba5      	ldr	r3, [pc, #660]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x2d0>
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d060      	beq.n	80040c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d005      	beq.n	8004018 <HAL_RCC_OscConfig+0x310>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d119      	bne.n	8004046 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d116      	bne.n	8004046 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004018:	4b99      	ldr	r3, [pc, #612]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_OscConfig+0x328>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e286      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004030:	4b93      	ldr	r3, [pc, #588]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	061b      	lsls	r3, r3, #24
 800403e:	4990      	ldr	r1, [pc, #576]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004044:	e040      	b.n	80040c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d023      	beq.n	8004096 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800404e:	4b8c      	ldr	r3, [pc, #560]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a8b      	ldr	r2, [pc, #556]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd fd0b 	bl	8001a74 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004062:	f7fd fd07 	bl	8001a74 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e264      	b.n	800453e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004074:	4b82      	ldr	r3, [pc, #520]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004080:	4b7f      	ldr	r3, [pc, #508]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	497c      	ldr	r1, [pc, #496]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
 8004094:	e018      	b.n	80040c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004096:	4b7a      	ldr	r3, [pc, #488]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a79      	ldr	r2, [pc, #484]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 800409c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fd fce7 	bl	8001a74 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040aa:	f7fd fce3 	bl	8001a74 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e240      	b.n	800453e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040bc:	4b70      	ldr	r3, [pc, #448]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d03c      	beq.n	800414e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01c      	beq.n	8004116 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040dc:	4b68      	ldr	r3, [pc, #416]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e2:	4a67      	ldr	r2, [pc, #412]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd fcc2 	bl	8001a74 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f4:	f7fd fcbe 	bl	8001a74 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e21b      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004106:	4b5e      	ldr	r3, [pc, #376]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ef      	beq.n	80040f4 <HAL_RCC_OscConfig+0x3ec>
 8004114:	e01b      	b.n	800414e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004116:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411c:	4a58      	ldr	r2, [pc, #352]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fd fca5 	bl	8001a74 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412e:	f7fd fca1 	bl	8001a74 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e1fe      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004140:	4b4f      	ldr	r3, [pc, #316]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1ef      	bne.n	800412e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80a6 	beq.w	80042a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415c:	2300      	movs	r3, #0
 800415e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004160:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10d      	bne.n	8004188 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416c:	4b44      	ldr	r3, [pc, #272]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	4a43      	ldr	r2, [pc, #268]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	6593      	str	r3, [r2, #88]	; 0x58
 8004178:	4b41      	ldr	r3, [pc, #260]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004184:	2301      	movs	r3, #1
 8004186:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004188:	4b3e      	ldr	r3, [pc, #248]	; (8004284 <HAL_RCC_OscConfig+0x57c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d118      	bne.n	80041c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004194:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCC_OscConfig+0x57c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3a      	ldr	r2, [pc, #232]	; (8004284 <HAL_RCC_OscConfig+0x57c>)
 800419a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a0:	f7fd fc68 	bl	8001a74 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a8:	f7fd fc64 	bl	8001a74 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e1c1      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ba:	4b32      	ldr	r3, [pc, #200]	; (8004284 <HAL_RCC_OscConfig+0x57c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d108      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4d8>
 80041ce:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041de:	e024      	b.n	800422a <HAL_RCC_OscConfig+0x522>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b05      	cmp	r3, #5
 80041e6:	d110      	bne.n	800420a <HAL_RCC_OscConfig+0x502>
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	4a24      	ldr	r2, [pc, #144]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 80041f0:	f043 0304 	orr.w	r3, r3, #4
 80041f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041f8:	4b21      	ldr	r3, [pc, #132]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	4a20      	ldr	r2, [pc, #128]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004208:	e00f      	b.n	800422a <HAL_RCC_OscConfig+0x522>
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 800420c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800421a:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	4a17      	ldr	r2, [pc, #92]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004232:	f7fd fc1f 	bl	8001a74 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004238:	e00a      	b.n	8004250 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423a:	f7fd fc1b 	bl	8001a74 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f241 3288 	movw	r2, #5000	; 0x1388
 8004248:	4293      	cmp	r3, r2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e176      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_OscConfig+0x578>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0ed      	beq.n	800423a <HAL_RCC_OscConfig+0x532>
 800425e:	e01a      	b.n	8004296 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fd fc08 	bl	8001a74 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004266:	e00f      	b.n	8004288 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fd fc04 	bl	8001a74 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d906      	bls.n	8004288 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e15f      	b.n	800453e <HAL_RCC_OscConfig+0x836>
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004288:	4baa      	ldr	r3, [pc, #680]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e8      	bne.n	8004268 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004296:	7ffb      	ldrb	r3, [r7, #31]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429c:	4ba5      	ldr	r3, [pc, #660]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	4aa4      	ldr	r2, [pc, #656]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80042a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d03c      	beq.n	800432e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01c      	beq.n	80042f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042bc:	4b9d      	ldr	r3, [pc, #628]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80042be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c2:	4a9c      	ldr	r2, [pc, #624]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd fbd2 	bl	8001a74 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042d4:	f7fd fbce 	bl	8001a74 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e12b      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042e6:	4b93      	ldr	r3, [pc, #588]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80042e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ef      	beq.n	80042d4 <HAL_RCC_OscConfig+0x5cc>
 80042f4:	e01b      	b.n	800432e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042f6:	4b8f      	ldr	r3, [pc, #572]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80042f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042fc:	4a8d      	ldr	r2, [pc, #564]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fd fbb5 	bl	8001a74 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800430e:	f7fd fbb1 	bl	8001a74 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e10e      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004320:	4b84      	ldr	r3, [pc, #528]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 8004322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ef      	bne.n	800430e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8102 	beq.w	800453c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	2b02      	cmp	r3, #2
 800433e:	f040 80c5 	bne.w	80044cc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004342:	4b7c      	ldr	r3, [pc, #496]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f003 0203 	and.w	r2, r3, #3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	429a      	cmp	r2, r3
 8004354:	d12c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	3b01      	subs	r3, #1
 8004362:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d123      	bne.n	80043b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d11b      	bne.n	80043b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d113      	bne.n	80043b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d109      	bne.n	80043b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	3b01      	subs	r3, #1
 80043aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d067      	beq.n	8004480 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d062      	beq.n	800447c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e0bb      	b.n	800453e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043c6:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a5a      	ldr	r2, [pc, #360]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80043cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043d2:	f7fd fb4f 	bl	8001a74 <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043da:	f7fd fb4b 	bl	8001a74 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0a8      	b.n	800453e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ec:	4b51      	ldr	r3, [pc, #324]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f0      	bne.n	80043da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f8:	4b4e      	ldr	r3, [pc, #312]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	4b4e      	ldr	r3, [pc, #312]	; (8004538 <HAL_RCC_OscConfig+0x830>)
 80043fe:	4013      	ands	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004408:	3a01      	subs	r2, #1
 800440a:	0112      	lsls	r2, r2, #4
 800440c:	4311      	orrs	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004412:	0212      	lsls	r2, r2, #8
 8004414:	4311      	orrs	r1, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800441a:	0852      	lsrs	r2, r2, #1
 800441c:	3a01      	subs	r2, #1
 800441e:	0552      	lsls	r2, r2, #21
 8004420:	4311      	orrs	r1, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004426:	0852      	lsrs	r2, r2, #1
 8004428:	3a01      	subs	r2, #1
 800442a:	0652      	lsls	r2, r2, #25
 800442c:	4311      	orrs	r1, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004432:	06d2      	lsls	r2, r2, #27
 8004434:	430a      	orrs	r2, r1
 8004436:	493f      	ldr	r1, [pc, #252]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 8004438:	4313      	orrs	r3, r2
 800443a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800443c:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a3c      	ldr	r2, [pc, #240]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 8004442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004446:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004448:	4b3a      	ldr	r3, [pc, #232]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4a39      	ldr	r2, [pc, #228]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 800444e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004452:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004454:	f7fd fb0e 	bl	8001a74 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fd fb0a 	bl	8001a74 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e067      	b.n	800453e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446e:	4b31      	ldr	r3, [pc, #196]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800447a:	e05f      	b.n	800453c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e05e      	b.n	800453e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004480:	4b2c      	ldr	r3, [pc, #176]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d157      	bne.n	800453c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800448c:	4b29      	ldr	r3, [pc, #164]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a28      	ldr	r2, [pc, #160]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 8004492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004496:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004498:	4b26      	ldr	r3, [pc, #152]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a25      	ldr	r2, [pc, #148]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 800449e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044a4:	f7fd fae6 	bl	8001a74 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fd fae2 	bl	8001a74 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e03f      	b.n	800453e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x7a4>
 80044ca:	e037      	b.n	800453c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b0c      	cmp	r3, #12
 80044d0:	d02d      	beq.n	800452e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b18      	ldr	r3, [pc, #96]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a17      	ldr	r2, [pc, #92]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80044d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044dc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044de:	4b15      	ldr	r3, [pc, #84]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	4a11      	ldr	r2, [pc, #68]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80044f0:	f023 0303 	bic.w	r3, r3, #3
 80044f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 80044fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004504:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fd fab5 	bl	8001a74 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fd fab1 	bl	8001a74 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e00e      	b.n	800453e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <HAL_RCC_OscConfig+0x82c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x806>
 800452c:	e006      	b.n	800453c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e005      	b.n	800453e <HAL_RCC_OscConfig+0x836>
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000
 8004538:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop

08004548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0c8      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800455c:	4b66      	ldr	r3, [pc, #408]	; (80046f8 <HAL_RCC_ClockConfig+0x1b0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d910      	bls.n	800458c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b63      	ldr	r3, [pc, #396]	; (80046f8 <HAL_RCC_ClockConfig+0x1b0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 0207 	bic.w	r2, r3, #7
 8004572:	4961      	ldr	r1, [pc, #388]	; (80046f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b5f      	ldr	r3, [pc, #380]	; (80046f8 <HAL_RCC_ClockConfig+0x1b0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0b0      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d04c      	beq.n	8004632 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a0:	4b56      	ldr	r3, [pc, #344]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d121      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e09e      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d107      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b8:	4b50      	ldr	r3, [pc, #320]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d115      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e092      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d0:	4b4a      	ldr	r3, [pc, #296]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d109      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e086      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e0:	4b46      	ldr	r3, [pc, #280]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e07e      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045f0:	4b42      	ldr	r3, [pc, #264]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f023 0203 	bic.w	r2, r3, #3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	493f      	ldr	r1, [pc, #252]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004602:	f7fd fa37 	bl	8001a74 <HAL_GetTick>
 8004606:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004608:	e00a      	b.n	8004620 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460a:	f7fd fa33 	bl	8001a74 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f241 3288 	movw	r2, #5000	; 0x1388
 8004618:	4293      	cmp	r3, r2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e066      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004620:	4b36      	ldr	r3, [pc, #216]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 020c 	and.w	r2, r3, #12
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	429a      	cmp	r2, r3
 8004630:	d1eb      	bne.n	800460a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463e:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	492c      	ldr	r1, [pc, #176]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d210      	bcs.n	8004680 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 0207 	bic.w	r2, r3, #7
 8004666:	4924      	ldr	r1, [pc, #144]	; (80046f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b22      	ldr	r3, [pc, #136]	; (80046f8 <HAL_RCC_ClockConfig+0x1b0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e036      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4918      	ldr	r1, [pc, #96]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4910      	ldr	r1, [pc, #64]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046be:	f000 f825 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046c2:	4601      	mov	r1, r0
 80046c4:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_RCC_ClockConfig+0x1b4>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	4a0c      	ldr	r2, [pc, #48]	; (8004700 <HAL_RCC_ClockConfig+0x1b8>)
 80046d0:	5cd3      	ldrb	r3, [r2, r3]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	fa21 f303 	lsr.w	r3, r1, r3
 80046da:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fd f976 	bl	80019d4 <HAL_InitTick>
 80046e8:	4603      	mov	r3, r0
 80046ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80046ec:	7afb      	ldrb	r3, [r7, #11]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40022000 	.word	0x40022000
 80046fc:	40021000 	.word	0x40021000
 8004700:	08007ab0 	.word	0x08007ab0
 8004704:	20000000 	.word	0x20000000
 8004708:	20000004 	.word	0x20000004

0800470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471a:	4b3d      	ldr	r3, [pc, #244]	; (8004810 <HAL_RCC_GetSysClockFreq+0x104>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004724:	4b3a      	ldr	r3, [pc, #232]	; (8004810 <HAL_RCC_GetSysClockFreq+0x104>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x34>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d121      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d11e      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004740:	4b33      	ldr	r3, [pc, #204]	; (8004810 <HAL_RCC_GetSysClockFreq+0x104>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800474c:	4b30      	ldr	r3, [pc, #192]	; (8004810 <HAL_RCC_GetSysClockFreq+0x104>)
 800474e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e005      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800475c:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <HAL_RCC_GetSysClockFreq+0x104>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004768:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004770:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10d      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800477c:	e00a      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b04      	cmp	r3, #4
 8004782:	d102      	bne.n	800478a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e004      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d101      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004790:	4b22      	ldr	r3, [pc, #136]	; (800481c <HAL_RCC_GetSysClockFreq+0x110>)
 8004792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d133      	bne.n	8004802 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <HAL_RCC_GetSysClockFreq+0x104>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d002      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80047ae:	e005      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047b2:	617b      	str	r3, [r7, #20]
      break;
 80047b4:	e005      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047b6:	4b19      	ldr	r3, [pc, #100]	; (800481c <HAL_RCC_GetSysClockFreq+0x110>)
 80047b8:	617b      	str	r3, [r7, #20]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	617b      	str	r3, [r7, #20]
      break;
 80047c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_RCC_GetSysClockFreq+0x104>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	3301      	adds	r3, #1
 80047ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <HAL_RCC_GetSysClockFreq+0x104>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	fb02 f203 	mul.w	r2, r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_GetSysClockFreq+0x104>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	0e5b      	lsrs	r3, r3, #25
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	3301      	adds	r3, #1
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004802:	69bb      	ldr	r3, [r7, #24]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3724      	adds	r7, #36	; 0x24
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	40021000 	.word	0x40021000
 8004814:	08007ac8 	.word	0x08007ac8
 8004818:	00f42400 	.word	0x00f42400
 800481c:	007a1200 	.word	0x007a1200

08004820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004824:	4b03      	ldr	r3, [pc, #12]	; (8004834 <HAL_RCC_GetHCLKFreq+0x14>)
 8004826:	681b      	ldr	r3, [r3, #0]
}
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000000 	.word	0x20000000

08004838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800483c:	f7ff fff0 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 8004840:	4601      	mov	r1, r0
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4a04      	ldr	r2, [pc, #16]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800484e:	5cd3      	ldrb	r3, [r2, r3]
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	08007ac0 	.word	0x08007ac0

08004864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004868:	f7ff ffda 	bl	8004820 <HAL_RCC_GetHCLKFreq>
 800486c:	4601      	mov	r1, r0
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	0adb      	lsrs	r3, r3, #11
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4a04      	ldr	r2, [pc, #16]	; (800488c <HAL_RCC_GetPCLK2Freq+0x28>)
 800487a:	5cd3      	ldrb	r3, [r2, r3]
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000
 800488c:	08007ac0 	.word	0x08007ac0

08004890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800489c:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048a8:	f7ff f9ca 	bl	8003c40 <HAL_PWREx_GetVoltageRange>
 80048ac:	6178      	str	r0, [r7, #20]
 80048ae:	e014      	b.n	80048da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b0:	4b25      	ldr	r3, [pc, #148]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	4a24      	ldr	r2, [pc, #144]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6593      	str	r3, [r2, #88]	; 0x58
 80048bc:	4b22      	ldr	r3, [pc, #136]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048c8:	f7ff f9ba 	bl	8003c40 <HAL_PWREx_GetVoltageRange>
 80048cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048ce:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e0:	d10b      	bne.n	80048fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d919      	bls.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2ba0      	cmp	r3, #160	; 0xa0
 80048ec:	d902      	bls.n	80048f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048ee:	2302      	movs	r3, #2
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	e013      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048f4:	2301      	movs	r3, #1
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	e010      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b80      	cmp	r3, #128	; 0x80
 80048fe:	d902      	bls.n	8004906 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004900:	2303      	movs	r3, #3
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e00a      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d102      	bne.n	8004912 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800490c:	2302      	movs	r3, #2
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e004      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b70      	cmp	r3, #112	; 0x70
 8004916:	d101      	bne.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004918:	2301      	movs	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 0207 	bic.w	r2, r3, #7
 8004924:	4909      	ldr	r1, [pc, #36]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	40022000 	.word	0x40022000

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004958:	2300      	movs	r3, #0
 800495a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800495c:	2300      	movs	r3, #0
 800495e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02f      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004974:	d005      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004976:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800497a:	d015      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d007      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004980:	e00f      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004982:	4b5d      	ldr	r3, [pc, #372]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	4a5c      	ldr	r2, [pc, #368]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800498e:	e00c      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	2100      	movs	r1, #0
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fa1e 	bl	8004dd8 <RCCEx_PLLSAI1_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049a0:	e003      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	74fb      	strb	r3, [r7, #19]
      break;
 80049a6:	e000      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80049a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049aa:	7cfb      	ldrb	r3, [r7, #19]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049b0:	4b51      	ldr	r3, [pc, #324]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	494e      	ldr	r1, [pc, #312]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049c6:	e001      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	7cfb      	ldrb	r3, [r7, #19]
 80049ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 809e 	beq.w	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049da:	2300      	movs	r3, #0
 80049dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049de:	4b46      	ldr	r3, [pc, #280]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00d      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f4:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	4a3f      	ldr	r2, [pc, #252]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80049fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004a00:	4b3d      	ldr	r3, [pc, #244]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a10:	4b3a      	ldr	r3, [pc, #232]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a39      	ldr	r2, [pc, #228]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a1c:	f7fd f82a 	bl	8001a74 <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a22:	e009      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a24:	f7fd f826 	bl	8001a74 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d902      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	74fb      	strb	r3, [r7, #19]
        break;
 8004a36:	e005      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a38:	4b30      	ldr	r3, [pc, #192]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ef      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d15a      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01e      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d019      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a70:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a72:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a78:	4a1f      	ldr	r2, [pc, #124]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a82:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a92:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d016      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fc ffe6 	bl	8001a74 <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aac:	f7fc ffe2 	bl	8001a74 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d902      	bls.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	74fb      	strb	r3, [r7, #19]
            break;
 8004ac2:	e006      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0ec      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ad2:	7cfb      	ldrb	r3, [r7, #19]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad8:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	4904      	ldr	r1, [pc, #16]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004aee:	e009      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	74bb      	strb	r3, [r7, #18]
 8004af4:	e006      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004af6:	bf00      	nop
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b04:	7c7b      	ldrb	r3, [r7, #17]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d105      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b0a:	4bb2      	ldr	r3, [pc, #712]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	4ab1      	ldr	r2, [pc, #708]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b22:	4bac      	ldr	r3, [pc, #688]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f023 0203 	bic.w	r2, r3, #3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	49a8      	ldr	r1, [pc, #672]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b44:	4ba3      	ldr	r3, [pc, #652]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 020c 	bic.w	r2, r3, #12
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	49a0      	ldr	r1, [pc, #640]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b66:	4b9b      	ldr	r3, [pc, #620]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	4997      	ldr	r1, [pc, #604]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b88:	4b92      	ldr	r3, [pc, #584]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	498f      	ldr	r1, [pc, #572]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004baa:	4b8a      	ldr	r3, [pc, #552]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	4986      	ldr	r1, [pc, #536]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bcc:	4b81      	ldr	r3, [pc, #516]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	497e      	ldr	r1, [pc, #504]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bee:	4b79      	ldr	r3, [pc, #484]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4975      	ldr	r1, [pc, #468]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c10:	4b70      	ldr	r3, [pc, #448]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	496d      	ldr	r1, [pc, #436]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c32:	4b68      	ldr	r3, [pc, #416]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	4964      	ldr	r1, [pc, #400]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d028      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c54:	4b5f      	ldr	r3, [pc, #380]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	495c      	ldr	r1, [pc, #368]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c72:	d106      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c74:	4b57      	ldr	r3, [pc, #348]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4a56      	ldr	r2, [pc, #344]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c7e:	60d3      	str	r3, [r2, #12]
 8004c80:	e011      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c8a:	d10c      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	2101      	movs	r1, #1
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 f8a0 	bl	8004dd8 <RCCEx_PLLSAI1_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
 8004ca4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d028      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cb2:	4b48      	ldr	r3, [pc, #288]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc0:	4944      	ldr	r1, [pc, #272]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd0:	d106      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd2:	4b40      	ldr	r3, [pc, #256]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4a3f      	ldr	r2, [pc, #252]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cdc:	60d3      	str	r3, [r2, #12]
 8004cde:	e011      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ce8:	d10c      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3304      	adds	r3, #4
 8004cee:	2101      	movs	r1, #1
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 f871 	bl	8004dd8 <RCCEx_PLLSAI1_Config>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004d00:	7cfb      	ldrb	r3, [r7, #19]
 8004d02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d028      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d10:	4b30      	ldr	r3, [pc, #192]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1e:	492d      	ldr	r1, [pc, #180]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d30:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a27      	ldr	r2, [pc, #156]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d3a:	60d3      	str	r3, [r2, #12]
 8004d3c:	e011      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d46:	d10c      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f842 	bl	8004dd8 <RCCEx_PLLSAI1_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8004d5e:	7cfb      	ldrb	r3, [r7, #19]
 8004d60:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01c      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d6e:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	4915      	ldr	r1, [pc, #84]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f81f 	bl	8004dd8 <RCCEx_PLLSAI1_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	4904      	ldr	r1, [pc, #16]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dca:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004de6:	4b73      	ldr	r3, [pc, #460]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004df2:	4b70      	ldr	r3, [pc, #448]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0203 	and.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d10d      	bne.n	8004e1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
       ||
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e0a:	4b6a      	ldr	r3, [pc, #424]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
       ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d044      	beq.n	8004ea8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	e041      	b.n	8004ea8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d00c      	beq.n	8004e46 <RCCEx_PLLSAI1_Config+0x6e>
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d013      	beq.n	8004e58 <RCCEx_PLLSAI1_Config+0x80>
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d120      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e34:	4b5f      	ldr	r3, [pc, #380]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11d      	bne.n	8004e7c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e44:	e01a      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e46:	4b5b      	ldr	r3, [pc, #364]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d116      	bne.n	8004e80 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e56:	e013      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e58:	4b56      	ldr	r3, [pc, #344]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10f      	bne.n	8004e84 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e64:	4b53      	ldr	r3, [pc, #332]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d109      	bne.n	8004e84 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e74:	e006      	b.n	8004e84 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
      break;
 8004e7a:	e004      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e7c:	bf00      	nop
 8004e7e:	e002      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004e84:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10d      	bne.n	8004ea8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e8c:	4b49      	ldr	r3, [pc, #292]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6819      	ldr	r1, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	4944      	ldr	r1, [pc, #272]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d17c      	bne.n	8004fa8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004eae:	4b41      	ldr	r3, [pc, #260]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a40      	ldr	r2, [pc, #256]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004eb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eba:	f7fc fddb 	bl	8001a74 <HAL_GetTick>
 8004ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ec0:	e009      	b.n	8004ed6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ec2:	f7fc fdd7 	bl	8001a74 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d902      	bls.n	8004ed6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ed4:	e005      	b.n	8004ee2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ef      	bne.n	8004ec2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d15f      	bne.n	8004fa8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d110      	bne.n	8004f10 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eee:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ef6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6892      	ldr	r2, [r2, #8]
 8004efe:	0211      	lsls	r1, r2, #8
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	68d2      	ldr	r2, [r2, #12]
 8004f04:	06d2      	lsls	r2, r2, #27
 8004f06:	430a      	orrs	r2, r1
 8004f08:	492a      	ldr	r1, [pc, #168]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	610b      	str	r3, [r1, #16]
 8004f0e:	e027      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d112      	bne.n	8004f3c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f16:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6892      	ldr	r2, [r2, #8]
 8004f26:	0211      	lsls	r1, r2, #8
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6912      	ldr	r2, [r2, #16]
 8004f2c:	0852      	lsrs	r2, r2, #1
 8004f2e:	3a01      	subs	r2, #1
 8004f30:	0552      	lsls	r2, r2, #21
 8004f32:	430a      	orrs	r2, r1
 8004f34:	491f      	ldr	r1, [pc, #124]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]
 8004f3a:	e011      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6892      	ldr	r2, [r2, #8]
 8004f4c:	0211      	lsls	r1, r2, #8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6952      	ldr	r2, [r2, #20]
 8004f52:	0852      	lsrs	r2, r2, #1
 8004f54:	3a01      	subs	r2, #1
 8004f56:	0652      	lsls	r2, r2, #25
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	4916      	ldr	r1, [pc, #88]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6c:	f7fc fd82 	bl	8001a74 <HAL_GetTick>
 8004f70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f72:	e009      	b.n	8004f88 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f74:	f7fc fd7e 	bl	8001a74 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d902      	bls.n	8004f88 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
          break;
 8004f86:	e005      	b.n	8004f94 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ef      	beq.n	8004f74 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	4904      	ldr	r1, [pc, #16]	; (8004fb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000

08004fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e049      	b.n	800505e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc fbb2 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 f93c 	bl	8005274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	d001      	beq.n	8005080 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e033      	b.n	80050e8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_TIM_Base_Start+0x8c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_TIM_Base_Start+0x3e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d004      	beq.n	80050a6 <HAL_TIM_Base_Start+0x3e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <HAL_TIM_Base_Start+0x90>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d115      	bne.n	80050d2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HAL_TIM_Base_Start+0x94>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d015      	beq.n	80050e4 <HAL_TIM_Base_Start+0x7c>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050be:	d011      	beq.n	80050e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	e008      	b.n	80050e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	e000      	b.n	80050e6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40014000 	.word	0x40014000
 80050fc:	00010007 	.word	0x00010007

08005100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_TIM_ConfigClockSource+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e0a8      	b.n	800526a <HAL_TIM_ConfigClockSource+0x16a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800513a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005142:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b40      	cmp	r3, #64	; 0x40
 8005152:	d067      	beq.n	8005224 <HAL_TIM_ConfigClockSource+0x124>
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d80b      	bhi.n	8005170 <HAL_TIM_ConfigClockSource+0x70>
 8005158:	2b10      	cmp	r3, #16
 800515a:	d073      	beq.n	8005244 <HAL_TIM_ConfigClockSource+0x144>
 800515c:	2b10      	cmp	r3, #16
 800515e:	d802      	bhi.n	8005166 <HAL_TIM_ConfigClockSource+0x66>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d06f      	beq.n	8005244 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005164:	e078      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005166:	2b20      	cmp	r3, #32
 8005168:	d06c      	beq.n	8005244 <HAL_TIM_ConfigClockSource+0x144>
 800516a:	2b30      	cmp	r3, #48	; 0x30
 800516c:	d06a      	beq.n	8005244 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800516e:	e073      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005170:	2b70      	cmp	r3, #112	; 0x70
 8005172:	d00d      	beq.n	8005190 <HAL_TIM_ConfigClockSource+0x90>
 8005174:	2b70      	cmp	r3, #112	; 0x70
 8005176:	d804      	bhi.n	8005182 <HAL_TIM_ConfigClockSource+0x82>
 8005178:	2b50      	cmp	r3, #80	; 0x50
 800517a:	d033      	beq.n	80051e4 <HAL_TIM_ConfigClockSource+0xe4>
 800517c:	2b60      	cmp	r3, #96	; 0x60
 800517e:	d041      	beq.n	8005204 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005180:	e06a      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005186:	d066      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0x156>
 8005188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518c:	d017      	beq.n	80051be <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800518e:	e063      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6899      	ldr	r1, [r3, #8]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f000 f946 	bl	8005430 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	609a      	str	r2, [r3, #8]
      break;
 80051bc:	e04c      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6899      	ldr	r1, [r3, #8]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f000 f92f 	bl	8005430 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051e0:	609a      	str	r2, [r3, #8]
      break;
 80051e2:	e039      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	461a      	mov	r2, r3
 80051f2:	f000 f8a3 	bl	800533c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2150      	movs	r1, #80	; 0x50
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 f8fc 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005202:	e029      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6859      	ldr	r1, [r3, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	461a      	mov	r2, r3
 8005212:	f000 f8c2 	bl	800539a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2160      	movs	r1, #96	; 0x60
 800521c:	4618      	mov	r0, r3
 800521e:	f000 f8ec 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005222:	e019      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	461a      	mov	r2, r3
 8005232:	f000 f883 	bl	800533c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2140      	movs	r1, #64	; 0x40
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f8dc 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005242:	e009      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 f8d3 	bl	80053fa <TIM_ITRx_SetConfig>
        break;
 8005254:	e000      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a2a      	ldr	r2, [pc, #168]	; (8005330 <TIM_Base_SetConfig+0xbc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_Base_SetConfig+0x20>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d108      	bne.n	80052a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a21      	ldr	r2, [pc, #132]	; (8005330 <TIM_Base_SetConfig+0xbc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00b      	beq.n	80052c6 <TIM_Base_SetConfig+0x52>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b4:	d007      	beq.n	80052c6 <TIM_Base_SetConfig+0x52>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1e      	ldr	r2, [pc, #120]	; (8005334 <TIM_Base_SetConfig+0xc0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_Base_SetConfig+0x52>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1d      	ldr	r2, [pc, #116]	; (8005338 <TIM_Base_SetConfig+0xc4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d108      	bne.n	80052d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a0c      	ldr	r2, [pc, #48]	; (8005330 <TIM_Base_SetConfig+0xbc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d007      	beq.n	8005314 <TIM_Base_SetConfig+0xa0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a0b      	ldr	r2, [pc, #44]	; (8005334 <TIM_Base_SetConfig+0xc0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_Base_SetConfig+0xa0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a0a      	ldr	r2, [pc, #40]	; (8005338 <TIM_Base_SetConfig+0xc4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d103      	bne.n	800531c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	615a      	str	r2, [r3, #20]
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40012c00 	.word	0x40012c00
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400

0800533c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0201 	bic.w	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f023 030a 	bic.w	r3, r3, #10
 8005378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 0210 	bic.w	r2, r3, #16
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	031b      	lsls	r3, r3, #12
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	f043 0307 	orr.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800544a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	021a      	lsls	r2, r3, #8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	431a      	orrs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e04f      	b.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a21      	ldr	r2, [pc, #132]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d108      	bne.n	80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a14      	ldr	r2, [pc, #80]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f0:	d004      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a10      	ldr	r2, [pc, #64]	; (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d10c      	bne.n	8005516 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	4313      	orrs	r3, r2
 800550c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40014000 	.word	0x40014000

0800553c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e040      	b.n	80055d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fc f912 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	; 0x24
 8005568:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0201 	bic.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f8c0 	bl	8005700 <UART_SetConfig>
 8005580:	4603      	mov	r3, r0
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e022      	b.n	80055d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 faea 	bl	8005b6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fb71 	bl	8005cb0 <UART_CheckIdleState>
 80055ce:	4603      	mov	r3, r0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	; 0x28
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	f040 8081 	bne.w	80056f4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <HAL_UART_Transmit+0x26>
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e079      	b.n	80056f6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_UART_Transmit+0x38>
 800560c:	2302      	movs	r3, #2
 800560e:	e072      	b.n	80056f6 <HAL_UART_Transmit+0x11e>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2221      	movs	r2, #33	; 0x21
 8005622:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005624:	f7fc fa26 	bl	8001a74 <HAL_GetTick>
 8005628:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	88fa      	ldrh	r2, [r7, #6]
 800562e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005642:	d108      	bne.n	8005656 <HAL_UART_Transmit+0x7e>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e003      	b.n	800565e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005666:	e02d      	b.n	80056c4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2200      	movs	r2, #0
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 fb61 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e039      	b.n	80056f6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	881a      	ldrh	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005694:	b292      	uxth	r2, r2
 8005696:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	3302      	adds	r3, #2
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e008      	b.n	80056b2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	b292      	uxth	r2, r2
 80056aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1cb      	bne.n	8005668 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2200      	movs	r2, #0
 80056d8:	2140      	movs	r1, #64	; 0x40
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fb2d 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e005      	b.n	80056f6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	e000      	b.n	80056f6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80056f4:	2302      	movs	r3, #2
  }
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005704:	b088      	sub	sp, #32
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	4313      	orrs	r3, r2
 8005724:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4baa      	ldr	r3, [pc, #680]	; (80059d8 <UART_SetConfig+0x2d8>)
 800572e:	4013      	ands	r3, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	430b      	orrs	r3, r1
 8005738:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4aa0      	ldr	r2, [pc, #640]	; (80059dc <UART_SetConfig+0x2dc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	4313      	orrs	r3, r2
 8005768:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	430a      	orrs	r2, r1
 800577c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a97      	ldr	r2, [pc, #604]	; (80059e0 <UART_SetConfig+0x2e0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d121      	bne.n	80057cc <UART_SetConfig+0xcc>
 8005788:	4b96      	ldr	r3, [pc, #600]	; (80059e4 <UART_SetConfig+0x2e4>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	2b03      	cmp	r3, #3
 8005794:	d816      	bhi.n	80057c4 <UART_SetConfig+0xc4>
 8005796:	a201      	add	r2, pc, #4	; (adr r2, 800579c <UART_SetConfig+0x9c>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057ad 	.word	0x080057ad
 80057a0:	080057b9 	.word	0x080057b9
 80057a4:	080057b3 	.word	0x080057b3
 80057a8:	080057bf 	.word	0x080057bf
 80057ac:	2301      	movs	r3, #1
 80057ae:	76fb      	strb	r3, [r7, #27]
 80057b0:	e098      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80057b2:	2302      	movs	r3, #2
 80057b4:	76fb      	strb	r3, [r7, #27]
 80057b6:	e095      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80057b8:	2304      	movs	r3, #4
 80057ba:	76fb      	strb	r3, [r7, #27]
 80057bc:	e092      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80057be:	2308      	movs	r3, #8
 80057c0:	76fb      	strb	r3, [r7, #27]
 80057c2:	e08f      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80057c4:	2310      	movs	r3, #16
 80057c6:	76fb      	strb	r3, [r7, #27]
 80057c8:	bf00      	nop
 80057ca:	e08b      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a85      	ldr	r2, [pc, #532]	; (80059e8 <UART_SetConfig+0x2e8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d134      	bne.n	8005840 <UART_SetConfig+0x140>
 80057d6:	4b83      	ldr	r3, [pc, #524]	; (80059e4 <UART_SetConfig+0x2e4>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057dc:	f003 030c 	and.w	r3, r3, #12
 80057e0:	2b0c      	cmp	r3, #12
 80057e2:	d829      	bhi.n	8005838 <UART_SetConfig+0x138>
 80057e4:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0xec>)
 80057e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ea:	bf00      	nop
 80057ec:	08005821 	.word	0x08005821
 80057f0:	08005839 	.word	0x08005839
 80057f4:	08005839 	.word	0x08005839
 80057f8:	08005839 	.word	0x08005839
 80057fc:	0800582d 	.word	0x0800582d
 8005800:	08005839 	.word	0x08005839
 8005804:	08005839 	.word	0x08005839
 8005808:	08005839 	.word	0x08005839
 800580c:	08005827 	.word	0x08005827
 8005810:	08005839 	.word	0x08005839
 8005814:	08005839 	.word	0x08005839
 8005818:	08005839 	.word	0x08005839
 800581c:	08005833 	.word	0x08005833
 8005820:	2300      	movs	r3, #0
 8005822:	76fb      	strb	r3, [r7, #27]
 8005824:	e05e      	b.n	80058e4 <UART_SetConfig+0x1e4>
 8005826:	2302      	movs	r3, #2
 8005828:	76fb      	strb	r3, [r7, #27]
 800582a:	e05b      	b.n	80058e4 <UART_SetConfig+0x1e4>
 800582c:	2304      	movs	r3, #4
 800582e:	76fb      	strb	r3, [r7, #27]
 8005830:	e058      	b.n	80058e4 <UART_SetConfig+0x1e4>
 8005832:	2308      	movs	r3, #8
 8005834:	76fb      	strb	r3, [r7, #27]
 8005836:	e055      	b.n	80058e4 <UART_SetConfig+0x1e4>
 8005838:	2310      	movs	r3, #16
 800583a:	76fb      	strb	r3, [r7, #27]
 800583c:	bf00      	nop
 800583e:	e051      	b.n	80058e4 <UART_SetConfig+0x1e4>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a69      	ldr	r2, [pc, #420]	; (80059ec <UART_SetConfig+0x2ec>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d120      	bne.n	800588c <UART_SetConfig+0x18c>
 800584a:	4b66      	ldr	r3, [pc, #408]	; (80059e4 <UART_SetConfig+0x2e4>)
 800584c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005850:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005854:	2b10      	cmp	r3, #16
 8005856:	d00f      	beq.n	8005878 <UART_SetConfig+0x178>
 8005858:	2b10      	cmp	r3, #16
 800585a:	d802      	bhi.n	8005862 <UART_SetConfig+0x162>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <UART_SetConfig+0x16c>
 8005860:	e010      	b.n	8005884 <UART_SetConfig+0x184>
 8005862:	2b20      	cmp	r3, #32
 8005864:	d005      	beq.n	8005872 <UART_SetConfig+0x172>
 8005866:	2b30      	cmp	r3, #48	; 0x30
 8005868:	d009      	beq.n	800587e <UART_SetConfig+0x17e>
 800586a:	e00b      	b.n	8005884 <UART_SetConfig+0x184>
 800586c:	2300      	movs	r3, #0
 800586e:	76fb      	strb	r3, [r7, #27]
 8005870:	e038      	b.n	80058e4 <UART_SetConfig+0x1e4>
 8005872:	2302      	movs	r3, #2
 8005874:	76fb      	strb	r3, [r7, #27]
 8005876:	e035      	b.n	80058e4 <UART_SetConfig+0x1e4>
 8005878:	2304      	movs	r3, #4
 800587a:	76fb      	strb	r3, [r7, #27]
 800587c:	e032      	b.n	80058e4 <UART_SetConfig+0x1e4>
 800587e:	2308      	movs	r3, #8
 8005880:	76fb      	strb	r3, [r7, #27]
 8005882:	e02f      	b.n	80058e4 <UART_SetConfig+0x1e4>
 8005884:	2310      	movs	r3, #16
 8005886:	76fb      	strb	r3, [r7, #27]
 8005888:	bf00      	nop
 800588a:	e02b      	b.n	80058e4 <UART_SetConfig+0x1e4>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a52      	ldr	r2, [pc, #328]	; (80059dc <UART_SetConfig+0x2dc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d124      	bne.n	80058e0 <UART_SetConfig+0x1e0>
 8005896:	4b53      	ldr	r3, [pc, #332]	; (80059e4 <UART_SetConfig+0x2e4>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a4:	d012      	beq.n	80058cc <UART_SetConfig+0x1cc>
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	d802      	bhi.n	80058b2 <UART_SetConfig+0x1b2>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d007      	beq.n	80058c0 <UART_SetConfig+0x1c0>
 80058b0:	e012      	b.n	80058d8 <UART_SetConfig+0x1d8>
 80058b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b6:	d006      	beq.n	80058c6 <UART_SetConfig+0x1c6>
 80058b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058bc:	d009      	beq.n	80058d2 <UART_SetConfig+0x1d2>
 80058be:	e00b      	b.n	80058d8 <UART_SetConfig+0x1d8>
 80058c0:	2300      	movs	r3, #0
 80058c2:	76fb      	strb	r3, [r7, #27]
 80058c4:	e00e      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80058c6:	2302      	movs	r3, #2
 80058c8:	76fb      	strb	r3, [r7, #27]
 80058ca:	e00b      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80058cc:	2304      	movs	r3, #4
 80058ce:	76fb      	strb	r3, [r7, #27]
 80058d0:	e008      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80058d2:	2308      	movs	r3, #8
 80058d4:	76fb      	strb	r3, [r7, #27]
 80058d6:	e005      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80058d8:	2310      	movs	r3, #16
 80058da:	76fb      	strb	r3, [r7, #27]
 80058dc:	bf00      	nop
 80058de:	e001      	b.n	80058e4 <UART_SetConfig+0x1e4>
 80058e0:	2310      	movs	r3, #16
 80058e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a3c      	ldr	r2, [pc, #240]	; (80059dc <UART_SetConfig+0x2dc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	f040 8082 	bne.w	80059f4 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058f0:	7efb      	ldrb	r3, [r7, #27]
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d823      	bhi.n	800593e <UART_SetConfig+0x23e>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <UART_SetConfig+0x1fc>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005921 	.word	0x08005921
 8005900:	0800593f 	.word	0x0800593f
 8005904:	08005929 	.word	0x08005929
 8005908:	0800593f 	.word	0x0800593f
 800590c:	0800592f 	.word	0x0800592f
 8005910:	0800593f 	.word	0x0800593f
 8005914:	0800593f 	.word	0x0800593f
 8005918:	0800593f 	.word	0x0800593f
 800591c:	08005937 	.word	0x08005937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fe ff8a 	bl	8004838 <HAL_RCC_GetPCLK1Freq>
 8005924:	6178      	str	r0, [r7, #20]
        break;
 8005926:	e00f      	b.n	8005948 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005928:	4b31      	ldr	r3, [pc, #196]	; (80059f0 <UART_SetConfig+0x2f0>)
 800592a:	617b      	str	r3, [r7, #20]
        break;
 800592c:	e00c      	b.n	8005948 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592e:	f7fe feed 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8005932:	6178      	str	r0, [r7, #20]
        break;
 8005934:	e008      	b.n	8005948 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593a:	617b      	str	r3, [r7, #20]
        break;
 800593c:	e004      	b.n	8005948 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	76bb      	strb	r3, [r7, #26]
        break;
 8005946:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8100 	beq.w	8005b50 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	4413      	add	r3, r2
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	429a      	cmp	r2, r3
 800595e:	d305      	bcc.n	800596c <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	429a      	cmp	r2, r3
 800596a:	d902      	bls.n	8005972 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	76bb      	strb	r3, [r7, #26]
 8005970:	e0ee      	b.n	8005b50 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4619      	mov	r1, r3
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	0214      	lsls	r4, r2, #8
 8005984:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005988:	020b      	lsls	r3, r1, #8
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6852      	ldr	r2, [r2, #4]
 800598e:	0852      	lsrs	r2, r2, #1
 8005990:	4611      	mov	r1, r2
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	eb13 0b01 	adds.w	fp, r3, r1
 800599a:	eb44 0c02 	adc.w	ip, r4, r2
 800599e:	4658      	mov	r0, fp
 80059a0:	4661      	mov	r1, ip
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f04f 0400 	mov.w	r4, #0
 80059aa:	461a      	mov	r2, r3
 80059ac:	4623      	mov	r3, r4
 80059ae:	f7fb f8e5 	bl	8000b7c <__aeabi_uldivmod>
 80059b2:	4603      	mov	r3, r0
 80059b4:	460c      	mov	r4, r1
 80059b6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059be:	d308      	bcc.n	80059d2 <UART_SetConfig+0x2d2>
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c6:	d204      	bcs.n	80059d2 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	60da      	str	r2, [r3, #12]
 80059d0:	e0be      	b.n	8005b50 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	76bb      	strb	r3, [r7, #26]
 80059d6:	e0bb      	b.n	8005b50 <UART_SetConfig+0x450>
 80059d8:	efff69f3 	.word	0xefff69f3
 80059dc:	40008000 	.word	0x40008000
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40004400 	.word	0x40004400
 80059ec:	40004800 	.word	0x40004800
 80059f0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fc:	d15c      	bne.n	8005ab8 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80059fe:	7efb      	ldrb	r3, [r7, #27]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d828      	bhi.n	8005a56 <UART_SetConfig+0x356>
 8005a04:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <UART_SetConfig+0x30c>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a31 	.word	0x08005a31
 8005a10:	08005a39 	.word	0x08005a39
 8005a14:	08005a41 	.word	0x08005a41
 8005a18:	08005a57 	.word	0x08005a57
 8005a1c:	08005a47 	.word	0x08005a47
 8005a20:	08005a57 	.word	0x08005a57
 8005a24:	08005a57 	.word	0x08005a57
 8005a28:	08005a57 	.word	0x08005a57
 8005a2c:	08005a4f 	.word	0x08005a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a30:	f7fe ff02 	bl	8004838 <HAL_RCC_GetPCLK1Freq>
 8005a34:	6178      	str	r0, [r7, #20]
        break;
 8005a36:	e013      	b.n	8005a60 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a38:	f7fe ff14 	bl	8004864 <HAL_RCC_GetPCLK2Freq>
 8005a3c:	6178      	str	r0, [r7, #20]
        break;
 8005a3e:	e00f      	b.n	8005a60 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a40:	4b49      	ldr	r3, [pc, #292]	; (8005b68 <UART_SetConfig+0x468>)
 8005a42:	617b      	str	r3, [r7, #20]
        break;
 8005a44:	e00c      	b.n	8005a60 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a46:	f7fe fe61 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8005a4a:	6178      	str	r0, [r7, #20]
        break;
 8005a4c:	e008      	b.n	8005a60 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a52:	617b      	str	r3, [r7, #20]
        break;
 8005a54:	e004      	b.n	8005a60 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	76bb      	strb	r3, [r7, #26]
        break;
 8005a5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d074      	beq.n	8005b50 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	005a      	lsls	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b0f      	cmp	r3, #15
 8005a82:	d916      	bls.n	8005ab2 <UART_SetConfig+0x3b2>
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8a:	d212      	bcs.n	8005ab2 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f023 030f 	bic.w	r3, r3, #15
 8005a94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	89fb      	ldrh	r3, [r7, #14]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	89fa      	ldrh	r2, [r7, #14]
 8005aae:	60da      	str	r2, [r3, #12]
 8005ab0:	e04e      	b.n	8005b50 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	76bb      	strb	r3, [r7, #26]
 8005ab6:	e04b      	b.n	8005b50 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ab8:	7efb      	ldrb	r3, [r7, #27]
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d827      	bhi.n	8005b0e <UART_SetConfig+0x40e>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <UART_SetConfig+0x3c4>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005ae9 	.word	0x08005ae9
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005af9 	.word	0x08005af9
 8005ad0:	08005b0f 	.word	0x08005b0f
 8005ad4:	08005aff 	.word	0x08005aff
 8005ad8:	08005b0f 	.word	0x08005b0f
 8005adc:	08005b0f 	.word	0x08005b0f
 8005ae0:	08005b0f 	.word	0x08005b0f
 8005ae4:	08005b07 	.word	0x08005b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae8:	f7fe fea6 	bl	8004838 <HAL_RCC_GetPCLK1Freq>
 8005aec:	6178      	str	r0, [r7, #20]
        break;
 8005aee:	e013      	b.n	8005b18 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af0:	f7fe feb8 	bl	8004864 <HAL_RCC_GetPCLK2Freq>
 8005af4:	6178      	str	r0, [r7, #20]
        break;
 8005af6:	e00f      	b.n	8005b18 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af8:	4b1b      	ldr	r3, [pc, #108]	; (8005b68 <UART_SetConfig+0x468>)
 8005afa:	617b      	str	r3, [r7, #20]
        break;
 8005afc:	e00c      	b.n	8005b18 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afe:	f7fe fe05 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8005b02:	6178      	str	r0, [r7, #20]
        break;
 8005b04:	e008      	b.n	8005b18 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0a:	617b      	str	r3, [r7, #20]
        break;
 8005b0c:	e004      	b.n	8005b18 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	76bb      	strb	r3, [r7, #26]
        break;
 8005b16:	bf00      	nop
    }

    if (pclk != 0U)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d018      	beq.n	8005b50 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	085a      	lsrs	r2, r3, #1
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	441a      	add	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b0f      	cmp	r3, #15
 8005b38:	d908      	bls.n	8005b4c <UART_SetConfig+0x44c>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b40:	d204      	bcs.n	8005b4c <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	60da      	str	r2, [r3, #12]
 8005b4a:	e001      	b.n	8005b50 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005b5c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005b68:	00f42400 	.word	0x00f42400

08005b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01a      	beq.n	8005c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c6a:	d10a      	bne.n	8005c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	605a      	str	r2, [r3, #4]
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005cbe:	f7fb fed9 	bl	8001a74 <HAL_GetTick>
 8005cc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d10e      	bne.n	8005cf0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f82a 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e020      	b.n	8005d32 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d10e      	bne.n	8005d1c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f814 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e00a      	b.n	8005d32 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4a:	e05d      	b.n	8005e08 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d059      	beq.n	8005e08 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d54:	f7fb fe8e 	bl	8001a74 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d302      	bcc.n	8005d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d11b      	bne.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e042      	b.n	8005e28 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d02b      	beq.n	8005e08 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dbe:	d123      	bne.n	8005e08 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dd8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e00f      	b.n	8005e28 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69da      	ldr	r2, [r3, #28]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4013      	ands	r3, r2
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	bf0c      	ite	eq
 8005e18:	2301      	moveq	r3, #1
 8005e1a:	2300      	movne	r3, #0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d092      	beq.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <arm_rfft_fast_init_f32>:
 8005e30:	084b      	lsrs	r3, r1, #1
 8005e32:	2b80      	cmp	r3, #128	; 0x80
 8005e34:	b410      	push	{r4}
 8005e36:	8201      	strh	r1, [r0, #16]
 8005e38:	8003      	strh	r3, [r0, #0]
 8005e3a:	d047      	beq.n	8005ecc <arm_rfft_fast_init_f32+0x9c>
 8005e3c:	d917      	bls.n	8005e6e <arm_rfft_fast_init_f32+0x3e>
 8005e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e42:	d03d      	beq.n	8005ec0 <arm_rfft_fast_init_f32+0x90>
 8005e44:	d929      	bls.n	8005e9a <arm_rfft_fast_init_f32+0x6a>
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4a:	d020      	beq.n	8005e8e <arm_rfft_fast_init_f32+0x5e>
 8005e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e50:	d113      	bne.n	8005e7a <arm_rfft_fast_init_f32+0x4a>
 8005e52:	4921      	ldr	r1, [pc, #132]	; (8005ed8 <arm_rfft_fast_init_f32+0xa8>)
 8005e54:	4a21      	ldr	r2, [pc, #132]	; (8005edc <arm_rfft_fast_init_f32+0xac>)
 8005e56:	4b22      	ldr	r3, [pc, #136]	; (8005ee0 <arm_rfft_fast_init_f32+0xb0>)
 8005e58:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8005e5c:	8184      	strh	r4, [r0, #12]
 8005e5e:	6081      	str	r1, [r0, #8]
 8005e60:	6042      	str	r2, [r0, #4]
 8005e62:	6143      	str	r3, [r0, #20]
 8005e64:	2000      	movs	r0, #0
 8005e66:	b240      	sxtb	r0, r0
 8005e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d01c      	beq.n	8005eac <arm_rfft_fast_init_f32+0x7c>
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d006      	beq.n	8005e84 <arm_rfft_fast_init_f32+0x54>
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d01d      	beq.n	8005eb6 <arm_rfft_fast_init_f32+0x86>
 8005e7a:	20ff      	movs	r0, #255	; 0xff
 8005e7c:	b240      	sxtb	r0, r0
 8005e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	2438      	movs	r4, #56	; 0x38
 8005e86:	4917      	ldr	r1, [pc, #92]	; (8005ee4 <arm_rfft_fast_init_f32+0xb4>)
 8005e88:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <arm_rfft_fast_init_f32+0xb8>)
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <arm_rfft_fast_init_f32+0xbc>)
 8005e8c:	e7e6      	b.n	8005e5c <arm_rfft_fast_init_f32+0x2c>
 8005e8e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8005e92:	4917      	ldr	r1, [pc, #92]	; (8005ef0 <arm_rfft_fast_init_f32+0xc0>)
 8005e94:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <arm_rfft_fast_init_f32+0xc4>)
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <arm_rfft_fast_init_f32+0xc8>)
 8005e98:	e7e0      	b.n	8005e5c <arm_rfft_fast_init_f32+0x2c>
 8005e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9e:	d1ec      	bne.n	8005e7a <arm_rfft_fast_init_f32+0x4a>
 8005ea0:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8005ea4:	4915      	ldr	r1, [pc, #84]	; (8005efc <arm_rfft_fast_init_f32+0xcc>)
 8005ea6:	4a16      	ldr	r2, [pc, #88]	; (8005f00 <arm_rfft_fast_init_f32+0xd0>)
 8005ea8:	4b16      	ldr	r3, [pc, #88]	; (8005f04 <arm_rfft_fast_init_f32+0xd4>)
 8005eaa:	e7d7      	b.n	8005e5c <arm_rfft_fast_init_f32+0x2c>
 8005eac:	2430      	movs	r4, #48	; 0x30
 8005eae:	4916      	ldr	r1, [pc, #88]	; (8005f08 <arm_rfft_fast_init_f32+0xd8>)
 8005eb0:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <arm_rfft_fast_init_f32+0xdc>)
 8005eb2:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <arm_rfft_fast_init_f32+0xe0>)
 8005eb4:	e7d2      	b.n	8005e5c <arm_rfft_fast_init_f32+0x2c>
 8005eb6:	2414      	movs	r4, #20
 8005eb8:	4916      	ldr	r1, [pc, #88]	; (8005f14 <arm_rfft_fast_init_f32+0xe4>)
 8005eba:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <arm_rfft_fast_init_f32+0xe8>)
 8005ebc:	4b17      	ldr	r3, [pc, #92]	; (8005f1c <arm_rfft_fast_init_f32+0xec>)
 8005ebe:	e7cd      	b.n	8005e5c <arm_rfft_fast_init_f32+0x2c>
 8005ec0:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8005ec4:	4916      	ldr	r1, [pc, #88]	; (8005f20 <arm_rfft_fast_init_f32+0xf0>)
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <arm_rfft_fast_init_f32+0xf4>)
 8005ec8:	4b17      	ldr	r3, [pc, #92]	; (8005f28 <arm_rfft_fast_init_f32+0xf8>)
 8005eca:	e7c7      	b.n	8005e5c <arm_rfft_fast_init_f32+0x2c>
 8005ecc:	24d0      	movs	r4, #208	; 0xd0
 8005ece:	4917      	ldr	r1, [pc, #92]	; (8005f2c <arm_rfft_fast_init_f32+0xfc>)
 8005ed0:	4a17      	ldr	r2, [pc, #92]	; (8005f30 <arm_rfft_fast_init_f32+0x100>)
 8005ed2:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <arm_rfft_fast_init_f32+0x104>)
 8005ed4:	e7c2      	b.n	8005e5c <arm_rfft_fast_init_f32+0x2c>
 8005ed6:	bf00      	nop
 8005ed8:	08016900 	.word	0x08016900
 8005edc:	08007af8 	.word	0x08007af8
 8005ee0:	0800dc68 	.word	0x0800dc68
 8005ee4:	0800bbf8 	.word	0x0800bbf8
 8005ee8:	080186c0 	.word	0x080186c0
 8005eec:	0801abb0 	.word	0x0801abb0
 8005ef0:	080145e8 	.word	0x080145e8
 8005ef4:	080124e8 	.word	0x080124e8
 8005ef8:	0800bc68 	.word	0x0800bc68
 8005efc:	0801a840 	.word	0x0801a840
 8005f00:	08011c68 	.word	0x08011c68
 8005f04:	080188c0 	.word	0x080188c0
 8005f08:	080154a0 	.word	0x080154a0
 8005f0c:	080144e8 	.word	0x080144e8
 8005f10:	0800baf8 	.word	0x0800baf8
 8005f14:	080153f8 	.word	0x080153f8
 8005f18:	08012468 	.word	0x08012468
 8005f1c:	08015420 	.word	0x08015420
 8005f20:	080190c0 	.word	0x080190c0
 8005f24:	08015900 	.word	0x08015900
 8005f28:	08019440 	.word	0x08019440
 8005f2c:	0801adb0 	.word	0x0801adb0
 8005f30:	08015500 	.word	0x08015500
 8005f34:	0801a440 	.word	0x0801a440

08005f38 <arm_rfft_fast_f32>:
 8005f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3c:	8a06      	ldrh	r6, [r0, #16]
 8005f3e:	0876      	lsrs	r6, r6, #1
 8005f40:	4607      	mov	r7, r0
 8005f42:	4615      	mov	r5, r2
 8005f44:	8006      	strh	r6, [r0, #0]
 8005f46:	460c      	mov	r4, r1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d15c      	bne.n	8006006 <arm_rfft_fast_f32+0xce>
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f000 fbe6 	bl	8006720 <arm_cfft_f32>
 8005f54:	edd4 7a00 	vldr	s15, [r4]
 8005f58:	ed94 7a01 	vldr	s14, [r4, #4]
 8005f5c:	883e      	ldrh	r6, [r7, #0]
 8005f5e:	6978      	ldr	r0, [r7, #20]
 8005f60:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005f64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f68:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005f6c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005f70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f74:	3e01      	subs	r6, #1
 8005f76:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8005f7a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005f7e:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005f82:	ed85 7a00 	vstr	s14, [r5]
 8005f86:	edc5 7a01 	vstr	s15, [r5, #4]
 8005f8a:	3010      	adds	r0, #16
 8005f8c:	f105 0210 	add.w	r2, r5, #16
 8005f90:	3b08      	subs	r3, #8
 8005f92:	f104 0110 	add.w	r1, r4, #16
 8005f96:	ed51 4a02 	vldr	s9, [r1, #-8]
 8005f9a:	ed93 5a02 	vldr	s10, [r3, #8]
 8005f9e:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005fa2:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005fa6:	edd3 5a03 	vldr	s11, [r3, #12]
 8005faa:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005fae:	ee75 7a64 	vsub.f32	s15, s10, s9
 8005fb2:	ee35 4a87 	vadd.f32	s8, s11, s14
 8005fb6:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005fba:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005fbe:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005fc2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005fc6:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005fca:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005fce:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005fd2:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005fd6:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005fda:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005fde:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005fe2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005fe6:	3e01      	subs	r6, #1
 8005fe8:	ed42 6a02 	vstr	s13, [r2, #-8]
 8005fec:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005ff0:	f1a3 0308 	sub.w	r3, r3, #8
 8005ff4:	f101 0108 	add.w	r1, r1, #8
 8005ff8:	f100 0008 	add.w	r0, r0, #8
 8005ffc:	f102 0208 	add.w	r2, r2, #8
 8006000:	d1c9      	bne.n	8005f96 <arm_rfft_fast_f32+0x5e>
 8006002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006006:	edd1 7a00 	vldr	s15, [r1]
 800600a:	edd1 6a01 	vldr	s13, [r1, #4]
 800600e:	6941      	ldr	r1, [r0, #20]
 8006010:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006014:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006018:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800601c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006020:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8006024:	3e01      	subs	r6, #1
 8006026:	ed82 7a00 	vstr	s14, [r2]
 800602a:	edc2 7a01 	vstr	s15, [r2, #4]
 800602e:	00f0      	lsls	r0, r6, #3
 8006030:	b3ee      	cbz	r6, 80060ae <arm_rfft_fast_f32+0x176>
 8006032:	3808      	subs	r0, #8
 8006034:	f101 0e10 	add.w	lr, r1, #16
 8006038:	4420      	add	r0, r4
 800603a:	f104 0110 	add.w	r1, r4, #16
 800603e:	f102 0c10 	add.w	ip, r2, #16
 8006042:	ed90 7a02 	vldr	s14, [r0, #8]
 8006046:	ed51 6a02 	vldr	s13, [r1, #-8]
 800604a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800604e:	ed90 4a03 	vldr	s8, [r0, #12]
 8006052:	ed11 5a01 	vldr	s10, [r1, #-4]
 8006056:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800605a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800605e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8006062:	ee26 3a27 	vmul.f32	s6, s12, s15
 8006066:	ee77 6a26 	vadd.f32	s13, s14, s13
 800606a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800606e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8006072:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006076:	ee77 7a05 	vadd.f32	s15, s14, s10
 800607a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800607e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8006082:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006086:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800608a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800608e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006092:	3e01      	subs	r6, #1
 8006094:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8006098:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800609c:	f1a0 0008 	sub.w	r0, r0, #8
 80060a0:	f101 0108 	add.w	r1, r1, #8
 80060a4:	f10e 0e08 	add.w	lr, lr, #8
 80060a8:	f10c 0c08 	add.w	ip, ip, #8
 80060ac:	d1c9      	bne.n	8006042 <arm_rfft_fast_f32+0x10a>
 80060ae:	4638      	mov	r0, r7
 80060b0:	4629      	mov	r1, r5
 80060b2:	461a      	mov	r2, r3
 80060b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060b8:	2301      	movs	r3, #1
 80060ba:	f000 bb31 	b.w	8006720 <arm_cfft_f32>
 80060be:	bf00      	nop

080060c0 <arm_cfft_radix8by2_f32>:
 80060c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c4:	ed2d 8b08 	vpush	{d8-d11}
 80060c8:	f8b0 e000 	ldrh.w	lr, [r0]
 80060cc:	6842      	ldr	r2, [r0, #4]
 80060ce:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80060d2:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80060d6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80060da:	4607      	mov	r7, r0
 80060dc:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80060e0:	f000 80af 	beq.w	8006242 <arm_cfft_radix8by2_f32+0x182>
 80060e4:	3310      	adds	r3, #16
 80060e6:	18ce      	adds	r6, r1, r3
 80060e8:	3210      	adds	r2, #16
 80060ea:	4443      	add	r3, r8
 80060ec:	f101 0510 	add.w	r5, r1, #16
 80060f0:	f108 0410 	add.w	r4, r8, #16
 80060f4:	ed54 1a04 	vldr	s3, [r4, #-16]
 80060f8:	ed13 4a04 	vldr	s8, [r3, #-16]
 80060fc:	ed53 3a03 	vldr	s7, [r3, #-12]
 8006100:	ed53 5a02 	vldr	s11, [r3, #-8]
 8006104:	ed13 5a01 	vldr	s10, [r3, #-4]
 8006108:	ed54 6a03 	vldr	s13, [r4, #-12]
 800610c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006110:	ed16 2a04 	vldr	s4, [r6, #-16]
 8006114:	ed56 2a03 	vldr	s5, [r6, #-12]
 8006118:	ed15 6a03 	vldr	s12, [r5, #-12]
 800611c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8006120:	ed15 3a04 	vldr	s6, [r5, #-16]
 8006124:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006128:	ed56 0a02 	vldr	s1, [r6, #-8]
 800612c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006130:	ed55 4a02 	vldr	s9, [r5, #-8]
 8006134:	ee73 ba21 	vadd.f32	s23, s6, s3
 8006138:	ee36 ba26 	vadd.f32	s22, s12, s13
 800613c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8006140:	ee72 9a04 	vadd.f32	s19, s4, s8
 8006144:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8006148:	ee31 8a05 	vadd.f32	s16, s2, s10
 800614c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8006150:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8006154:	ed45 ba04 	vstr	s23, [r5, #-16]
 8006158:	ed05 ba03 	vstr	s22, [r5, #-12]
 800615c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8006160:	ed05 aa01 	vstr	s20, [r5, #-4]
 8006164:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006168:	ed46 9a04 	vstr	s19, [r6, #-16]
 800616c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006170:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006174:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006178:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800617c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006180:	ed52 2a04 	vldr	s5, [r2, #-16]
 8006184:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006188:	ee34 4a42 	vsub.f32	s8, s8, s4
 800618c:	ee26 8a86 	vmul.f32	s16, s13, s12
 8006190:	ee24 2a06 	vmul.f32	s4, s8, s12
 8006194:	ee63 1a22 	vmul.f32	s3, s6, s5
 8006198:	ee24 4a22 	vmul.f32	s8, s8, s5
 800619c:	ee23 3a06 	vmul.f32	s6, s6, s12
 80061a0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80061a4:	ee23 6a86 	vmul.f32	s12, s7, s12
 80061a8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80061ac:	ee36 6a04 	vadd.f32	s12, s12, s8
 80061b0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80061b4:	ee72 3a63 	vsub.f32	s7, s4, s7
 80061b8:	ee71 2a88 	vadd.f32	s5, s3, s16
 80061bc:	ed44 6a03 	vstr	s13, [r4, #-12]
 80061c0:	ed44 2a04 	vstr	s5, [r4, #-16]
 80061c4:	ed43 3a04 	vstr	s7, [r3, #-16]
 80061c8:	ed03 6a03 	vstr	s12, [r3, #-12]
 80061cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061d0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80061d4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80061d8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80061dc:	ee35 6a41 	vsub.f32	s12, s10, s2
 80061e0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80061e4:	ee67 3a87 	vmul.f32	s7, s15, s14
 80061e8:	ee26 5a87 	vmul.f32	s10, s13, s14
 80061ec:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80061f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80061f4:	ee64 4a87 	vmul.f32	s9, s9, s14
 80061f8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80061fc:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006200:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006204:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006208:	ee74 5a23 	vadd.f32	s11, s8, s7
 800620c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006210:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006214:	f1be 0e01 	subs.w	lr, lr, #1
 8006218:	ed44 5a02 	vstr	s11, [r4, #-8]
 800621c:	f105 0510 	add.w	r5, r5, #16
 8006220:	ed44 7a01 	vstr	s15, [r4, #-4]
 8006224:	f106 0610 	add.w	r6, r6, #16
 8006228:	ed03 6a02 	vstr	s12, [r3, #-8]
 800622c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8006230:	f102 0210 	add.w	r2, r2, #16
 8006234:	f104 0410 	add.w	r4, r4, #16
 8006238:	f103 0310 	add.w	r3, r3, #16
 800623c:	f47f af5a 	bne.w	80060f4 <arm_cfft_radix8by2_f32+0x34>
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	fa1f f48c 	uxth.w	r4, ip
 8006246:	4608      	mov	r0, r1
 8006248:	2302      	movs	r3, #2
 800624a:	4621      	mov	r1, r4
 800624c:	f000 fae2 	bl	8006814 <arm_radix8_butterfly_f32>
 8006250:	ecbd 8b08 	vpop	{d8-d11}
 8006254:	4640      	mov	r0, r8
 8006256:	4621      	mov	r1, r4
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	2302      	movs	r3, #2
 800625c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	f000 bad8 	b.w	8006814 <arm_radix8_butterfly_f32>

08006264 <arm_cfft_radix8by4_f32>:
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	ed2d 8b0a 	vpush	{d8-d12}
 800626c:	8802      	ldrh	r2, [r0, #0]
 800626e:	ed91 6a00 	vldr	s12, [r1]
 8006272:	b08f      	sub	sp, #60	; 0x3c
 8006274:	460f      	mov	r7, r1
 8006276:	0852      	lsrs	r2, r2, #1
 8006278:	0093      	lsls	r3, r2, #2
 800627a:	900c      	str	r0, [sp, #48]	; 0x30
 800627c:	9103      	str	r1, [sp, #12]
 800627e:	6841      	ldr	r1, [r0, #4]
 8006280:	ed97 7a01 	vldr	s14, [r7, #4]
 8006284:	4638      	mov	r0, r7
 8006286:	4418      	add	r0, r3
 8006288:	4606      	mov	r6, r0
 800628a:	9009      	str	r0, [sp, #36]	; 0x24
 800628c:	4418      	add	r0, r3
 800628e:	edd0 6a00 	vldr	s13, [r0]
 8006292:	edd6 3a00 	vldr	s7, [r6]
 8006296:	edd6 2a01 	vldr	s5, [r6, #4]
 800629a:	edd0 7a01 	vldr	s15, [r0, #4]
 800629e:	900a      	str	r0, [sp, #40]	; 0x28
 80062a0:	ee76 5a26 	vadd.f32	s11, s12, s13
 80062a4:	4604      	mov	r4, r0
 80062a6:	4625      	mov	r5, r4
 80062a8:	441c      	add	r4, r3
 80062aa:	ed94 4a00 	vldr	s8, [r4]
 80062ae:	ed94 5a01 	vldr	s10, [r4, #4]
 80062b2:	9401      	str	r4, [sp, #4]
 80062b4:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80062b8:	4630      	mov	r0, r6
 80062ba:	ee74 4a24 	vadd.f32	s9, s8, s9
 80062be:	463e      	mov	r6, r7
 80062c0:	ee14 ea90 	vmov	lr, s9
 80062c4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80062c8:	f846 eb08 	str.w	lr, [r6], #8
 80062cc:	ee37 6a27 	vadd.f32	s12, s14, s15
 80062d0:	edd0 4a01 	vldr	s9, [r0, #4]
 80062d4:	9604      	str	r6, [sp, #16]
 80062d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062da:	9e01      	ldr	r6, [sp, #4]
 80062dc:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80062e0:	ed96 2a01 	vldr	s4, [r6, #4]
 80062e4:	ee36 7a24 	vadd.f32	s14, s12, s9
 80062e8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80062ec:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80062f0:	ee36 6a62 	vsub.f32	s12, s12, s5
 80062f4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80062f8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80062fc:	ee73 3a45 	vsub.f32	s7, s6, s10
 8006300:	4604      	mov	r4, r0
 8006302:	ee36 6a45 	vsub.f32	s12, s12, s10
 8006306:	ee75 6a26 	vadd.f32	s13, s10, s13
 800630a:	46a3      	mov	fp, r4
 800630c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006310:	ee34 5a84 	vadd.f32	s10, s9, s8
 8006314:	ee13 8a90 	vmov	r8, s7
 8006318:	46a4      	mov	ip, r4
 800631a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800631e:	ed87 7a01 	vstr	s14, [r7, #4]
 8006322:	f84b 8b08 	str.w	r8, [fp], #8
 8006326:	f1ac 0704 	sub.w	r7, ip, #4
 800632a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800632e:	f101 0c08 	add.w	ip, r1, #8
 8006332:	462c      	mov	r4, r5
 8006334:	f8cd c014 	str.w	ip, [sp, #20]
 8006338:	ee15 ca90 	vmov	ip, s11
 800633c:	f844 cb08 	str.w	ip, [r4], #8
 8006340:	9407      	str	r4, [sp, #28]
 8006342:	f101 0410 	add.w	r4, r1, #16
 8006346:	ed85 6a01 	vstr	s12, [r5, #4]
 800634a:	0852      	lsrs	r2, r2, #1
 800634c:	9402      	str	r4, [sp, #8]
 800634e:	462c      	mov	r4, r5
 8006350:	f101 0518 	add.w	r5, r1, #24
 8006354:	920b      	str	r2, [sp, #44]	; 0x2c
 8006356:	46b2      	mov	sl, r6
 8006358:	9506      	str	r5, [sp, #24]
 800635a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800635e:	3a02      	subs	r2, #2
 8006360:	ee16 5a90 	vmov	r5, s13
 8006364:	46b6      	mov	lr, r6
 8006366:	4630      	mov	r0, r6
 8006368:	0852      	lsrs	r2, r2, #1
 800636a:	f84a 5b08 	str.w	r5, [sl], #8
 800636e:	f1a0 0604 	sub.w	r6, r0, #4
 8006372:	edce 7a01 	vstr	s15, [lr, #4]
 8006376:	9208      	str	r2, [sp, #32]
 8006378:	f000 8130 	beq.w	80065dc <arm_cfft_radix8by4_f32+0x378>
 800637c:	4691      	mov	r9, r2
 800637e:	9a03      	ldr	r2, [sp, #12]
 8006380:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006384:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006388:	3b08      	subs	r3, #8
 800638a:	f102 0510 	add.w	r5, r2, #16
 800638e:	f101 0c20 	add.w	ip, r1, #32
 8006392:	f1a4 020c 	sub.w	r2, r4, #12
 8006396:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800639a:	4433      	add	r3, r6
 800639c:	3410      	adds	r4, #16
 800639e:	4650      	mov	r0, sl
 80063a0:	4659      	mov	r1, fp
 80063a2:	ed55 3a02 	vldr	s7, [r5, #-8]
 80063a6:	ed14 5a02 	vldr	s10, [r4, #-8]
 80063aa:	ed91 7a00 	vldr	s14, [r1]
 80063ae:	edd0 7a00 	vldr	s15, [r0]
 80063b2:	ed15 4a01 	vldr	s8, [r5, #-4]
 80063b6:	ed54 5a01 	vldr	s11, [r4, #-4]
 80063ba:	edd0 6a01 	vldr	s13, [r0, #4]
 80063be:	ed91 6a01 	vldr	s12, [r1, #4]
 80063c2:	ee33 8a85 	vadd.f32	s16, s7, s10
 80063c6:	ee34 0a25 	vadd.f32	s0, s8, s11
 80063ca:	ee78 4a07 	vadd.f32	s9, s16, s14
 80063ce:	ee74 5a65 	vsub.f32	s11, s8, s11
 80063d2:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80063d6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80063da:	ed45 4a02 	vstr	s9, [r5, #-8]
 80063de:	edd1 4a01 	vldr	s9, [r1, #4]
 80063e2:	ed90 4a01 	vldr	s8, [r0, #4]
 80063e6:	ee70 4a24 	vadd.f32	s9, s0, s9
 80063ea:	ee76 aa05 	vadd.f32	s21, s12, s10
 80063ee:	ee74 4a84 	vadd.f32	s9, s9, s8
 80063f2:	ee35 aac7 	vsub.f32	s20, s11, s14
 80063f6:	ed45 4a01 	vstr	s9, [r5, #-4]
 80063fa:	edd6 1a00 	vldr	s3, [r6]
 80063fe:	edd7 0a00 	vldr	s1, [r7]
 8006402:	ed92 4a02 	vldr	s8, [r2, #8]
 8006406:	edd3 3a02 	vldr	s7, [r3, #8]
 800640a:	ed93 2a01 	vldr	s4, [r3, #4]
 800640e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8006412:	edd2 2a01 	vldr	s5, [r2, #4]
 8006416:	ed57 9a01 	vldr	s19, [r7, #-4]
 800641a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800641e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8006422:	ee74 8a84 	vadd.f32	s17, s9, s8
 8006426:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800642a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800642e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8006432:	ee18 aa90 	vmov	sl, s17
 8006436:	f847 a908 	str.w	sl, [r7], #-8
 800643a:	edd2 8a01 	vldr	s17, [r2, #4]
 800643e:	ed93 9a01 	vldr	s18, [r3, #4]
 8006442:	ee73 8a28 	vadd.f32	s17, s6, s17
 8006446:	ee3a aa27 	vadd.f32	s20, s20, s15
 800644a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800644e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8006452:	edc7 8a01 	vstr	s17, [r7, #4]
 8006456:	ed18 ba02 	vldr	s22, [r8, #-8]
 800645a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800645e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8006462:	ee6a ba28 	vmul.f32	s23, s20, s17
 8006466:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800646a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800646e:	ee30 9a81 	vadd.f32	s18, s1, s2
 8006472:	ee79 9a82 	vadd.f32	s19, s19, s4
 8006476:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800647a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800647e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8006482:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8006486:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800648a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800648e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8006492:	ee1c aa10 	vmov	sl, s24
 8006496:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800649a:	f841 ab08 	str.w	sl, [r1], #8
 800649e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80064a2:	ee3b bacb 	vsub.f32	s22, s23, s22
 80064a6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80064aa:	ee33 3a62 	vsub.f32	s6, s6, s5
 80064ae:	ed01 aa01 	vstr	s20, [r1, #-4]
 80064b2:	edc2 8a01 	vstr	s17, [r2, #4]
 80064b6:	ed82 ba02 	vstr	s22, [r2, #8]
 80064ba:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80064be:	ee74 3a63 	vsub.f32	s7, s8, s7
 80064c2:	ee38 8a47 	vsub.f32	s16, s16, s14
 80064c6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80064ca:	ee30 0a46 	vsub.f32	s0, s0, s12
 80064ce:	ee33 3a42 	vsub.f32	s6, s6, s4
 80064d2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80064d6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80064da:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80064de:	ee63 8a04 	vmul.f32	s17, s6, s8
 80064e2:	ee28 aa24 	vmul.f32	s20, s16, s9
 80064e6:	ee60 9a04 	vmul.f32	s19, s0, s8
 80064ea:	ee28 8a04 	vmul.f32	s16, s16, s8
 80064ee:	ee20 0a24 	vmul.f32	s0, s0, s9
 80064f2:	ee63 3a84 	vmul.f32	s7, s7, s8
 80064f6:	ee39 4a68 	vsub.f32	s8, s18, s17
 80064fa:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80064fe:	ee14 aa10 	vmov	sl, s8
 8006502:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006506:	ee63 4a24 	vmul.f32	s9, s6, s9
 800650a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800650e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006512:	ed04 0a01 	vstr	s0, [r4, #-4]
 8006516:	f846 a908 	str.w	sl, [r6], #-8
 800651a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800651e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8006522:	edc6 3a01 	vstr	s7, [r6, #4]
 8006526:	ee76 6a86 	vadd.f32	s13, s13, s12
 800652a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800652e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8006532:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8006536:	ee67 5a86 	vmul.f32	s11, s15, s12
 800653a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800653e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8006542:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006546:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800654a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800654e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8006552:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800655a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800655e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8006562:	ee21 1a07 	vmul.f32	s2, s2, s14
 8006566:	ee15 aa90 	vmov	sl, s11
 800656a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800656e:	f840 ab08 	str.w	sl, [r0], #8
 8006572:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8006576:	ee76 2a22 	vadd.f32	s5, s12, s5
 800657a:	f1b9 0901 	subs.w	r9, r9, #1
 800657e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8006582:	f105 0508 	add.w	r5, r5, #8
 8006586:	ed83 1a02 	vstr	s2, [r3, #8]
 800658a:	edc3 2a01 	vstr	s5, [r3, #4]
 800658e:	f108 0808 	add.w	r8, r8, #8
 8006592:	f1a2 0208 	sub.w	r2, r2, #8
 8006596:	f10c 0c10 	add.w	ip, ip, #16
 800659a:	f104 0408 	add.w	r4, r4, #8
 800659e:	f10e 0e18 	add.w	lr, lr, #24
 80065a2:	f1a3 0308 	sub.w	r3, r3, #8
 80065a6:	f47f aefc 	bne.w	80063a2 <arm_cfft_radix8by4_f32+0x13e>
 80065aa:	9908      	ldr	r1, [sp, #32]
 80065ac:	9802      	ldr	r0, [sp, #8]
 80065ae:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80065b2:	00cb      	lsls	r3, r1, #3
 80065b4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80065b8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80065bc:	9102      	str	r1, [sp, #8]
 80065be:	9904      	ldr	r1, [sp, #16]
 80065c0:	4419      	add	r1, r3
 80065c2:	9104      	str	r1, [sp, #16]
 80065c4:	9905      	ldr	r1, [sp, #20]
 80065c6:	4419      	add	r1, r3
 80065c8:	9105      	str	r1, [sp, #20]
 80065ca:	9907      	ldr	r1, [sp, #28]
 80065cc:	449b      	add	fp, r3
 80065ce:	4419      	add	r1, r3
 80065d0:	449a      	add	sl, r3
 80065d2:	9b06      	ldr	r3, [sp, #24]
 80065d4:	9107      	str	r1, [sp, #28]
 80065d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065da:	9306      	str	r3, [sp, #24]
 80065dc:	9a04      	ldr	r2, [sp, #16]
 80065de:	9807      	ldr	r0, [sp, #28]
 80065e0:	edd2 3a00 	vldr	s7, [r2]
 80065e4:	ed90 4a00 	vldr	s8, [r0]
 80065e8:	eddb 7a00 	vldr	s15, [fp]
 80065ec:	ed9a 3a00 	vldr	s6, [sl]
 80065f0:	edd2 4a01 	vldr	s9, [r2, #4]
 80065f4:	ed90 7a01 	vldr	s14, [r0, #4]
 80065f8:	ed9b 2a01 	vldr	s4, [fp, #4]
 80065fc:	edda 5a01 	vldr	s11, [sl, #4]
 8006600:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8006604:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006606:	ee73 6a84 	vadd.f32	s13, s7, s8
 800660a:	ee34 6a87 	vadd.f32	s12, s9, s14
 800660e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8006612:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8006616:	ee33 5a05 	vadd.f32	s10, s6, s10
 800661a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800661e:	ed82 5a00 	vstr	s10, [r2]
 8006622:	ed9b 5a01 	vldr	s10, [fp, #4]
 8006626:	edda 4a01 	vldr	s9, [sl, #4]
 800662a:	ee36 5a05 	vadd.f32	s10, s12, s10
 800662e:	ee72 3a04 	vadd.f32	s7, s4, s8
 8006632:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006636:	ee77 4a67 	vsub.f32	s9, s14, s15
 800663a:	ed82 5a01 	vstr	s10, [r2, #4]
 800663e:	9a05      	ldr	r2, [sp, #20]
 8006640:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006644:	edd2 1a00 	vldr	s3, [r2]
 8006648:	edd2 2a01 	vldr	s5, [r2, #4]
 800664c:	9a02      	ldr	r2, [sp, #8]
 800664e:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8006652:	ee36 6a42 	vsub.f32	s12, s12, s4
 8006656:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800665a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800665e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006662:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006666:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800666a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800666e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006672:	edcb 2a00 	vstr	s5, [fp]
 8006676:	ed8b 5a01 	vstr	s10, [fp, #4]
 800667a:	edd2 3a01 	vldr	s7, [r2, #4]
 800667e:	ed92 5a00 	vldr	s10, [r2]
 8006682:	9a06      	ldr	r2, [sp, #24]
 8006684:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006688:	ee36 6a65 	vsub.f32	s12, s12, s11
 800668c:	ee66 4a85 	vmul.f32	s9, s13, s10
 8006690:	ee26 5a05 	vmul.f32	s10, s12, s10
 8006694:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006698:	ee26 6a23 	vmul.f32	s12, s12, s7
 800669c:	ee75 6a66 	vsub.f32	s13, s10, s13
 80066a0:	ee34 6a86 	vadd.f32	s12, s9, s12
 80066a4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80066a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066ac:	edc0 6a01 	vstr	s13, [r0, #4]
 80066b0:	ed80 6a00 	vstr	s12, [r0]
 80066b4:	ed92 6a01 	vldr	s12, [r2, #4]
 80066b8:	9803      	ldr	r0, [sp, #12]
 80066ba:	ee77 7a43 	vsub.f32	s15, s14, s6
 80066be:	ee75 5a84 	vadd.f32	s11, s11, s8
 80066c2:	ed92 7a00 	vldr	s14, [r2]
 80066c6:	ee65 6a87 	vmul.f32	s13, s11, s14
 80066ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80066ce:	ee65 5a86 	vmul.f32	s11, s11, s12
 80066d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80066d6:	ee77 5a65 	vsub.f32	s11, s14, s11
 80066da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066de:	edca 5a01 	vstr	s11, [sl, #4]
 80066e2:	edca 7a00 	vstr	s15, [sl]
 80066e6:	6872      	ldr	r2, [r6, #4]
 80066e8:	4621      	mov	r1, r4
 80066ea:	2304      	movs	r3, #4
 80066ec:	f000 f892 	bl	8006814 <arm_radix8_butterfly_f32>
 80066f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066f2:	6872      	ldr	r2, [r6, #4]
 80066f4:	4621      	mov	r1, r4
 80066f6:	2304      	movs	r3, #4
 80066f8:	f000 f88c 	bl	8006814 <arm_radix8_butterfly_f32>
 80066fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066fe:	6872      	ldr	r2, [r6, #4]
 8006700:	4621      	mov	r1, r4
 8006702:	2304      	movs	r3, #4
 8006704:	f000 f886 	bl	8006814 <arm_radix8_butterfly_f32>
 8006708:	9801      	ldr	r0, [sp, #4]
 800670a:	6872      	ldr	r2, [r6, #4]
 800670c:	4621      	mov	r1, r4
 800670e:	2304      	movs	r3, #4
 8006710:	b00f      	add	sp, #60	; 0x3c
 8006712:	ecbd 8b0a 	vpop	{d8-d12}
 8006716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671a:	f000 b87b 	b.w	8006814 <arm_radix8_butterfly_f32>
 800671e:	bf00      	nop

08006720 <arm_cfft_f32>:
 8006720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006724:	2a01      	cmp	r2, #1
 8006726:	4606      	mov	r6, r0
 8006728:	4617      	mov	r7, r2
 800672a:	460c      	mov	r4, r1
 800672c:	4698      	mov	r8, r3
 800672e:	8805      	ldrh	r5, [r0, #0]
 8006730:	d054      	beq.n	80067dc <arm_cfft_f32+0xbc>
 8006732:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006736:	d04c      	beq.n	80067d2 <arm_cfft_f32+0xb2>
 8006738:	d916      	bls.n	8006768 <arm_cfft_f32+0x48>
 800673a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800673e:	d01a      	beq.n	8006776 <arm_cfft_f32+0x56>
 8006740:	d95c      	bls.n	80067fc <arm_cfft_f32+0xdc>
 8006742:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006746:	d044      	beq.n	80067d2 <arm_cfft_f32+0xb2>
 8006748:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800674c:	d105      	bne.n	800675a <arm_cfft_f32+0x3a>
 800674e:	4620      	mov	r0, r4
 8006750:	4629      	mov	r1, r5
 8006752:	6872      	ldr	r2, [r6, #4]
 8006754:	2301      	movs	r3, #1
 8006756:	f000 f85d 	bl	8006814 <arm_radix8_butterfly_f32>
 800675a:	f1b8 0f00 	cmp.w	r8, #0
 800675e:	d111      	bne.n	8006784 <arm_cfft_f32+0x64>
 8006760:	2f01      	cmp	r7, #1
 8006762:	d016      	beq.n	8006792 <arm_cfft_f32+0x72>
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	2d20      	cmp	r5, #32
 800676a:	d032      	beq.n	80067d2 <arm_cfft_f32+0xb2>
 800676c:	d94a      	bls.n	8006804 <arm_cfft_f32+0xe4>
 800676e:	2d40      	cmp	r5, #64	; 0x40
 8006770:	d0ed      	beq.n	800674e <arm_cfft_f32+0x2e>
 8006772:	2d80      	cmp	r5, #128	; 0x80
 8006774:	d1f1      	bne.n	800675a <arm_cfft_f32+0x3a>
 8006776:	4630      	mov	r0, r6
 8006778:	4621      	mov	r1, r4
 800677a:	f7ff fca1 	bl	80060c0 <arm_cfft_radix8by2_f32>
 800677e:	f1b8 0f00 	cmp.w	r8, #0
 8006782:	d0ed      	beq.n	8006760 <arm_cfft_f32+0x40>
 8006784:	4620      	mov	r0, r4
 8006786:	89b1      	ldrh	r1, [r6, #12]
 8006788:	68b2      	ldr	r2, [r6, #8]
 800678a:	f7f9 fd21 	bl	80001d0 <arm_bitreversal_32>
 800678e:	2f01      	cmp	r7, #1
 8006790:	d1e8      	bne.n	8006764 <arm_cfft_f32+0x44>
 8006792:	ee07 5a90 	vmov	s15, r5
 8006796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800679e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80067a2:	2d00      	cmp	r5, #0
 80067a4:	d0de      	beq.n	8006764 <arm_cfft_f32+0x44>
 80067a6:	f104 0108 	add.w	r1, r4, #8
 80067aa:	2300      	movs	r3, #0
 80067ac:	3301      	adds	r3, #1
 80067ae:	429d      	cmp	r5, r3
 80067b0:	f101 0108 	add.w	r1, r1, #8
 80067b4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80067b8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80067bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80067c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80067c4:	ed01 7a04 	vstr	s14, [r1, #-16]
 80067c8:	ed41 7a03 	vstr	s15, [r1, #-12]
 80067cc:	d1ee      	bne.n	80067ac <arm_cfft_f32+0x8c>
 80067ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d2:	4630      	mov	r0, r6
 80067d4:	4621      	mov	r1, r4
 80067d6:	f7ff fd45 	bl	8006264 <arm_cfft_radix8by4_f32>
 80067da:	e7be      	b.n	800675a <arm_cfft_f32+0x3a>
 80067dc:	b1ad      	cbz	r5, 800680a <arm_cfft_f32+0xea>
 80067de:	f101 030c 	add.w	r3, r1, #12
 80067e2:	2200      	movs	r2, #0
 80067e4:	ed53 7a02 	vldr	s15, [r3, #-8]
 80067e8:	3201      	adds	r2, #1
 80067ea:	eef1 7a67 	vneg.f32	s15, s15
 80067ee:	4295      	cmp	r5, r2
 80067f0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80067f4:	f103 0308 	add.w	r3, r3, #8
 80067f8:	d1f4      	bne.n	80067e4 <arm_cfft_f32+0xc4>
 80067fa:	e79a      	b.n	8006732 <arm_cfft_f32+0x12>
 80067fc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006800:	d0a5      	beq.n	800674e <arm_cfft_f32+0x2e>
 8006802:	e7aa      	b.n	800675a <arm_cfft_f32+0x3a>
 8006804:	2d10      	cmp	r5, #16
 8006806:	d0b6      	beq.n	8006776 <arm_cfft_f32+0x56>
 8006808:	e7a7      	b.n	800675a <arm_cfft_f32+0x3a>
 800680a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800680e:	d894      	bhi.n	800673a <arm_cfft_f32+0x1a>
 8006810:	e7aa      	b.n	8006768 <arm_cfft_f32+0x48>
 8006812:	bf00      	nop

08006814 <arm_radix8_butterfly_f32>:
 8006814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006818:	ed2d 8b10 	vpush	{d8-d15}
 800681c:	b09d      	sub	sp, #116	; 0x74
 800681e:	461c      	mov	r4, r3
 8006820:	ed9f bac8 	vldr	s22, [pc, #800]	; 8006b44 <arm_radix8_butterfly_f32+0x330>
 8006824:	921a      	str	r2, [sp, #104]	; 0x68
 8006826:	1d03      	adds	r3, r0, #4
 8006828:	4682      	mov	sl, r0
 800682a:	4689      	mov	r9, r1
 800682c:	468b      	mov	fp, r1
 800682e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006830:	9400      	str	r4, [sp, #0]
 8006832:	469e      	mov	lr, r3
 8006834:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8006838:	005a      	lsls	r2, r3, #1
 800683a:	18d6      	adds	r6, r2, r3
 800683c:	18f5      	adds	r5, r6, r3
 800683e:	9203      	str	r2, [sp, #12]
 8006840:	195a      	adds	r2, r3, r5
 8006842:	18d0      	adds	r0, r2, r3
 8006844:	00df      	lsls	r7, r3, #3
 8006846:	1819      	adds	r1, r3, r0
 8006848:	463c      	mov	r4, r7
 800684a:	9701      	str	r7, [sp, #4]
 800684c:	4457      	add	r7, sl
 800684e:	930c      	str	r3, [sp, #48]	; 0x30
 8006850:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800685a:	eb07 0c04 	add.w	ip, r7, r4
 800685e:	9c00      	ldr	r4, [sp, #0]
 8006860:	9302      	str	r3, [sp, #8]
 8006862:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8006866:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800686a:	3204      	adds	r2, #4
 800686c:	3104      	adds	r1, #4
 800686e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8006872:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006876:	f04f 0800 	mov.w	r8, #0
 800687a:	eddc 7a00 	vldr	s15, [ip]
 800687e:	edd7 6a00 	vldr	s13, [r7]
 8006882:	edd6 3a00 	vldr	s7, [r6]
 8006886:	ed5e aa01 	vldr	s21, [lr, #-4]
 800688a:	edd5 4a00 	vldr	s9, [r5]
 800688e:	ed90 2a00 	vldr	s4, [r0]
 8006892:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006896:	ed51 0a01 	vldr	s1, [r1, #-4]
 800689a:	ee77 8a82 	vadd.f32	s17, s15, s4
 800689e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 80068a2:	ee76 1a87 	vadd.f32	s3, s13, s14
 80068a6:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80068aa:	ee31 6a84 	vadd.f32	s12, s3, s8
 80068ae:	ee33 5a28 	vadd.f32	s10, s6, s17
 80068b2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80068b6:	ee75 6a06 	vadd.f32	s13, s10, s12
 80068ba:	ee35 5a46 	vsub.f32	s10, s10, s12
 80068be:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80068c2:	ed85 5a00 	vstr	s10, [r5]
 80068c6:	ed96 1a01 	vldr	s2, [r6, #4]
 80068ca:	edd7 5a01 	vldr	s11, [r7, #4]
 80068ce:	ed92 aa00 	vldr	s20, [r2]
 80068d2:	ed91 6a00 	vldr	s12, [r1]
 80068d6:	ed9e 9a00 	vldr	s18, [lr]
 80068da:	ed95 5a01 	vldr	s10, [r5, #4]
 80068de:	eddc 6a01 	vldr	s13, [ip, #4]
 80068e2:	edd0 9a01 	vldr	s19, [r0, #4]
 80068e6:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80068ea:	ee71 2a46 	vsub.f32	s5, s2, s12
 80068ee:	ee75 3aca 	vsub.f32	s7, s11, s20
 80068f2:	ee37 0a60 	vsub.f32	s0, s14, s1
 80068f6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80068fa:	ee37 7a20 	vadd.f32	s14, s14, s1
 80068fe:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8006902:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8006906:	ee79 3a05 	vadd.f32	s7, s18, s10
 800690a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800690e:	ee39 5a45 	vsub.f32	s10, s18, s10
 8006912:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8006916:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800691a:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800691e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8006922:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8006926:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800692a:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800692e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8006932:	ee33 3a68 	vsub.f32	s6, s6, s17
 8006936:	ee36 0a88 	vadd.f32	s0, s13, s16
 800693a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800693e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8006942:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8006946:	ee75 6a62 	vsub.f32	s13, s10, s5
 800694a:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800694e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006952:	ee33 1a89 	vadd.f32	s2, s7, s18
 8006956:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800695a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800695e:	ee75 4a22 	vadd.f32	s9, s10, s5
 8006962:	ee32 5a27 	vadd.f32	s10, s4, s15
 8006966:	ee72 7a67 	vsub.f32	s15, s4, s15
 800696a:	ee33 8a06 	vadd.f32	s16, s6, s12
 800696e:	ee75 2a87 	vadd.f32	s5, s11, s14
 8006972:	ee31 9a28 	vadd.f32	s18, s2, s17
 8006976:	ee33 6a46 	vsub.f32	s12, s6, s12
 800697a:	ee74 0a61 	vsub.f32	s1, s8, s3
 800697e:	ee33 2a80 	vadd.f32	s4, s7, s0
 8006982:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8006986:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800698a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800698e:	ee31 1a68 	vsub.f32	s2, s2, s17
 8006992:	ee34 4a21 	vadd.f32	s8, s8, s3
 8006996:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800699a:	ee74 4a85 	vadd.f32	s9, s9, s10
 800699e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80069a2:	44d8      	add	r8, fp
 80069a4:	45c1      	cmp	r9, r8
 80069a6:	ed8e 9a00 	vstr	s18, [lr]
 80069aa:	ed85 1a01 	vstr	s2, [r5, #4]
 80069ae:	449e      	add	lr, r3
 80069b0:	ed8c 8a00 	vstr	s16, [ip]
 80069b4:	441d      	add	r5, r3
 80069b6:	ed80 6a00 	vstr	s12, [r0]
 80069ba:	edcc 0a01 	vstr	s1, [ip, #4]
 80069be:	ed80 4a01 	vstr	s8, [r0, #4]
 80069c2:	449c      	add	ip, r3
 80069c4:	ed87 2a00 	vstr	s4, [r7]
 80069c8:	4418      	add	r0, r3
 80069ca:	ed41 3a01 	vstr	s7, [r1, #-4]
 80069ce:	ed42 2a01 	vstr	s5, [r2, #-4]
 80069d2:	ed86 7a00 	vstr	s14, [r6]
 80069d6:	ed87 3a01 	vstr	s6, [r7, #4]
 80069da:	edc1 4a00 	vstr	s9, [r1]
 80069de:	441f      	add	r7, r3
 80069e0:	edc2 5a00 	vstr	s11, [r2]
 80069e4:	4419      	add	r1, r3
 80069e6:	edc6 6a01 	vstr	s13, [r6, #4]
 80069ea:	441a      	add	r2, r3
 80069ec:	441e      	add	r6, r3
 80069ee:	f63f af44 	bhi.w	800687a <arm_radix8_butterfly_f32+0x66>
 80069f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069f4:	2907      	cmp	r1, #7
 80069f6:	4620      	mov	r0, r4
 80069f8:	f240 81e9 	bls.w	8006dce <arm_radix8_butterfly_f32+0x5ba>
 80069fc:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8006a00:	193e      	adds	r6, r7, r4
 8006a02:	1935      	adds	r5, r6, r4
 8006a04:	9c03      	ldr	r4, [sp, #12]
 8006a06:	9000      	str	r0, [sp, #0]
 8006a08:	4622      	mov	r2, r4
 8006a0a:	3201      	adds	r2, #1
 8006a0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006a10:	9900      	ldr	r1, [sp, #0]
 8006a12:	1828      	adds	r0, r5, r0
 8006a14:	eb00 0e01 	add.w	lr, r0, r1
 8006a18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a1a:	440a      	add	r2, r1
 8006a1c:	eb04 0c01 	add.w	ip, r4, r1
 8006a20:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8006a24:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8006a28:	9a00      	ldr	r2, [sp, #0]
 8006a2a:	940f      	str	r4, [sp, #60]	; 0x3c
 8006a2c:	00ed      	lsls	r5, r5, #3
 8006a2e:	9511      	str	r5, [sp, #68]	; 0x44
 8006a30:	00d5      	lsls	r5, r2, #3
 8006a32:	950d      	str	r5, [sp, #52]	; 0x34
 8006a34:	9d01      	ldr	r5, [sp, #4]
 8006a36:	3508      	adds	r5, #8
 8006a38:	9516      	str	r5, [sp, #88]	; 0x58
 8006a3a:	9d02      	ldr	r5, [sp, #8]
 8006a3c:	3508      	adds	r5, #8
 8006a3e:	0114      	lsls	r4, r2, #4
 8006a40:	9517      	str	r5, [sp, #92]	; 0x5c
 8006a42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a44:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006a46:	940e      	str	r4, [sp, #56]	; 0x38
 8006a48:	00c0      	lsls	r0, r0, #3
 8006a4a:	9010      	str	r0, [sp, #64]	; 0x40
 8006a4c:	18aa      	adds	r2, r5, r2
 8006a4e:	9207      	str	r2, [sp, #28]
 8006a50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006a54:	18aa      	adds	r2, r5, r2
 8006a56:	9208      	str	r2, [sp, #32]
 8006a58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a5a:	18aa      	adds	r2, r5, r2
 8006a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006a62:	f10e 0204 	add.w	r2, lr, #4
 8006a66:	920a      	str	r2, [sp, #40]	; 0x28
 8006a68:	00c9      	lsls	r1, r1, #3
 8006a6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a6c:	310c      	adds	r1, #12
 8006a6e:	00f6      	lsls	r6, r6, #3
 8006a70:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8006a74:	9114      	str	r1, [sp, #80]	; 0x50
 8006a76:	18a9      	adds	r1, r5, r2
 8006a78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a7a:	9612      	str	r6, [sp, #72]	; 0x48
 8006a7c:	00ff      	lsls	r7, r7, #3
 8006a7e:	19ae      	adds	r6, r5, r6
 8006a80:	3008      	adds	r0, #8
 8006a82:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8006a86:	9606      	str	r6, [sp, #24]
 8006a88:	9019      	str	r0, [sp, #100]	; 0x64
 8006a8a:	18aa      	adds	r2, r5, r2
 8006a8c:	0164      	lsls	r4, r4, #5
 8006a8e:	19ee      	adds	r6, r5, r7
 8006a90:	f10c 000c 	add.w	r0, ip, #12
 8006a94:	9713      	str	r7, [sp, #76]	; 0x4c
 8006a96:	9604      	str	r6, [sp, #16]
 8006a98:	9015      	str	r0, [sp, #84]	; 0x54
 8006a9a:	9103      	str	r1, [sp, #12]
 8006a9c:	9205      	str	r2, [sp, #20]
 8006a9e:	f104 0208 	add.w	r2, r4, #8
 8006aa2:	9218      	str	r2, [sp, #96]	; 0x60
 8006aa4:	f04f 0801 	mov.w	r8, #1
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f102 0108 	add.w	r1, r2, #8
 8006aae:	460f      	mov	r7, r1
 8006ab0:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ab2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ab4:	188e      	adds	r6, r1, r2
 8006ab6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006ab8:	188d      	adds	r5, r1, r2
 8006aba:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006abc:	188c      	adds	r4, r1, r2
 8006abe:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006ac0:	1888      	adds	r0, r1, r2
 8006ac2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006ac4:	eb01 0c02 	add.w	ip, r1, r2
 8006ac8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006aca:	440a      	add	r2, r1
 8006acc:	9903      	ldr	r1, [sp, #12]
 8006ace:	edd1 fa00 	vldr	s31, [r1]
 8006ad2:	9905      	ldr	r1, [sp, #20]
 8006ad4:	ed91 fa00 	vldr	s30, [r1]
 8006ad8:	9904      	ldr	r1, [sp, #16]
 8006ada:	edd1 ea00 	vldr	s29, [r1]
 8006ade:	9906      	ldr	r1, [sp, #24]
 8006ae0:	ed91 ea00 	vldr	s28, [r1]
 8006ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ae6:	edd1 da00 	vldr	s27, [r1]
 8006aea:	9908      	ldr	r1, [sp, #32]
 8006aec:	ed91 da00 	vldr	s26, [r1]
 8006af0:	9907      	ldr	r1, [sp, #28]
 8006af2:	edd1 ca00 	vldr	s25, [r1]
 8006af6:	9903      	ldr	r1, [sp, #12]
 8006af8:	ed91 ca01 	vldr	s24, [r1, #4]
 8006afc:	9905      	ldr	r1, [sp, #20]
 8006afe:	edd1 ba01 	vldr	s23, [r1, #4]
 8006b02:	9904      	ldr	r1, [sp, #16]
 8006b04:	edd1 aa01 	vldr	s21, [r1, #4]
 8006b08:	9906      	ldr	r1, [sp, #24]
 8006b0a:	ed91 aa01 	vldr	s20, [r1, #4]
 8006b0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b10:	edd1 7a01 	vldr	s15, [r1, #4]
 8006b14:	9908      	ldr	r1, [sp, #32]
 8006b16:	edcd 7a00 	vstr	s15, [sp]
 8006b1a:	edd1 7a01 	vldr	s15, [r1, #4]
 8006b1e:	9907      	ldr	r1, [sp, #28]
 8006b20:	edcd 7a01 	vstr	s15, [sp, #4]
 8006b24:	edd1 7a01 	vldr	s15, [r1, #4]
 8006b28:	eb0a 0e07 	add.w	lr, sl, r7
 8006b2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006b2e:	edcd 7a02 	vstr	s15, [sp, #8]
 8006b32:	eb0c 010a 	add.w	r1, ip, sl
 8006b36:	4456      	add	r6, sl
 8006b38:	4455      	add	r5, sl
 8006b3a:	4454      	add	r4, sl
 8006b3c:	4450      	add	r0, sl
 8006b3e:	4452      	add	r2, sl
 8006b40:	46c4      	mov	ip, r8
 8006b42:	e001      	b.n	8006b48 <arm_radix8_butterfly_f32+0x334>
 8006b44:	3f3504f3 	.word	0x3f3504f3
 8006b48:	ed96 5a00 	vldr	s10, [r6]
 8006b4c:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006b50:	ed11 6a01 	vldr	s12, [r1, #-4]
 8006b54:	edd0 7a00 	vldr	s15, [r0]
 8006b58:	ed17 7a01 	vldr	s14, [r7, #-4]
 8006b5c:	edde 3a00 	vldr	s7, [lr]
 8006b60:	ed94 3a00 	vldr	s6, [r4]
 8006b64:	ed95 2a00 	vldr	s4, [r5]
 8006b68:	ed9e 0a01 	vldr	s0, [lr, #4]
 8006b6c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006b70:	ee32 1a06 	vadd.f32	s2, s4, s12
 8006b74:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006b78:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006b7c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006b80:	ee71 6a24 	vadd.f32	s13, s2, s9
 8006b84:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006b88:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006b8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b90:	ed8e 6a00 	vstr	s12, [lr]
 8006b94:	edd0 8a01 	vldr	s17, [r0, #4]
 8006b98:	ed95 9a01 	vldr	s18, [r5, #4]
 8006b9c:	edd1 2a00 	vldr	s5, [r1]
 8006ba0:	ed97 7a00 	vldr	s14, [r7]
 8006ba4:	edd4 0a01 	vldr	s1, [r4, #4]
 8006ba8:	ed96 6a01 	vldr	s12, [r6, #4]
 8006bac:	edd2 5a00 	vldr	s11, [r2]
 8006bb0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8006bb4:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006bb8:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006bbc:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006bc0:	ee38 4a44 	vsub.f32	s8, s16, s8
 8006bc4:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006bc8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006bcc:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006bd0:	ee75 8a69 	vsub.f32	s17, s10, s19
 8006bd4:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006bd8:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006bdc:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006be0:	ee30 2a06 	vadd.f32	s4, s0, s12
 8006be4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006be8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006bec:	ee32 9a08 	vadd.f32	s18, s4, s16
 8006bf0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8006bf4:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006bf8:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006bfc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006c00:	ee32 1a87 	vadd.f32	s2, s5, s14
 8006c04:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006c08:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006c0c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006c10:	ee73 0a29 	vadd.f32	s1, s6, s19
 8006c14:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006c18:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006c1c:	ee32 7a64 	vsub.f32	s14, s4, s9
 8006c20:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8006c24:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006c28:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006c2c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8006c30:	ee74 3a22 	vadd.f32	s7, s8, s5
 8006c34:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8006c38:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006c3c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006c40:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8006c44:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006c48:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006c4c:	ee72 4a24 	vadd.f32	s9, s4, s9
 8006c50:	ee30 4a60 	vsub.f32	s8, s0, s1
 8006c54:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006c58:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006c5c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006c60:	ee36 6a03 	vadd.f32	s12, s12, s6
 8006c64:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006c68:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8006c6c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8006c70:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8006c74:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8006c78:	ee39 1a01 	vadd.f32	s2, s18, s2
 8006c7c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8006c80:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8006c84:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8006c88:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8006c8c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8006c90:	ee35 3a03 	vadd.f32	s6, s10, s6
 8006c94:	ee72 6a66 	vsub.f32	s13, s4, s13
 8006c98:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8006c9c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8006ca0:	ed9d 4a02 	vldr	s8, [sp, #8]
 8006ca4:	ed8e 1a01 	vstr	s2, [lr, #4]
 8006ca8:	ee77 3a63 	vsub.f32	s7, s14, s7
 8006cac:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006cb0:	ed9d 7a01 	vldr	s14, [sp, #4]
 8006cb4:	ed86 3a00 	vstr	s6, [r6]
 8006cb8:	ee30 9a89 	vadd.f32	s18, s1, s18
 8006cbc:	ee32 2a05 	vadd.f32	s4, s4, s10
 8006cc0:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8006cc4:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8006cc8:	ee67 2a22 	vmul.f32	s5, s14, s5
 8006ccc:	ee64 1a00 	vmul.f32	s3, s8, s0
 8006cd0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006cd4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8006cd8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8006cdc:	ee64 8a28 	vmul.f32	s17, s8, s17
 8006ce0:	ed9d 4a00 	vldr	s8, [sp]
 8006ce4:	edc6 6a01 	vstr	s13, [r6, #4]
 8006ce8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006cec:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8006cf0:	ee64 9a29 	vmul.f32	s19, s8, s19
 8006cf4:	ee24 4a25 	vmul.f32	s8, s8, s11
 8006cf8:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006cfc:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006d00:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8006d04:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8006d08:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006d0c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8006d10:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8006d14:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8006d18:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006d1c:	ee30 0a68 	vsub.f32	s0, s0, s17
 8006d20:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8006d24:	ee70 0a84 	vadd.f32	s1, s1, s8
 8006d28:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006d2c:	44dc      	add	ip, fp
 8006d2e:	45e1      	cmp	r9, ip
 8006d30:	ed84 9a00 	vstr	s18, [r4]
 8006d34:	edc4 3a01 	vstr	s7, [r4, #4]
 8006d38:	449e      	add	lr, r3
 8006d3a:	ed02 7a01 	vstr	s14, [r2, #-4]
 8006d3e:	edc2 2a00 	vstr	s5, [r2]
 8006d42:	441e      	add	r6, r3
 8006d44:	ed85 2a00 	vstr	s4, [r5]
 8006d48:	ed85 8a01 	vstr	s16, [r5, #4]
 8006d4c:	441c      	add	r4, r3
 8006d4e:	ed47 1a01 	vstr	s3, [r7, #-4]
 8006d52:	ed87 0a00 	vstr	s0, [r7]
 8006d56:	441a      	add	r2, r3
 8006d58:	ed41 4a01 	vstr	s9, [r1, #-4]
 8006d5c:	edc1 9a00 	vstr	s19, [r1]
 8006d60:	441d      	add	r5, r3
 8006d62:	edc0 0a00 	vstr	s1, [r0]
 8006d66:	441f      	add	r7, r3
 8006d68:	ed80 6a01 	vstr	s12, [r0, #4]
 8006d6c:	4419      	add	r1, r3
 8006d6e:	4418      	add	r0, r3
 8006d70:	f63f aeea 	bhi.w	8006b48 <arm_radix8_butterfly_f32+0x334>
 8006d74:	9a03      	ldr	r2, [sp, #12]
 8006d76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d78:	440a      	add	r2, r1
 8006d7a:	9203      	str	r2, [sp, #12]
 8006d7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006d7e:	9a05      	ldr	r2, [sp, #20]
 8006d80:	440a      	add	r2, r1
 8006d82:	9205      	str	r2, [sp, #20]
 8006d84:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006d86:	9a04      	ldr	r2, [sp, #16]
 8006d88:	440a      	add	r2, r1
 8006d8a:	9204      	str	r2, [sp, #16]
 8006d8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d8e:	9a06      	ldr	r2, [sp, #24]
 8006d90:	440a      	add	r2, r1
 8006d92:	9206      	str	r2, [sp, #24]
 8006d94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d98:	440a      	add	r2, r1
 8006d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006d9e:	9a08      	ldr	r2, [sp, #32]
 8006da0:	440a      	add	r2, r1
 8006da2:	9208      	str	r2, [sp, #32]
 8006da4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006da6:	9a07      	ldr	r2, [sp, #28]
 8006da8:	440a      	add	r2, r1
 8006daa:	9207      	str	r2, [sp, #28]
 8006dac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006db0:	f108 0801 	add.w	r8, r8, #1
 8006db4:	3208      	adds	r2, #8
 8006db6:	4588      	cmp	r8, r1
 8006db8:	920a      	str	r2, [sp, #40]	; 0x28
 8006dba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dbc:	f47f ae75 	bne.w	8006aaa <arm_radix8_butterfly_f32+0x296>
 8006dc0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	46c3      	mov	fp, r8
 8006dc8:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8006dcc:	e532      	b.n	8006834 <arm_radix8_butterfly_f32+0x20>
 8006dce:	b01d      	add	sp, #116	; 0x74
 8006dd0:	ecbd 8b10 	vpop	{d8-d15}
 8006dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006dd8 <__errno>:
 8006dd8:	4b01      	ldr	r3, [pc, #4]	; (8006de0 <__errno+0x8>)
 8006dda:	6818      	ldr	r0, [r3, #0]
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	2000000c 	.word	0x2000000c

08006de4 <__libc_init_array>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	4e0d      	ldr	r6, [pc, #52]	; (8006e1c <__libc_init_array+0x38>)
 8006de8:	4c0d      	ldr	r4, [pc, #52]	; (8006e20 <__libc_init_array+0x3c>)
 8006dea:	1ba4      	subs	r4, r4, r6
 8006dec:	10a4      	asrs	r4, r4, #2
 8006dee:	2500      	movs	r5, #0
 8006df0:	42a5      	cmp	r5, r4
 8006df2:	d109      	bne.n	8006e08 <__libc_init_array+0x24>
 8006df4:	4e0b      	ldr	r6, [pc, #44]	; (8006e24 <__libc_init_array+0x40>)
 8006df6:	4c0c      	ldr	r4, [pc, #48]	; (8006e28 <__libc_init_array+0x44>)
 8006df8:	f000 fe40 	bl	8007a7c <_init>
 8006dfc:	1ba4      	subs	r4, r4, r6
 8006dfe:	10a4      	asrs	r4, r4, #2
 8006e00:	2500      	movs	r5, #0
 8006e02:	42a5      	cmp	r5, r4
 8006e04:	d105      	bne.n	8006e12 <__libc_init_array+0x2e>
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e0c:	4798      	blx	r3
 8006e0e:	3501      	adds	r5, #1
 8006e10:	e7ee      	b.n	8006df0 <__libc_init_array+0xc>
 8006e12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e16:	4798      	blx	r3
 8006e18:	3501      	adds	r5, #1
 8006e1a:	e7f2      	b.n	8006e02 <__libc_init_array+0x1e>
 8006e1c:	0801af98 	.word	0x0801af98
 8006e20:	0801af98 	.word	0x0801af98
 8006e24:	0801af98 	.word	0x0801af98
 8006e28:	0801af9c 	.word	0x0801af9c

08006e2c <memset>:
 8006e2c:	4402      	add	r2, r0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d100      	bne.n	8006e36 <memset+0xa>
 8006e34:	4770      	bx	lr
 8006e36:	f803 1b01 	strb.w	r1, [r3], #1
 8006e3a:	e7f9      	b.n	8006e30 <memset+0x4>

08006e3c <siprintf>:
 8006e3c:	b40e      	push	{r1, r2, r3}
 8006e3e:	b500      	push	{lr}
 8006e40:	b09c      	sub	sp, #112	; 0x70
 8006e42:	ab1d      	add	r3, sp, #116	; 0x74
 8006e44:	9002      	str	r0, [sp, #8]
 8006e46:	9006      	str	r0, [sp, #24]
 8006e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e4c:	4809      	ldr	r0, [pc, #36]	; (8006e74 <siprintf+0x38>)
 8006e4e:	9107      	str	r1, [sp, #28]
 8006e50:	9104      	str	r1, [sp, #16]
 8006e52:	4909      	ldr	r1, [pc, #36]	; (8006e78 <siprintf+0x3c>)
 8006e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e58:	9105      	str	r1, [sp, #20]
 8006e5a:	6800      	ldr	r0, [r0, #0]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	a902      	add	r1, sp, #8
 8006e60:	f000 f866 	bl	8006f30 <_svfiprintf_r>
 8006e64:	9b02      	ldr	r3, [sp, #8]
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	b01c      	add	sp, #112	; 0x70
 8006e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e70:	b003      	add	sp, #12
 8006e72:	4770      	bx	lr
 8006e74:	2000000c 	.word	0x2000000c
 8006e78:	ffff0208 	.word	0xffff0208

08006e7c <__ssputs_r>:
 8006e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e80:	688e      	ldr	r6, [r1, #8]
 8006e82:	429e      	cmp	r6, r3
 8006e84:	4682      	mov	sl, r0
 8006e86:	460c      	mov	r4, r1
 8006e88:	4690      	mov	r8, r2
 8006e8a:	4699      	mov	r9, r3
 8006e8c:	d837      	bhi.n	8006efe <__ssputs_r+0x82>
 8006e8e:	898a      	ldrh	r2, [r1, #12]
 8006e90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e94:	d031      	beq.n	8006efa <__ssputs_r+0x7e>
 8006e96:	6825      	ldr	r5, [r4, #0]
 8006e98:	6909      	ldr	r1, [r1, #16]
 8006e9a:	1a6f      	subs	r7, r5, r1
 8006e9c:	6965      	ldr	r5, [r4, #20]
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ea4:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ea8:	f109 0301 	add.w	r3, r9, #1
 8006eac:	443b      	add	r3, r7
 8006eae:	429d      	cmp	r5, r3
 8006eb0:	bf38      	it	cc
 8006eb2:	461d      	movcc	r5, r3
 8006eb4:	0553      	lsls	r3, r2, #21
 8006eb6:	d530      	bpl.n	8006f1a <__ssputs_r+0x9e>
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f000 fb2b 	bl	8007514 <_malloc_r>
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	b950      	cbnz	r0, 8006ed8 <__ssputs_r+0x5c>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	f8ca 3000 	str.w	r3, [sl]
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ece:	81a3      	strh	r3, [r4, #12]
 8006ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed8:	463a      	mov	r2, r7
 8006eda:	6921      	ldr	r1, [r4, #16]
 8006edc:	f000 faa8 	bl	8007430 <memcpy>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eea:	81a3      	strh	r3, [r4, #12]
 8006eec:	6126      	str	r6, [r4, #16]
 8006eee:	6165      	str	r5, [r4, #20]
 8006ef0:	443e      	add	r6, r7
 8006ef2:	1bed      	subs	r5, r5, r7
 8006ef4:	6026      	str	r6, [r4, #0]
 8006ef6:	60a5      	str	r5, [r4, #8]
 8006ef8:	464e      	mov	r6, r9
 8006efa:	454e      	cmp	r6, r9
 8006efc:	d900      	bls.n	8006f00 <__ssputs_r+0x84>
 8006efe:	464e      	mov	r6, r9
 8006f00:	4632      	mov	r2, r6
 8006f02:	4641      	mov	r1, r8
 8006f04:	6820      	ldr	r0, [r4, #0]
 8006f06:	f000 fa9e 	bl	8007446 <memmove>
 8006f0a:	68a3      	ldr	r3, [r4, #8]
 8006f0c:	1b9b      	subs	r3, r3, r6
 8006f0e:	60a3      	str	r3, [r4, #8]
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	441e      	add	r6, r3
 8006f14:	6026      	str	r6, [r4, #0]
 8006f16:	2000      	movs	r0, #0
 8006f18:	e7dc      	b.n	8006ed4 <__ssputs_r+0x58>
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	f000 fb54 	bl	80075c8 <_realloc_r>
 8006f20:	4606      	mov	r6, r0
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d1e2      	bne.n	8006eec <__ssputs_r+0x70>
 8006f26:	6921      	ldr	r1, [r4, #16]
 8006f28:	4650      	mov	r0, sl
 8006f2a:	f000 faa5 	bl	8007478 <_free_r>
 8006f2e:	e7c8      	b.n	8006ec2 <__ssputs_r+0x46>

08006f30 <_svfiprintf_r>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	461d      	mov	r5, r3
 8006f36:	898b      	ldrh	r3, [r1, #12]
 8006f38:	061f      	lsls	r7, r3, #24
 8006f3a:	b09d      	sub	sp, #116	; 0x74
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	4616      	mov	r6, r2
 8006f42:	d50f      	bpl.n	8006f64 <_svfiprintf_r+0x34>
 8006f44:	690b      	ldr	r3, [r1, #16]
 8006f46:	b96b      	cbnz	r3, 8006f64 <_svfiprintf_r+0x34>
 8006f48:	2140      	movs	r1, #64	; 0x40
 8006f4a:	f000 fae3 	bl	8007514 <_malloc_r>
 8006f4e:	6020      	str	r0, [r4, #0]
 8006f50:	6120      	str	r0, [r4, #16]
 8006f52:	b928      	cbnz	r0, 8006f60 <_svfiprintf_r+0x30>
 8006f54:	230c      	movs	r3, #12
 8006f56:	f8c8 3000 	str.w	r3, [r8]
 8006f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5e:	e0c8      	b.n	80070f2 <_svfiprintf_r+0x1c2>
 8006f60:	2340      	movs	r3, #64	; 0x40
 8006f62:	6163      	str	r3, [r4, #20]
 8006f64:	2300      	movs	r3, #0
 8006f66:	9309      	str	r3, [sp, #36]	; 0x24
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f6e:	2330      	movs	r3, #48	; 0x30
 8006f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f74:	9503      	str	r5, [sp, #12]
 8006f76:	f04f 0b01 	mov.w	fp, #1
 8006f7a:	4637      	mov	r7, r6
 8006f7c:	463d      	mov	r5, r7
 8006f7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f82:	b10b      	cbz	r3, 8006f88 <_svfiprintf_r+0x58>
 8006f84:	2b25      	cmp	r3, #37	; 0x25
 8006f86:	d13e      	bne.n	8007006 <_svfiprintf_r+0xd6>
 8006f88:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f8c:	d00b      	beq.n	8006fa6 <_svfiprintf_r+0x76>
 8006f8e:	4653      	mov	r3, sl
 8006f90:	4632      	mov	r2, r6
 8006f92:	4621      	mov	r1, r4
 8006f94:	4640      	mov	r0, r8
 8006f96:	f7ff ff71 	bl	8006e7c <__ssputs_r>
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f000 80a4 	beq.w	80070e8 <_svfiprintf_r+0x1b8>
 8006fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa2:	4453      	add	r3, sl
 8006fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa6:	783b      	ldrb	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 809d 	beq.w	80070e8 <_svfiprintf_r+0x1b8>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	9307      	str	r3, [sp, #28]
 8006fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8006fc2:	462f      	mov	r7, r5
 8006fc4:	2205      	movs	r2, #5
 8006fc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006fca:	4850      	ldr	r0, [pc, #320]	; (800710c <_svfiprintf_r+0x1dc>)
 8006fcc:	f7f9 f968 	bl	80002a0 <memchr>
 8006fd0:	9b04      	ldr	r3, [sp, #16]
 8006fd2:	b9d0      	cbnz	r0, 800700a <_svfiprintf_r+0xda>
 8006fd4:	06d9      	lsls	r1, r3, #27
 8006fd6:	bf44      	itt	mi
 8006fd8:	2220      	movmi	r2, #32
 8006fda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fde:	071a      	lsls	r2, r3, #28
 8006fe0:	bf44      	itt	mi
 8006fe2:	222b      	movmi	r2, #43	; 0x2b
 8006fe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fe8:	782a      	ldrb	r2, [r5, #0]
 8006fea:	2a2a      	cmp	r2, #42	; 0x2a
 8006fec:	d015      	beq.n	800701a <_svfiprintf_r+0xea>
 8006fee:	9a07      	ldr	r2, [sp, #28]
 8006ff0:	462f      	mov	r7, r5
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	250a      	movs	r5, #10
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ffc:	3b30      	subs	r3, #48	; 0x30
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	d94d      	bls.n	800709e <_svfiprintf_r+0x16e>
 8007002:	b1b8      	cbz	r0, 8007034 <_svfiprintf_r+0x104>
 8007004:	e00f      	b.n	8007026 <_svfiprintf_r+0xf6>
 8007006:	462f      	mov	r7, r5
 8007008:	e7b8      	b.n	8006f7c <_svfiprintf_r+0x4c>
 800700a:	4a40      	ldr	r2, [pc, #256]	; (800710c <_svfiprintf_r+0x1dc>)
 800700c:	1a80      	subs	r0, r0, r2
 800700e:	fa0b f000 	lsl.w	r0, fp, r0
 8007012:	4318      	orrs	r0, r3
 8007014:	9004      	str	r0, [sp, #16]
 8007016:	463d      	mov	r5, r7
 8007018:	e7d3      	b.n	8006fc2 <_svfiprintf_r+0x92>
 800701a:	9a03      	ldr	r2, [sp, #12]
 800701c:	1d11      	adds	r1, r2, #4
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	9103      	str	r1, [sp, #12]
 8007022:	2a00      	cmp	r2, #0
 8007024:	db01      	blt.n	800702a <_svfiprintf_r+0xfa>
 8007026:	9207      	str	r2, [sp, #28]
 8007028:	e004      	b.n	8007034 <_svfiprintf_r+0x104>
 800702a:	4252      	negs	r2, r2
 800702c:	f043 0302 	orr.w	r3, r3, #2
 8007030:	9207      	str	r2, [sp, #28]
 8007032:	9304      	str	r3, [sp, #16]
 8007034:	783b      	ldrb	r3, [r7, #0]
 8007036:	2b2e      	cmp	r3, #46	; 0x2e
 8007038:	d10c      	bne.n	8007054 <_svfiprintf_r+0x124>
 800703a:	787b      	ldrb	r3, [r7, #1]
 800703c:	2b2a      	cmp	r3, #42	; 0x2a
 800703e:	d133      	bne.n	80070a8 <_svfiprintf_r+0x178>
 8007040:	9b03      	ldr	r3, [sp, #12]
 8007042:	1d1a      	adds	r2, r3, #4
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	9203      	str	r2, [sp, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	bfb8      	it	lt
 800704c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007050:	3702      	adds	r7, #2
 8007052:	9305      	str	r3, [sp, #20]
 8007054:	4d2e      	ldr	r5, [pc, #184]	; (8007110 <_svfiprintf_r+0x1e0>)
 8007056:	7839      	ldrb	r1, [r7, #0]
 8007058:	2203      	movs	r2, #3
 800705a:	4628      	mov	r0, r5
 800705c:	f7f9 f920 	bl	80002a0 <memchr>
 8007060:	b138      	cbz	r0, 8007072 <_svfiprintf_r+0x142>
 8007062:	2340      	movs	r3, #64	; 0x40
 8007064:	1b40      	subs	r0, r0, r5
 8007066:	fa03 f000 	lsl.w	r0, r3, r0
 800706a:	9b04      	ldr	r3, [sp, #16]
 800706c:	4303      	orrs	r3, r0
 800706e:	3701      	adds	r7, #1
 8007070:	9304      	str	r3, [sp, #16]
 8007072:	7839      	ldrb	r1, [r7, #0]
 8007074:	4827      	ldr	r0, [pc, #156]	; (8007114 <_svfiprintf_r+0x1e4>)
 8007076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800707a:	2206      	movs	r2, #6
 800707c:	1c7e      	adds	r6, r7, #1
 800707e:	f7f9 f90f 	bl	80002a0 <memchr>
 8007082:	2800      	cmp	r0, #0
 8007084:	d038      	beq.n	80070f8 <_svfiprintf_r+0x1c8>
 8007086:	4b24      	ldr	r3, [pc, #144]	; (8007118 <_svfiprintf_r+0x1e8>)
 8007088:	bb13      	cbnz	r3, 80070d0 <_svfiprintf_r+0x1a0>
 800708a:	9b03      	ldr	r3, [sp, #12]
 800708c:	3307      	adds	r3, #7
 800708e:	f023 0307 	bic.w	r3, r3, #7
 8007092:	3308      	adds	r3, #8
 8007094:	9303      	str	r3, [sp, #12]
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	444b      	add	r3, r9
 800709a:	9309      	str	r3, [sp, #36]	; 0x24
 800709c:	e76d      	b.n	8006f7a <_svfiprintf_r+0x4a>
 800709e:	fb05 3202 	mla	r2, r5, r2, r3
 80070a2:	2001      	movs	r0, #1
 80070a4:	460f      	mov	r7, r1
 80070a6:	e7a6      	b.n	8006ff6 <_svfiprintf_r+0xc6>
 80070a8:	2300      	movs	r3, #0
 80070aa:	3701      	adds	r7, #1
 80070ac:	9305      	str	r3, [sp, #20]
 80070ae:	4619      	mov	r1, r3
 80070b0:	250a      	movs	r5, #10
 80070b2:	4638      	mov	r0, r7
 80070b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070b8:	3a30      	subs	r2, #48	; 0x30
 80070ba:	2a09      	cmp	r2, #9
 80070bc:	d903      	bls.n	80070c6 <_svfiprintf_r+0x196>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0c8      	beq.n	8007054 <_svfiprintf_r+0x124>
 80070c2:	9105      	str	r1, [sp, #20]
 80070c4:	e7c6      	b.n	8007054 <_svfiprintf_r+0x124>
 80070c6:	fb05 2101 	mla	r1, r5, r1, r2
 80070ca:	2301      	movs	r3, #1
 80070cc:	4607      	mov	r7, r0
 80070ce:	e7f0      	b.n	80070b2 <_svfiprintf_r+0x182>
 80070d0:	ab03      	add	r3, sp, #12
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	4622      	mov	r2, r4
 80070d6:	4b11      	ldr	r3, [pc, #68]	; (800711c <_svfiprintf_r+0x1ec>)
 80070d8:	a904      	add	r1, sp, #16
 80070da:	4640      	mov	r0, r8
 80070dc:	f3af 8000 	nop.w
 80070e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80070e4:	4681      	mov	r9, r0
 80070e6:	d1d6      	bne.n	8007096 <_svfiprintf_r+0x166>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	065b      	lsls	r3, r3, #25
 80070ec:	f53f af35 	bmi.w	8006f5a <_svfiprintf_r+0x2a>
 80070f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070f2:	b01d      	add	sp, #116	; 0x74
 80070f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f8:	ab03      	add	r3, sp, #12
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	4622      	mov	r2, r4
 80070fe:	4b07      	ldr	r3, [pc, #28]	; (800711c <_svfiprintf_r+0x1ec>)
 8007100:	a904      	add	r1, sp, #16
 8007102:	4640      	mov	r0, r8
 8007104:	f000 f882 	bl	800720c <_printf_i>
 8007108:	e7ea      	b.n	80070e0 <_svfiprintf_r+0x1b0>
 800710a:	bf00      	nop
 800710c:	0801af50 	.word	0x0801af50
 8007110:	0801af56 	.word	0x0801af56
 8007114:	0801af5a 	.word	0x0801af5a
 8007118:	00000000 	.word	0x00000000
 800711c:	08006e7d 	.word	0x08006e7d

08007120 <_printf_common>:
 8007120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	4691      	mov	r9, r2
 8007126:	461f      	mov	r7, r3
 8007128:	688a      	ldr	r2, [r1, #8]
 800712a:	690b      	ldr	r3, [r1, #16]
 800712c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007130:	4293      	cmp	r3, r2
 8007132:	bfb8      	it	lt
 8007134:	4613      	movlt	r3, r2
 8007136:	f8c9 3000 	str.w	r3, [r9]
 800713a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800713e:	4606      	mov	r6, r0
 8007140:	460c      	mov	r4, r1
 8007142:	b112      	cbz	r2, 800714a <_printf_common+0x2a>
 8007144:	3301      	adds	r3, #1
 8007146:	f8c9 3000 	str.w	r3, [r9]
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	0699      	lsls	r1, r3, #26
 800714e:	bf42      	ittt	mi
 8007150:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007154:	3302      	addmi	r3, #2
 8007156:	f8c9 3000 	strmi.w	r3, [r9]
 800715a:	6825      	ldr	r5, [r4, #0]
 800715c:	f015 0506 	ands.w	r5, r5, #6
 8007160:	d107      	bne.n	8007172 <_printf_common+0x52>
 8007162:	f104 0a19 	add.w	sl, r4, #25
 8007166:	68e3      	ldr	r3, [r4, #12]
 8007168:	f8d9 2000 	ldr.w	r2, [r9]
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	42ab      	cmp	r3, r5
 8007170:	dc28      	bgt.n	80071c4 <_printf_common+0xa4>
 8007172:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007176:	6822      	ldr	r2, [r4, #0]
 8007178:	3300      	adds	r3, #0
 800717a:	bf18      	it	ne
 800717c:	2301      	movne	r3, #1
 800717e:	0692      	lsls	r2, r2, #26
 8007180:	d42d      	bmi.n	80071de <_printf_common+0xbe>
 8007182:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007186:	4639      	mov	r1, r7
 8007188:	4630      	mov	r0, r6
 800718a:	47c0      	blx	r8
 800718c:	3001      	adds	r0, #1
 800718e:	d020      	beq.n	80071d2 <_printf_common+0xb2>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	68e5      	ldr	r5, [r4, #12]
 8007194:	f8d9 2000 	ldr.w	r2, [r9]
 8007198:	f003 0306 	and.w	r3, r3, #6
 800719c:	2b04      	cmp	r3, #4
 800719e:	bf08      	it	eq
 80071a0:	1aad      	subeq	r5, r5, r2
 80071a2:	68a3      	ldr	r3, [r4, #8]
 80071a4:	6922      	ldr	r2, [r4, #16]
 80071a6:	bf0c      	ite	eq
 80071a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071ac:	2500      	movne	r5, #0
 80071ae:	4293      	cmp	r3, r2
 80071b0:	bfc4      	itt	gt
 80071b2:	1a9b      	subgt	r3, r3, r2
 80071b4:	18ed      	addgt	r5, r5, r3
 80071b6:	f04f 0900 	mov.w	r9, #0
 80071ba:	341a      	adds	r4, #26
 80071bc:	454d      	cmp	r5, r9
 80071be:	d11a      	bne.n	80071f6 <_printf_common+0xd6>
 80071c0:	2000      	movs	r0, #0
 80071c2:	e008      	b.n	80071d6 <_printf_common+0xb6>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4652      	mov	r2, sl
 80071c8:	4639      	mov	r1, r7
 80071ca:	4630      	mov	r0, r6
 80071cc:	47c0      	blx	r8
 80071ce:	3001      	adds	r0, #1
 80071d0:	d103      	bne.n	80071da <_printf_common+0xba>
 80071d2:	f04f 30ff 	mov.w	r0, #4294967295
 80071d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071da:	3501      	adds	r5, #1
 80071dc:	e7c3      	b.n	8007166 <_printf_common+0x46>
 80071de:	18e1      	adds	r1, r4, r3
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	2030      	movs	r0, #48	; 0x30
 80071e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071e8:	4422      	add	r2, r4
 80071ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071f2:	3302      	adds	r3, #2
 80071f4:	e7c5      	b.n	8007182 <_printf_common+0x62>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4622      	mov	r2, r4
 80071fa:	4639      	mov	r1, r7
 80071fc:	4630      	mov	r0, r6
 80071fe:	47c0      	blx	r8
 8007200:	3001      	adds	r0, #1
 8007202:	d0e6      	beq.n	80071d2 <_printf_common+0xb2>
 8007204:	f109 0901 	add.w	r9, r9, #1
 8007208:	e7d8      	b.n	80071bc <_printf_common+0x9c>
	...

0800720c <_printf_i>:
 800720c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007210:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007214:	460c      	mov	r4, r1
 8007216:	7e09      	ldrb	r1, [r1, #24]
 8007218:	b085      	sub	sp, #20
 800721a:	296e      	cmp	r1, #110	; 0x6e
 800721c:	4617      	mov	r7, r2
 800721e:	4606      	mov	r6, r0
 8007220:	4698      	mov	r8, r3
 8007222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007224:	f000 80b3 	beq.w	800738e <_printf_i+0x182>
 8007228:	d822      	bhi.n	8007270 <_printf_i+0x64>
 800722a:	2963      	cmp	r1, #99	; 0x63
 800722c:	d036      	beq.n	800729c <_printf_i+0x90>
 800722e:	d80a      	bhi.n	8007246 <_printf_i+0x3a>
 8007230:	2900      	cmp	r1, #0
 8007232:	f000 80b9 	beq.w	80073a8 <_printf_i+0x19c>
 8007236:	2958      	cmp	r1, #88	; 0x58
 8007238:	f000 8083 	beq.w	8007342 <_printf_i+0x136>
 800723c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007240:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007244:	e032      	b.n	80072ac <_printf_i+0xa0>
 8007246:	2964      	cmp	r1, #100	; 0x64
 8007248:	d001      	beq.n	800724e <_printf_i+0x42>
 800724a:	2969      	cmp	r1, #105	; 0x69
 800724c:	d1f6      	bne.n	800723c <_printf_i+0x30>
 800724e:	6820      	ldr	r0, [r4, #0]
 8007250:	6813      	ldr	r3, [r2, #0]
 8007252:	0605      	lsls	r5, r0, #24
 8007254:	f103 0104 	add.w	r1, r3, #4
 8007258:	d52a      	bpl.n	80072b0 <_printf_i+0xa4>
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	da03      	bge.n	800726a <_printf_i+0x5e>
 8007262:	222d      	movs	r2, #45	; 0x2d
 8007264:	425b      	negs	r3, r3
 8007266:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800726a:	486f      	ldr	r0, [pc, #444]	; (8007428 <_printf_i+0x21c>)
 800726c:	220a      	movs	r2, #10
 800726e:	e039      	b.n	80072e4 <_printf_i+0xd8>
 8007270:	2973      	cmp	r1, #115	; 0x73
 8007272:	f000 809d 	beq.w	80073b0 <_printf_i+0x1a4>
 8007276:	d808      	bhi.n	800728a <_printf_i+0x7e>
 8007278:	296f      	cmp	r1, #111	; 0x6f
 800727a:	d020      	beq.n	80072be <_printf_i+0xb2>
 800727c:	2970      	cmp	r1, #112	; 0x70
 800727e:	d1dd      	bne.n	800723c <_printf_i+0x30>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	f043 0320 	orr.w	r3, r3, #32
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	e003      	b.n	8007292 <_printf_i+0x86>
 800728a:	2975      	cmp	r1, #117	; 0x75
 800728c:	d017      	beq.n	80072be <_printf_i+0xb2>
 800728e:	2978      	cmp	r1, #120	; 0x78
 8007290:	d1d4      	bne.n	800723c <_printf_i+0x30>
 8007292:	2378      	movs	r3, #120	; 0x78
 8007294:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007298:	4864      	ldr	r0, [pc, #400]	; (800742c <_printf_i+0x220>)
 800729a:	e055      	b.n	8007348 <_printf_i+0x13c>
 800729c:	6813      	ldr	r3, [r2, #0]
 800729e:	1d19      	adds	r1, r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6011      	str	r1, [r2, #0]
 80072a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072ac:	2301      	movs	r3, #1
 80072ae:	e08c      	b.n	80073ca <_printf_i+0x1be>
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6011      	str	r1, [r2, #0]
 80072b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072b8:	bf18      	it	ne
 80072ba:	b21b      	sxthne	r3, r3
 80072bc:	e7cf      	b.n	800725e <_printf_i+0x52>
 80072be:	6813      	ldr	r3, [r2, #0]
 80072c0:	6825      	ldr	r5, [r4, #0]
 80072c2:	1d18      	adds	r0, r3, #4
 80072c4:	6010      	str	r0, [r2, #0]
 80072c6:	0628      	lsls	r0, r5, #24
 80072c8:	d501      	bpl.n	80072ce <_printf_i+0xc2>
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	e002      	b.n	80072d4 <_printf_i+0xc8>
 80072ce:	0668      	lsls	r0, r5, #25
 80072d0:	d5fb      	bpl.n	80072ca <_printf_i+0xbe>
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	4854      	ldr	r0, [pc, #336]	; (8007428 <_printf_i+0x21c>)
 80072d6:	296f      	cmp	r1, #111	; 0x6f
 80072d8:	bf14      	ite	ne
 80072da:	220a      	movne	r2, #10
 80072dc:	2208      	moveq	r2, #8
 80072de:	2100      	movs	r1, #0
 80072e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072e4:	6865      	ldr	r5, [r4, #4]
 80072e6:	60a5      	str	r5, [r4, #8]
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	f2c0 8095 	blt.w	8007418 <_printf_i+0x20c>
 80072ee:	6821      	ldr	r1, [r4, #0]
 80072f0:	f021 0104 	bic.w	r1, r1, #4
 80072f4:	6021      	str	r1, [r4, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d13d      	bne.n	8007376 <_printf_i+0x16a>
 80072fa:	2d00      	cmp	r5, #0
 80072fc:	f040 808e 	bne.w	800741c <_printf_i+0x210>
 8007300:	4665      	mov	r5, ip
 8007302:	2a08      	cmp	r2, #8
 8007304:	d10b      	bne.n	800731e <_printf_i+0x112>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	07db      	lsls	r3, r3, #31
 800730a:	d508      	bpl.n	800731e <_printf_i+0x112>
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	6862      	ldr	r2, [r4, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	bfde      	ittt	le
 8007314:	2330      	movle	r3, #48	; 0x30
 8007316:	f805 3c01 	strble.w	r3, [r5, #-1]
 800731a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800731e:	ebac 0305 	sub.w	r3, ip, r5
 8007322:	6123      	str	r3, [r4, #16]
 8007324:	f8cd 8000 	str.w	r8, [sp]
 8007328:	463b      	mov	r3, r7
 800732a:	aa03      	add	r2, sp, #12
 800732c:	4621      	mov	r1, r4
 800732e:	4630      	mov	r0, r6
 8007330:	f7ff fef6 	bl	8007120 <_printf_common>
 8007334:	3001      	adds	r0, #1
 8007336:	d14d      	bne.n	80073d4 <_printf_i+0x1c8>
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	b005      	add	sp, #20
 800733e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007342:	4839      	ldr	r0, [pc, #228]	; (8007428 <_printf_i+0x21c>)
 8007344:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007348:	6813      	ldr	r3, [r2, #0]
 800734a:	6821      	ldr	r1, [r4, #0]
 800734c:	1d1d      	adds	r5, r3, #4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6015      	str	r5, [r2, #0]
 8007352:	060a      	lsls	r2, r1, #24
 8007354:	d50b      	bpl.n	800736e <_printf_i+0x162>
 8007356:	07ca      	lsls	r2, r1, #31
 8007358:	bf44      	itt	mi
 800735a:	f041 0120 	orrmi.w	r1, r1, #32
 800735e:	6021      	strmi	r1, [r4, #0]
 8007360:	b91b      	cbnz	r3, 800736a <_printf_i+0x15e>
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	f022 0220 	bic.w	r2, r2, #32
 8007368:	6022      	str	r2, [r4, #0]
 800736a:	2210      	movs	r2, #16
 800736c:	e7b7      	b.n	80072de <_printf_i+0xd2>
 800736e:	064d      	lsls	r5, r1, #25
 8007370:	bf48      	it	mi
 8007372:	b29b      	uxthmi	r3, r3
 8007374:	e7ef      	b.n	8007356 <_printf_i+0x14a>
 8007376:	4665      	mov	r5, ip
 8007378:	fbb3 f1f2 	udiv	r1, r3, r2
 800737c:	fb02 3311 	mls	r3, r2, r1, r3
 8007380:	5cc3      	ldrb	r3, [r0, r3]
 8007382:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007386:	460b      	mov	r3, r1
 8007388:	2900      	cmp	r1, #0
 800738a:	d1f5      	bne.n	8007378 <_printf_i+0x16c>
 800738c:	e7b9      	b.n	8007302 <_printf_i+0xf6>
 800738e:	6813      	ldr	r3, [r2, #0]
 8007390:	6825      	ldr	r5, [r4, #0]
 8007392:	6961      	ldr	r1, [r4, #20]
 8007394:	1d18      	adds	r0, r3, #4
 8007396:	6010      	str	r0, [r2, #0]
 8007398:	0628      	lsls	r0, r5, #24
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	d501      	bpl.n	80073a2 <_printf_i+0x196>
 800739e:	6019      	str	r1, [r3, #0]
 80073a0:	e002      	b.n	80073a8 <_printf_i+0x19c>
 80073a2:	066a      	lsls	r2, r5, #25
 80073a4:	d5fb      	bpl.n	800739e <_printf_i+0x192>
 80073a6:	8019      	strh	r1, [r3, #0]
 80073a8:	2300      	movs	r3, #0
 80073aa:	6123      	str	r3, [r4, #16]
 80073ac:	4665      	mov	r5, ip
 80073ae:	e7b9      	b.n	8007324 <_printf_i+0x118>
 80073b0:	6813      	ldr	r3, [r2, #0]
 80073b2:	1d19      	adds	r1, r3, #4
 80073b4:	6011      	str	r1, [r2, #0]
 80073b6:	681d      	ldr	r5, [r3, #0]
 80073b8:	6862      	ldr	r2, [r4, #4]
 80073ba:	2100      	movs	r1, #0
 80073bc:	4628      	mov	r0, r5
 80073be:	f7f8 ff6f 	bl	80002a0 <memchr>
 80073c2:	b108      	cbz	r0, 80073c8 <_printf_i+0x1bc>
 80073c4:	1b40      	subs	r0, r0, r5
 80073c6:	6060      	str	r0, [r4, #4]
 80073c8:	6863      	ldr	r3, [r4, #4]
 80073ca:	6123      	str	r3, [r4, #16]
 80073cc:	2300      	movs	r3, #0
 80073ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d2:	e7a7      	b.n	8007324 <_printf_i+0x118>
 80073d4:	6923      	ldr	r3, [r4, #16]
 80073d6:	462a      	mov	r2, r5
 80073d8:	4639      	mov	r1, r7
 80073da:	4630      	mov	r0, r6
 80073dc:	47c0      	blx	r8
 80073de:	3001      	adds	r0, #1
 80073e0:	d0aa      	beq.n	8007338 <_printf_i+0x12c>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	079b      	lsls	r3, r3, #30
 80073e6:	d413      	bmi.n	8007410 <_printf_i+0x204>
 80073e8:	68e0      	ldr	r0, [r4, #12]
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	4298      	cmp	r0, r3
 80073ee:	bfb8      	it	lt
 80073f0:	4618      	movlt	r0, r3
 80073f2:	e7a3      	b.n	800733c <_printf_i+0x130>
 80073f4:	2301      	movs	r3, #1
 80073f6:	464a      	mov	r2, r9
 80073f8:	4639      	mov	r1, r7
 80073fa:	4630      	mov	r0, r6
 80073fc:	47c0      	blx	r8
 80073fe:	3001      	adds	r0, #1
 8007400:	d09a      	beq.n	8007338 <_printf_i+0x12c>
 8007402:	3501      	adds	r5, #1
 8007404:	68e3      	ldr	r3, [r4, #12]
 8007406:	9a03      	ldr	r2, [sp, #12]
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	42ab      	cmp	r3, r5
 800740c:	dcf2      	bgt.n	80073f4 <_printf_i+0x1e8>
 800740e:	e7eb      	b.n	80073e8 <_printf_i+0x1dc>
 8007410:	2500      	movs	r5, #0
 8007412:	f104 0919 	add.w	r9, r4, #25
 8007416:	e7f5      	b.n	8007404 <_printf_i+0x1f8>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1ac      	bne.n	8007376 <_printf_i+0x16a>
 800741c:	7803      	ldrb	r3, [r0, #0]
 800741e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007422:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007426:	e76c      	b.n	8007302 <_printf_i+0xf6>
 8007428:	0801af61 	.word	0x0801af61
 800742c:	0801af72 	.word	0x0801af72

08007430 <memcpy>:
 8007430:	b510      	push	{r4, lr}
 8007432:	1e43      	subs	r3, r0, #1
 8007434:	440a      	add	r2, r1
 8007436:	4291      	cmp	r1, r2
 8007438:	d100      	bne.n	800743c <memcpy+0xc>
 800743a:	bd10      	pop	{r4, pc}
 800743c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007440:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007444:	e7f7      	b.n	8007436 <memcpy+0x6>

08007446 <memmove>:
 8007446:	4288      	cmp	r0, r1
 8007448:	b510      	push	{r4, lr}
 800744a:	eb01 0302 	add.w	r3, r1, r2
 800744e:	d807      	bhi.n	8007460 <memmove+0x1a>
 8007450:	1e42      	subs	r2, r0, #1
 8007452:	4299      	cmp	r1, r3
 8007454:	d00a      	beq.n	800746c <memmove+0x26>
 8007456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800745a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800745e:	e7f8      	b.n	8007452 <memmove+0xc>
 8007460:	4283      	cmp	r3, r0
 8007462:	d9f5      	bls.n	8007450 <memmove+0xa>
 8007464:	1881      	adds	r1, r0, r2
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	42d3      	cmn	r3, r2
 800746a:	d100      	bne.n	800746e <memmove+0x28>
 800746c:	bd10      	pop	{r4, pc}
 800746e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007472:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007476:	e7f7      	b.n	8007468 <memmove+0x22>

08007478 <_free_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4605      	mov	r5, r0
 800747c:	2900      	cmp	r1, #0
 800747e:	d045      	beq.n	800750c <_free_r+0x94>
 8007480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007484:	1f0c      	subs	r4, r1, #4
 8007486:	2b00      	cmp	r3, #0
 8007488:	bfb8      	it	lt
 800748a:	18e4      	addlt	r4, r4, r3
 800748c:	f000 f8d2 	bl	8007634 <__malloc_lock>
 8007490:	4a1f      	ldr	r2, [pc, #124]	; (8007510 <_free_r+0x98>)
 8007492:	6813      	ldr	r3, [r2, #0]
 8007494:	4610      	mov	r0, r2
 8007496:	b933      	cbnz	r3, 80074a6 <_free_r+0x2e>
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	6014      	str	r4, [r2, #0]
 800749c:	4628      	mov	r0, r5
 800749e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074a2:	f000 b8c8 	b.w	8007636 <__malloc_unlock>
 80074a6:	42a3      	cmp	r3, r4
 80074a8:	d90c      	bls.n	80074c4 <_free_r+0x4c>
 80074aa:	6821      	ldr	r1, [r4, #0]
 80074ac:	1862      	adds	r2, r4, r1
 80074ae:	4293      	cmp	r3, r2
 80074b0:	bf04      	itt	eq
 80074b2:	681a      	ldreq	r2, [r3, #0]
 80074b4:	685b      	ldreq	r3, [r3, #4]
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	bf04      	itt	eq
 80074ba:	1852      	addeq	r2, r2, r1
 80074bc:	6022      	streq	r2, [r4, #0]
 80074be:	6004      	str	r4, [r0, #0]
 80074c0:	e7ec      	b.n	800749c <_free_r+0x24>
 80074c2:	4613      	mov	r3, r2
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	b10a      	cbz	r2, 80074cc <_free_r+0x54>
 80074c8:	42a2      	cmp	r2, r4
 80074ca:	d9fa      	bls.n	80074c2 <_free_r+0x4a>
 80074cc:	6819      	ldr	r1, [r3, #0]
 80074ce:	1858      	adds	r0, r3, r1
 80074d0:	42a0      	cmp	r0, r4
 80074d2:	d10b      	bne.n	80074ec <_free_r+0x74>
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	4401      	add	r1, r0
 80074d8:	1858      	adds	r0, r3, r1
 80074da:	4282      	cmp	r2, r0
 80074dc:	6019      	str	r1, [r3, #0]
 80074de:	d1dd      	bne.n	800749c <_free_r+0x24>
 80074e0:	6810      	ldr	r0, [r2, #0]
 80074e2:	6852      	ldr	r2, [r2, #4]
 80074e4:	605a      	str	r2, [r3, #4]
 80074e6:	4401      	add	r1, r0
 80074e8:	6019      	str	r1, [r3, #0]
 80074ea:	e7d7      	b.n	800749c <_free_r+0x24>
 80074ec:	d902      	bls.n	80074f4 <_free_r+0x7c>
 80074ee:	230c      	movs	r3, #12
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	e7d3      	b.n	800749c <_free_r+0x24>
 80074f4:	6820      	ldr	r0, [r4, #0]
 80074f6:	1821      	adds	r1, r4, r0
 80074f8:	428a      	cmp	r2, r1
 80074fa:	bf04      	itt	eq
 80074fc:	6811      	ldreq	r1, [r2, #0]
 80074fe:	6852      	ldreq	r2, [r2, #4]
 8007500:	6062      	str	r2, [r4, #4]
 8007502:	bf04      	itt	eq
 8007504:	1809      	addeq	r1, r1, r0
 8007506:	6021      	streq	r1, [r4, #0]
 8007508:	605c      	str	r4, [r3, #4]
 800750a:	e7c7      	b.n	800749c <_free_r+0x24>
 800750c:	bd38      	pop	{r3, r4, r5, pc}
 800750e:	bf00      	nop
 8007510:	20000098 	.word	0x20000098

08007514 <_malloc_r>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	1ccd      	adds	r5, r1, #3
 8007518:	f025 0503 	bic.w	r5, r5, #3
 800751c:	3508      	adds	r5, #8
 800751e:	2d0c      	cmp	r5, #12
 8007520:	bf38      	it	cc
 8007522:	250c      	movcc	r5, #12
 8007524:	2d00      	cmp	r5, #0
 8007526:	4606      	mov	r6, r0
 8007528:	db01      	blt.n	800752e <_malloc_r+0x1a>
 800752a:	42a9      	cmp	r1, r5
 800752c:	d903      	bls.n	8007536 <_malloc_r+0x22>
 800752e:	230c      	movs	r3, #12
 8007530:	6033      	str	r3, [r6, #0]
 8007532:	2000      	movs	r0, #0
 8007534:	bd70      	pop	{r4, r5, r6, pc}
 8007536:	f000 f87d 	bl	8007634 <__malloc_lock>
 800753a:	4a21      	ldr	r2, [pc, #132]	; (80075c0 <_malloc_r+0xac>)
 800753c:	6814      	ldr	r4, [r2, #0]
 800753e:	4621      	mov	r1, r4
 8007540:	b991      	cbnz	r1, 8007568 <_malloc_r+0x54>
 8007542:	4c20      	ldr	r4, [pc, #128]	; (80075c4 <_malloc_r+0xb0>)
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	b91b      	cbnz	r3, 8007550 <_malloc_r+0x3c>
 8007548:	4630      	mov	r0, r6
 800754a:	f000 f863 	bl	8007614 <_sbrk_r>
 800754e:	6020      	str	r0, [r4, #0]
 8007550:	4629      	mov	r1, r5
 8007552:	4630      	mov	r0, r6
 8007554:	f000 f85e 	bl	8007614 <_sbrk_r>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d124      	bne.n	80075a6 <_malloc_r+0x92>
 800755c:	230c      	movs	r3, #12
 800755e:	6033      	str	r3, [r6, #0]
 8007560:	4630      	mov	r0, r6
 8007562:	f000 f868 	bl	8007636 <__malloc_unlock>
 8007566:	e7e4      	b.n	8007532 <_malloc_r+0x1e>
 8007568:	680b      	ldr	r3, [r1, #0]
 800756a:	1b5b      	subs	r3, r3, r5
 800756c:	d418      	bmi.n	80075a0 <_malloc_r+0x8c>
 800756e:	2b0b      	cmp	r3, #11
 8007570:	d90f      	bls.n	8007592 <_malloc_r+0x7e>
 8007572:	600b      	str	r3, [r1, #0]
 8007574:	50cd      	str	r5, [r1, r3]
 8007576:	18cc      	adds	r4, r1, r3
 8007578:	4630      	mov	r0, r6
 800757a:	f000 f85c 	bl	8007636 <__malloc_unlock>
 800757e:	f104 000b 	add.w	r0, r4, #11
 8007582:	1d23      	adds	r3, r4, #4
 8007584:	f020 0007 	bic.w	r0, r0, #7
 8007588:	1ac3      	subs	r3, r0, r3
 800758a:	d0d3      	beq.n	8007534 <_malloc_r+0x20>
 800758c:	425a      	negs	r2, r3
 800758e:	50e2      	str	r2, [r4, r3]
 8007590:	e7d0      	b.n	8007534 <_malloc_r+0x20>
 8007592:	428c      	cmp	r4, r1
 8007594:	684b      	ldr	r3, [r1, #4]
 8007596:	bf16      	itet	ne
 8007598:	6063      	strne	r3, [r4, #4]
 800759a:	6013      	streq	r3, [r2, #0]
 800759c:	460c      	movne	r4, r1
 800759e:	e7eb      	b.n	8007578 <_malloc_r+0x64>
 80075a0:	460c      	mov	r4, r1
 80075a2:	6849      	ldr	r1, [r1, #4]
 80075a4:	e7cc      	b.n	8007540 <_malloc_r+0x2c>
 80075a6:	1cc4      	adds	r4, r0, #3
 80075a8:	f024 0403 	bic.w	r4, r4, #3
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d005      	beq.n	80075bc <_malloc_r+0xa8>
 80075b0:	1a21      	subs	r1, r4, r0
 80075b2:	4630      	mov	r0, r6
 80075b4:	f000 f82e 	bl	8007614 <_sbrk_r>
 80075b8:	3001      	adds	r0, #1
 80075ba:	d0cf      	beq.n	800755c <_malloc_r+0x48>
 80075bc:	6025      	str	r5, [r4, #0]
 80075be:	e7db      	b.n	8007578 <_malloc_r+0x64>
 80075c0:	20000098 	.word	0x20000098
 80075c4:	2000009c 	.word	0x2000009c

080075c8 <_realloc_r>:
 80075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ca:	4607      	mov	r7, r0
 80075cc:	4614      	mov	r4, r2
 80075ce:	460e      	mov	r6, r1
 80075d0:	b921      	cbnz	r1, 80075dc <_realloc_r+0x14>
 80075d2:	4611      	mov	r1, r2
 80075d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075d8:	f7ff bf9c 	b.w	8007514 <_malloc_r>
 80075dc:	b922      	cbnz	r2, 80075e8 <_realloc_r+0x20>
 80075de:	f7ff ff4b 	bl	8007478 <_free_r>
 80075e2:	4625      	mov	r5, r4
 80075e4:	4628      	mov	r0, r5
 80075e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e8:	f000 f826 	bl	8007638 <_malloc_usable_size_r>
 80075ec:	42a0      	cmp	r0, r4
 80075ee:	d20f      	bcs.n	8007610 <_realloc_r+0x48>
 80075f0:	4621      	mov	r1, r4
 80075f2:	4638      	mov	r0, r7
 80075f4:	f7ff ff8e 	bl	8007514 <_malloc_r>
 80075f8:	4605      	mov	r5, r0
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d0f2      	beq.n	80075e4 <_realloc_r+0x1c>
 80075fe:	4631      	mov	r1, r6
 8007600:	4622      	mov	r2, r4
 8007602:	f7ff ff15 	bl	8007430 <memcpy>
 8007606:	4631      	mov	r1, r6
 8007608:	4638      	mov	r0, r7
 800760a:	f7ff ff35 	bl	8007478 <_free_r>
 800760e:	e7e9      	b.n	80075e4 <_realloc_r+0x1c>
 8007610:	4635      	mov	r5, r6
 8007612:	e7e7      	b.n	80075e4 <_realloc_r+0x1c>

08007614 <_sbrk_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4c06      	ldr	r4, [pc, #24]	; (8007630 <_sbrk_r+0x1c>)
 8007618:	2300      	movs	r3, #0
 800761a:	4605      	mov	r5, r0
 800761c:	4608      	mov	r0, r1
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	f7fa f92a 	bl	8001878 <_sbrk>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d102      	bne.n	800762e <_sbrk_r+0x1a>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	b103      	cbz	r3, 800762e <_sbrk_r+0x1a>
 800762c:	602b      	str	r3, [r5, #0]
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	200092bc 	.word	0x200092bc

08007634 <__malloc_lock>:
 8007634:	4770      	bx	lr

08007636 <__malloc_unlock>:
 8007636:	4770      	bx	lr

08007638 <_malloc_usable_size_r>:
 8007638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800763c:	1f18      	subs	r0, r3, #4
 800763e:	2b00      	cmp	r3, #0
 8007640:	bfbc      	itt	lt
 8007642:	580b      	ldrlt	r3, [r1, r0]
 8007644:	18c0      	addlt	r0, r0, r3
 8007646:	4770      	bx	lr

08007648 <log10f>:
 8007648:	b510      	push	{r4, lr}
 800764a:	ed2d 8b02 	vpush	{d8}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	eeb0 8a40 	vmov.f32	s16, s0
 8007654:	f000 f8be 	bl	80077d4 <__ieee754_log10f>
 8007658:	4b31      	ldr	r3, [pc, #196]	; (8007720 <log10f+0xd8>)
 800765a:	f993 4000 	ldrsb.w	r4, [r3]
 800765e:	1c63      	adds	r3, r4, #1
 8007660:	d059      	beq.n	8007716 <log10f+0xce>
 8007662:	eeb4 8a48 	vcmp.f32	s16, s16
 8007666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766a:	d654      	bvs.n	8007716 <log10f+0xce>
 800766c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007674:	d84f      	bhi.n	8007716 <log10f+0xce>
 8007676:	4b2b      	ldr	r3, [pc, #172]	; (8007724 <log10f+0xdc>)
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	ee18 0a10 	vmov	r0, s16
 800767e:	2300      	movs	r3, #0
 8007680:	9308      	str	r3, [sp, #32]
 8007682:	f7f8 ffc1 	bl	8000608 <__aeabi_f2d>
 8007686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800768a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800768e:	b994      	cbnz	r4, 80076b6 <log10f+0x6e>
 8007690:	4b25      	ldr	r3, [pc, #148]	; (8007728 <log10f+0xe0>)
 8007692:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007696:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076a2:	d025      	beq.n	80076f0 <log10f+0xa8>
 80076a4:	2301      	movs	r3, #1
 80076a6:	2c02      	cmp	r4, #2
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	d116      	bne.n	80076da <log10f+0x92>
 80076ac:	f7ff fb94 	bl	8006dd8 <__errno>
 80076b0:	2321      	movs	r3, #33	; 0x21
 80076b2:	6003      	str	r3, [r0, #0]
 80076b4:	e016      	b.n	80076e4 <log10f+0x9c>
 80076b6:	4b1d      	ldr	r3, [pc, #116]	; (800772c <log10f+0xe4>)
 80076b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80076bc:	2200      	movs	r2, #0
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076c6:	d1ed      	bne.n	80076a4 <log10f+0x5c>
 80076c8:	2302      	movs	r3, #2
 80076ca:	429c      	cmp	r4, r3
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	d111      	bne.n	80076f4 <log10f+0xac>
 80076d0:	f7ff fb82 	bl	8006dd8 <__errno>
 80076d4:	2322      	movs	r3, #34	; 0x22
 80076d6:	6003      	str	r3, [r0, #0]
 80076d8:	e011      	b.n	80076fe <log10f+0xb6>
 80076da:	4668      	mov	r0, sp
 80076dc:	f000 f8d3 	bl	8007886 <matherr>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d0e3      	beq.n	80076ac <log10f+0x64>
 80076e4:	4812      	ldr	r0, [pc, #72]	; (8007730 <log10f+0xe8>)
 80076e6:	f000 f8d3 	bl	8007890 <nan>
 80076ea:	ed8d 0b06 	vstr	d0, [sp, #24]
 80076ee:	e006      	b.n	80076fe <log10f+0xb6>
 80076f0:	2302      	movs	r3, #2
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	4668      	mov	r0, sp
 80076f6:	f000 f8c6 	bl	8007886 <matherr>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d0e8      	beq.n	80076d0 <log10f+0x88>
 80076fe:	9b08      	ldr	r3, [sp, #32]
 8007700:	b11b      	cbz	r3, 800770a <log10f+0xc2>
 8007702:	f7ff fb69 	bl	8006dd8 <__errno>
 8007706:	9b08      	ldr	r3, [sp, #32]
 8007708:	6003      	str	r3, [r0, #0]
 800770a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800770e:	f7f9 f9e5 	bl	8000adc <__aeabi_d2f>
 8007712:	ee00 0a10 	vmov	s0, r0
 8007716:	b00a      	add	sp, #40	; 0x28
 8007718:	ecbd 8b02 	vpop	{d8}
 800771c:	bd10      	pop	{r4, pc}
 800771e:	bf00      	nop
 8007720:	20000070 	.word	0x20000070
 8007724:	0801af83 	.word	0x0801af83
 8007728:	c7efffff 	.word	0xc7efffff
 800772c:	fff00000 	.word	0xfff00000
 8007730:	0801af55 	.word	0x0801af55

08007734 <sqrtf>:
 8007734:	b510      	push	{r4, lr}
 8007736:	ed2d 8b02 	vpush	{d8}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	eeb0 8a40 	vmov.f32	s16, s0
 8007740:	f000 f89e 	bl	8007880 <__ieee754_sqrtf>
 8007744:	4b21      	ldr	r3, [pc, #132]	; (80077cc <sqrtf+0x98>)
 8007746:	f993 4000 	ldrsb.w	r4, [r3]
 800774a:	1c63      	adds	r3, r4, #1
 800774c:	d02c      	beq.n	80077a8 <sqrtf+0x74>
 800774e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007756:	d627      	bvs.n	80077a8 <sqrtf+0x74>
 8007758:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007760:	d522      	bpl.n	80077a8 <sqrtf+0x74>
 8007762:	2301      	movs	r3, #1
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <sqrtf+0x9c>)
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	ee18 0a10 	vmov	r0, s16
 800776e:	2300      	movs	r3, #0
 8007770:	9308      	str	r3, [sp, #32]
 8007772:	f7f8 ff49 	bl	8000608 <__aeabi_f2d>
 8007776:	2200      	movs	r2, #0
 8007778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800777c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007780:	2300      	movs	r3, #0
 8007782:	b9ac      	cbnz	r4, 80077b0 <sqrtf+0x7c>
 8007784:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007788:	4668      	mov	r0, sp
 800778a:	f000 f87c 	bl	8007886 <matherr>
 800778e:	b1b8      	cbz	r0, 80077c0 <sqrtf+0x8c>
 8007790:	9b08      	ldr	r3, [sp, #32]
 8007792:	b11b      	cbz	r3, 800779c <sqrtf+0x68>
 8007794:	f7ff fb20 	bl	8006dd8 <__errno>
 8007798:	9b08      	ldr	r3, [sp, #32]
 800779a:	6003      	str	r3, [r0, #0]
 800779c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077a0:	f7f9 f99c 	bl	8000adc <__aeabi_d2f>
 80077a4:	ee00 0a10 	vmov	s0, r0
 80077a8:	b00a      	add	sp, #40	; 0x28
 80077aa:	ecbd 8b02 	vpop	{d8}
 80077ae:	bd10      	pop	{r4, pc}
 80077b0:	4610      	mov	r0, r2
 80077b2:	4619      	mov	r1, r3
 80077b4:	f7f9 f8aa 	bl	800090c <__aeabi_ddiv>
 80077b8:	2c02      	cmp	r4, #2
 80077ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80077be:	d1e3      	bne.n	8007788 <sqrtf+0x54>
 80077c0:	f7ff fb0a 	bl	8006dd8 <__errno>
 80077c4:	2321      	movs	r3, #33	; 0x21
 80077c6:	6003      	str	r3, [r0, #0]
 80077c8:	e7e2      	b.n	8007790 <sqrtf+0x5c>
 80077ca:	bf00      	nop
 80077cc:	20000070 	.word	0x20000070
 80077d0:	0801af8a 	.word	0x0801af8a

080077d4 <__ieee754_log10f>:
 80077d4:	b508      	push	{r3, lr}
 80077d6:	ee10 2a10 	vmov	r2, s0
 80077da:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80077de:	ed2d 8b02 	vpush	{d8}
 80077e2:	d108      	bne.n	80077f6 <__ieee754_log10f+0x22>
 80077e4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007868 <__ieee754_log10f+0x94>
 80077e8:	eddf 7a20 	vldr	s15, [pc, #128]	; 800786c <__ieee754_log10f+0x98>
 80077ec:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80077f0:	ecbd 8b02 	vpop	{d8}
 80077f4:	bd08      	pop	{r3, pc}
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	da02      	bge.n	8007800 <__ieee754_log10f+0x2c>
 80077fa:	ee30 7a40 	vsub.f32	s14, s0, s0
 80077fe:	e7f3      	b.n	80077e8 <__ieee754_log10f+0x14>
 8007800:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007804:	db02      	blt.n	800780c <__ieee754_log10f+0x38>
 8007806:	ee30 0a00 	vadd.f32	s0, s0, s0
 800780a:	e7f1      	b.n	80077f0 <__ieee754_log10f+0x1c>
 800780c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007810:	bfbf      	itttt	lt
 8007812:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8007870 <__ieee754_log10f+0x9c>
 8007816:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800781a:	f06f 0118 	mvnlt.w	r1, #24
 800781e:	ee17 2a90 	vmovlt	r2, s15
 8007822:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007826:	bfa8      	it	ge
 8007828:	2100      	movge	r1, #0
 800782a:	3b7f      	subs	r3, #127	; 0x7f
 800782c:	440b      	add	r3, r1
 800782e:	0fd9      	lsrs	r1, r3, #31
 8007830:	440b      	add	r3, r1
 8007832:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007836:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800783a:	ee07 3a90 	vmov	s15, r3
 800783e:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8007842:	ee00 3a10 	vmov	s0, r3
 8007846:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800784a:	f000 f829 	bl	80078a0 <__ieee754_logf>
 800784e:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007874 <__ieee754_log10f+0xa0>
 8007852:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007856:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007878 <__ieee754_log10f+0xa4>
 800785a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800785e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800787c <__ieee754_log10f+0xa8>
 8007862:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007866:	e7c3      	b.n	80077f0 <__ieee754_log10f+0x1c>
 8007868:	cc000000 	.word	0xcc000000
 800786c:	00000000 	.word	0x00000000
 8007870:	4c000000 	.word	0x4c000000
 8007874:	3ede5bd9 	.word	0x3ede5bd9
 8007878:	355427db 	.word	0x355427db
 800787c:	3e9a2080 	.word	0x3e9a2080

08007880 <__ieee754_sqrtf>:
 8007880:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007884:	4770      	bx	lr

08007886 <matherr>:
 8007886:	2000      	movs	r0, #0
 8007888:	4770      	bx	lr
 800788a:	0000      	movs	r0, r0
 800788c:	0000      	movs	r0, r0
	...

08007890 <nan>:
 8007890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007898 <nan+0x8>
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	00000000 	.word	0x00000000
 800789c:	7ff80000 	.word	0x7ff80000

080078a0 <__ieee754_logf>:
 80078a0:	ee10 3a10 	vmov	r3, s0
 80078a4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80078a8:	d106      	bne.n	80078b8 <__ieee754_logf+0x18>
 80078aa:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007a40 <__ieee754_logf+0x1a0>
 80078ae:	eddf 7a65 	vldr	s15, [pc, #404]	; 8007a44 <__ieee754_logf+0x1a4>
 80078b2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80078b6:	4770      	bx	lr
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	da02      	bge.n	80078c2 <__ieee754_logf+0x22>
 80078bc:	ee30 7a40 	vsub.f32	s14, s0, s0
 80078c0:	e7f5      	b.n	80078ae <__ieee754_logf+0xe>
 80078c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80078c6:	db02      	blt.n	80078ce <__ieee754_logf+0x2e>
 80078c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80078cc:	4770      	bx	lr
 80078ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078d2:	bfbf      	itttt	lt
 80078d4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8007a48 <__ieee754_logf+0x1a8>
 80078d8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80078dc:	f06f 0118 	mvnlt.w	r1, #24
 80078e0:	ee17 3a90 	vmovlt	r3, s15
 80078e4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80078e8:	bfa8      	it	ge
 80078ea:	2100      	movge	r1, #0
 80078ec:	3a7f      	subs	r2, #127	; 0x7f
 80078ee:	440a      	add	r2, r1
 80078f0:	4956      	ldr	r1, [pc, #344]	; (8007a4c <__ieee754_logf+0x1ac>)
 80078f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80078f6:	4419      	add	r1, r3
 80078f8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80078fc:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8007900:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8007904:	4319      	orrs	r1, r3
 8007906:	ee07 1a90 	vmov	s15, r1
 800790a:	f103 010f 	add.w	r1, r3, #15
 800790e:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8007912:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007916:	290f      	cmp	r1, #15
 8007918:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800791c:	dc31      	bgt.n	8007982 <__ieee754_logf+0xe2>
 800791e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007926:	d10f      	bne.n	8007948 <__ieee754_logf+0xa8>
 8007928:	2a00      	cmp	r2, #0
 800792a:	f000 8085 	beq.w	8007a38 <__ieee754_logf+0x198>
 800792e:	ee07 2a90 	vmov	s15, r2
 8007932:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8007a50 <__ieee754_logf+0x1b0>
 8007936:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007a54 <__ieee754_logf+0x1b4>
 800793a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800793e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007942:	eea7 0a87 	vfma.f32	s0, s15, s14
 8007946:	4770      	bx	lr
 8007948:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007a58 <__ieee754_logf+0x1b8>
 800794c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007950:	eea0 7a67 	vfms.f32	s14, s0, s15
 8007954:	ee60 7a00 	vmul.f32	s15, s0, s0
 8007958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800795c:	b912      	cbnz	r2, 8007964 <__ieee754_logf+0xc4>
 800795e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007962:	4770      	bx	lr
 8007964:	ee07 2a90 	vmov	s15, r2
 8007968:	eddf 6a39 	vldr	s13, [pc, #228]	; 8007a50 <__ieee754_logf+0x1b0>
 800796c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007970:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007974:	ee37 0a40 	vsub.f32	s0, s14, s0
 8007978:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007a54 <__ieee754_logf+0x1b4>
 800797c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8007980:	4770      	bx	lr
 8007982:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007986:	ee70 7a27 	vadd.f32	s15, s0, s15
 800798a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a5c <__ieee754_logf+0x1bc>
 800798e:	eddf 4a34 	vldr	s9, [pc, #208]	; 8007a60 <__ieee754_logf+0x1c0>
 8007992:	4934      	ldr	r1, [pc, #208]	; (8007a64 <__ieee754_logf+0x1c4>)
 8007994:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8007998:	4419      	add	r1, r3
 800799a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800799e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80079a2:	430b      	orrs	r3, r1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	ee07 2a90 	vmov	s15, r2
 80079aa:	ee26 5a06 	vmul.f32	s10, s12, s12
 80079ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80079b2:	ee25 7a05 	vmul.f32	s14, s10, s10
 80079b6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8007a68 <__ieee754_logf+0x1c8>
 80079ba:	eee7 7a25 	vfma.f32	s15, s14, s11
 80079be:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8007a6c <__ieee754_logf+0x1cc>
 80079c2:	eee7 5a87 	vfma.f32	s11, s15, s14
 80079c6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8007a70 <__ieee754_logf+0x1d0>
 80079ca:	eee7 7a24 	vfma.f32	s15, s14, s9
 80079ce:	eddf 4a29 	vldr	s9, [pc, #164]	; 8007a74 <__ieee754_logf+0x1d4>
 80079d2:	eee7 4a87 	vfma.f32	s9, s15, s14
 80079d6:	eddf 7a28 	vldr	s15, [pc, #160]	; 8007a78 <__ieee754_logf+0x1d8>
 80079da:	eee4 7a87 	vfma.f32	s15, s9, s14
 80079de:	ee67 7a85 	vmul.f32	s15, s15, s10
 80079e2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80079e6:	dd1c      	ble.n	8007a22 <__ieee754_logf+0x182>
 80079e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80079ec:	ee20 7a07 	vmul.f32	s14, s0, s14
 80079f0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80079f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079f8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80079fc:	b922      	cbnz	r2, 8007a08 <__ieee754_logf+0x168>
 80079fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007a06:	4770      	bx	lr
 8007a08:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8007a50 <__ieee754_logf+0x1b0>
 8007a0c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8007a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a14:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a18:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007a54 <__ieee754_logf+0x1b4>
 8007a1c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8007a20:	4770      	bx	lr
 8007a22:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007a26:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	d0e9      	beq.n	8007a02 <__ieee754_logf+0x162>
 8007a2e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007a50 <__ieee754_logf+0x1b0>
 8007a32:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8007a36:	e7ed      	b.n	8007a14 <__ieee754_logf+0x174>
 8007a38:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8007a44 <__ieee754_logf+0x1a4>
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	cc000000 	.word	0xcc000000
 8007a44:	00000000 	.word	0x00000000
 8007a48:	4c000000 	.word	0x4c000000
 8007a4c:	004afb20 	.word	0x004afb20
 8007a50:	3717f7d1 	.word	0x3717f7d1
 8007a54:	3f317180 	.word	0x3f317180
 8007a58:	3eaaaaab 	.word	0x3eaaaaab
 8007a5c:	3e1cd04f 	.word	0x3e1cd04f
 8007a60:	3e178897 	.word	0x3e178897
 8007a64:	ffcf5c30 	.word	0xffcf5c30
 8007a68:	3e638e29 	.word	0x3e638e29
 8007a6c:	3ecccccd 	.word	0x3ecccccd
 8007a70:	3e3a3325 	.word	0x3e3a3325
 8007a74:	3e924925 	.word	0x3e924925
 8007a78:	3f2aaaab 	.word	0x3f2aaaab

08007a7c <_init>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	bf00      	nop
 8007a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a82:	bc08      	pop	{r3}
 8007a84:	469e      	mov	lr, r3
 8007a86:	4770      	bx	lr

08007a88 <_fini>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	bf00      	nop
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr
